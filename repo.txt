├── .env.example
├── .gitignore
├── CLAUDE.md
├── README.md
├── REDIS.md
├── docker-compose.yml
├── example.json
├── package-lock.json
├── package.json
├── postcss.config.js
├── prisma
    ├── dev.db
    ├── schema.postgresql.prisma
    └── schema.prisma
├── railway.json
├── railway.toml
├── scripts
    ├── warm-cache-standalone.ts
    └── warm-cache.ts
├── src
    ├── app.css
    ├── app.d.ts
    ├── app.html
    ├── lib
    │   ├── assets
    │   │   └── favicon.svg
    │   ├── components
    │   │   ├── CLAUDE.md
    │   │   ├── CardFilters.svelte
    │   │   ├── CardGrid.svelte
    │   │   ├── CardTable.svelte
    │   │   ├── PackManager.svelte
    │   │   ├── ProfileForm.svelte
    │   │   ├── TradeTable.svelte
    │   │   ├── UserSearchInput.svelte
    │   │   └── trade
    │   │   │   └── SetSummaryTable.svelte
    │   ├── index.ts
    │   ├── server
    │   │   ├── db
    │   │   │   ├── client.ts
    │   │   │   └── profiles.ts
    │   │   ├── redis
    │   │   │   └── client.ts
    │   │   ├── services
    │   │   │   ├── CLAUDE.md
    │   │   │   ├── alchemy.ts
    │   │   │   ├── comparator.ts
    │   │   │   ├── fetcher.ts
    │   │   │   ├── normalizer.ts
    │   │   │   ├── parser.ts
    │   │   │   ├── tradeAnalyzer.ts
    │   │   │   └── userSync.ts
    │   │   └── types.ts
    │   └── utils
    │   │   ├── CLAUDE.md
    │   │   ├── cacheUtils.ts
    │   │   ├── card.ts
    │   │   ├── pricing.ts
    │   │   ├── trade
    │   │       └── summaries.ts
    │   │   └── url.ts
    └── routes
    │   ├── +layout.svelte
    │   ├── +page.svelte
    │   ├── CLAUDE.md
    │   ├── api
    │       ├── CLAUDE.md
    │       ├── card
    │       │   └── [cardId]
    │       │   │   └── listings
    │       │   │       └── +server.ts
    │       ├── compare
    │       │   └── +server.ts
    │       ├── debug-cards
    │       │   └── +server.ts
    │       ├── extract
    │       │   └── +server.ts
    │       ├── profiles
    │       │   ├── +server.ts
    │       │   └── [id]
    │       │   │   └── +server.ts
    │       ├── redis-debug
    │       │   └── +server.ts
    │       ├── redis-test
    │       │   └── +server.ts
    │       ├── resolve-username
    │       │   └── [username]
    │       │   │   └── +server.ts
    │       ├── search-users
    │       │   └── +server.ts
    │       ├── set
    │       │   └── [setId]
    │       │   │   └── +server.ts
    │       ├── sync-users
    │       │   └── +server.ts
    │       ├── trade-compare
    │       │   └── +server.ts
    │       └── warm-cache
    │       │   └── +server.ts
    │   ├── extract
    │       └── +page.svelte
    │   ├── profiles
    │       ├── +page.svelte
    │       ├── [id]
    │       │   ├── +page.server.ts
    │       │   ├── +page.svelte
    │       │   └── edit
    │       │   │   ├── +page.server.ts
    │       │   │   └── +page.svelte
    │       └── new
    │       │   └── +page.svelte
    │   └── trade-finder
    │       └── +page.svelte
├── static
    └── robots.txt
├── svelte.config.js
├── tailwind.config.js
├── test-2.js
├── tsconfig.json
└── vite.config.ts


/.env.example:
--------------------------------------------------------------------------------
 1 | # RIP Explorer - Environment Configuration Template
 2 | # Copy this file to .env and fill in the required values
 3 | 
 4 | # Alchemy API Configuration
 5 | # Required for blockchain data synchronization and username bridging
 6 | # Get your API key from: https://dashboard.alchemy.com/
 7 | ALCHEMY_API_KEY=84DWAeLFsaA-LPQ7-LR9k
 8 | 
 9 | # Database Configuration
10 | # SQLite database file location (relative to project root)
11 | # Default: prisma/dev.db (automatically created)
12 | DATABASE_URL="file:./dev.db"
13 | 
14 | # Redis Configuration
15 | # Railway automatically provides REDIS_URL when Redis plugin is enabled
16 | # 
17 | # Local development options:
18 | # 1. Leave blank (default) = Uses mock Redis (no setup required)
19 | # 2. Set USE_LOCAL_REDIS=true = Attempts connection to localhost:6379
20 | # 3. Set REDIS_URL=redis://localhost:6379 = Direct connection
21 | #
22 | # REDIS_URL=redis://localhost:6379
23 | # USE_LOCAL_REDIS=true
24 | 
25 | # Optional: Development/Production Environment
26 | NODE_ENV=development
27 | 
28 | # Optional: Server Configuration
29 | # PORT=5173
30 | # HOST=localhost
31 | 
32 | # Security Notes:
33 | # - Never commit the actual .env file to version control
34 | # - Keep your Alchemy API key private and secure
35 | # - For production, use environment-specific values


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
 1 | # Dependencies
 2 | node_modules/
 3 | .pnpm-store/
 4 | 
 5 | # SvelteKit / Vite build artifacts
 6 | .svelte-kit/
 7 | .vite/
 8 | .vite-temp/
 9 | dist/
10 | build/
11 | 
12 | # Logs
13 | npm-debug.log*
14 | yarn-debug.log*
15 | yarn-error.log*
16 | pnpm-debug.log*
17 | 
18 | # Environment files
19 | .env
20 | .env.*
21 | !.env.example
22 | 
23 | # OS / Editor junk
24 | .DS_Store
25 | Thumbs.db
26 | *.swp
27 | *.swo
28 | .idea/
29 | .vscode/*
30 | !.vscode/extensions.json
31 | 
32 | # Coverage / test
33 | coverage/
34 | 
35 | # Misc
36 | *.local
37 | *.cache
38 | 


--------------------------------------------------------------------------------
/CLAUDE.md:
--------------------------------------------------------------------------------
  1 | # CLAUDE.md
  2 | 
  3 | This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.
  4 | 
  5 | ## Project Overview
  6 | 
  7 | This is a robust web application specifically designed to extract complete profile data from rip.fun user pages with intelligent username-to-ID resolution powered by blockchain integration. The app features comprehensive username bridging through Alchemy-powered Base network scanning, fetches HTML from rip.fun profiles with enhanced reliability features, parses the SvelteKit data structure from JavaScript code, automatically removes clip_embedding data to reduce payload size, and provides clean JSON output with comprehensive visualization of profile information, digital cards, packs, and collection statistics.
  8 | 
  9 | ## 🏗️ Architecture Overview
 10 | 
 11 | The application follows a **component-based architecture** with clean separation of concerns:
 12 | 
 13 | - **Frontend**: Modular SvelteKit components with specialized functionality
 14 | - **Backend**: Service-oriented API layer with robust data processing  
 15 | - **Database**: SQLite with Prisma ORM for user mapping and sync tracking
 16 | - **Caching**: Smart localStorage system with component-level cache management
 17 | - **Integration**: Blockchain services and marketplace API integration
 18 | 
 19 | ### 🧩 Component Architecture (Post-Refactoring)
 20 | 
 21 | The application has been extensively refactored from a monolithic structure to a clean component-based architecture:
 22 | 
 23 | **Before Refactoring:**
 24 | - `src/routes/extract/+page.svelte`: 2,216+ lines (monolithic)
 25 | - `src/routes/trade-finder/+page.svelte`: 803 lines (massive duplication)
 26 | 
 27 | **After Refactoring:**
 28 | - `src/routes/extract/+page.svelte`: 1,475 lines (**741 lines saved, 33.4% reduction**)
 29 | - `src/routes/trade-finder/+page.svelte`: 488 lines (**315 lines saved, 39% reduction**)
 30 | - **6 New Reusable Components**: CardFilters, CardGrid, CardTable, PackManager, TradeTable, UserSearchInput
 31 | - **1 Additional Trade Component**: SetSummaryTable
 32 | - **4 Shared Utility Modules**: cacheUtils, card, pricing, url
 33 | - **1 Trade Summary Utility**: trade/summaries
 34 | 
 35 | **Total Lines Saved: 1,000+ lines across the application**
 36 | 
 37 | ### 🔄 Recent Major Refactoring (2025)
 38 | - **Component Architecture**: Complete refactoring from monolithic to component-based design
 39 | - **DRY Principles**: Eliminated over 1,000 lines of duplicate code across the application
 40 | - **Reusable Components**: Created specialized components for card filtering, display, and pack management
 41 | - **Centralized Utilities**: Extracted cache management and trade analysis into shared utilities
 42 | - **Type Safety**: Enhanced TypeScript interfaces and proper event handling between components
 43 | - **Performance Optimization**: Reduced bundle size and improved maintainability
 44 | 
 45 | ### Recent Major Enhancements (2025)
 46 | - **Username Bridging System**: Alchemy-powered blockchain integration for username-to-ID resolution with autocomplete functionality
 47 | - **Blockchain Integration**: Base network scanning of rip.fun smart contract for automatic user discovery and mapping
 48 | - **User Sync Infrastructure**: Background synchronization system with progress tracking and status monitoring
 49 | - **localStorage Caching System**: Smart browser storage with user-specific and set-specific caching for instant loading
 50 | - **Missing Cards Marketplace Integration**: Complete missing cards detection with real-time listing data and buy now functionality
 51 | - **Advanced Missing Cards Features**: Show missing cards, only missing cards mode, available only filtering with marketplace prices
 52 | - **Buy Now/Make Offer Integration**: Direct links to rip.fun marketplace for purchasing missing cards with listing price display
 53 | - **Advanced Card Management**: Set-based filtering, smart deduplication (no UI toggle), and dual view modes (grid/table)
 54 | - **Smart Set Recognition**: Automatic parsing of set names from API data with proper fallback handling  
 55 | - **Intelligent Pack Grouping**: Automatic categorization of packs by name with toggleable detailed views
 56 | - **Pack Status Tracking**: Visual summaries showing opened, sealed, and pending open counts
 57 | - **Enhanced Reliability**: Retry logic with exponential backoff and progressive timeouts (20s-60s)
 58 | - **Cache-First Loading**: Instant data loading from localStorage with smart refresh capabilities
 59 | - **Improved UX**: Real-time progress updates, detailed error messages, cache status indicators, and responsive design
 60 | - **Advanced Data Visualization**: Expandable pack groups, missing cards integration, marketplace data, and comprehensive status tables
 61 | 
 62 | ## 📁 File Structure & Components
 63 | 
 64 | ### Core Application Structure
 65 | 
 66 | ```
 67 | src/
 68 | ├── lib/
 69 | │   ├── components/           # Reusable UI Components
 70 | │   │   ├── CardFilters.svelte     # Advanced filtering interface (247 lines)
 71 | │   │   ├── CardGrid.svelte        # Visual card display grid (230 lines)
 72 | │   │   ├── CardTable.svelte       # Sortable data table with marketplace (332 lines)
 73 | │   │   ├── PackManager.svelte     # Pack grouping and management (201 lines)
 74 | │   │   ├── TradeTable.svelte      # Reusable trade analysis table (127 lines)
 75 | │   │   ├── UserSearchInput.svelte # Username search with autocomplete (111 lines)
 76 | │   │   └── ProfileForm.svelte     # Legacy profile creation form
 77 | │   ├── server/               # Backend Services
 78 | │   │   ├── db/              # Database Layer
 79 | │   │   │   ├── client.ts         # Prisma database client
 80 | │   │   │   └── profiles.ts       # Profile data operations
 81 | │   │   └── services/        # Business Logic Services
 82 | │   │       ├── alchemy.ts        # Blockchain integration with Alchemy SDK
 83 | │   │       ├── fetcher.ts        # Enhanced HTTP fetching with retries
 84 | │   │       ├── parser.ts         # SvelteKit data extraction and parsing
 85 | │   │       ├── normalizer.ts     # Data cleaning and normalization
 86 | │   │       ├── userSync.ts       # Blockchain user synchronization
 87 | │   │       ├── comparator.ts     # Profile comparison logic
 88 | │   │       └── tradeAnalyzer.ts  # Centralized trade analysis
 89 | │   ├── utils/               # Shared Utilities
 90 | │   │   └── cacheUtils.ts         # Centralized localStorage management (162 lines)
 91 | │   └── types.ts             # TypeScript type definitions
 92 | ├── routes/                  # SvelteKit Pages and API Endpoints
 93 | │   ├── api/                # API Layer
 94 | │   │   ├── extract/            # Core data extraction endpoint
 95 | │   │   ├── sync-users/         # Blockchain user synchronization
 96 | │   │   ├── resolve-username/   # Username-to-ID resolution
 97 | │   │   ├── search-users/       # User search with autocomplete
 98 | │   │   ├── set/[setId]/        # Pokemon TCG set data
 99 | │   │   ├── card/[cardId]/      # Individual card marketplace data
100 | │   │   ├── trade-compare/      # Trade analysis endpoint
101 | │   │   └── profiles/           # Legacy profile management
102 | │   ├── extract/            # Main Data Extraction Interface
103 | │   │   └── +page.svelte        # Refactored main extraction page (1,475 lines)
104 | │   ├── trade-finder/       # Trade Analysis Interface
105 | │   │   └── +page.svelte        # Refactored trade finder (488 lines)
106 | │   ├── profiles/           # Legacy Profile Management
107 | │   └── +layout.svelte      # Global application layout
108 | └── app.html                # Root HTML template
109 | ```
110 | 
111 | ### 🧩 Component Responsibilities
112 | 
113 | #### Frontend Components (`src/lib/components/`)
114 | 
115 | 1. **CardFilters.svelte** (247 lines)
116 |    - **Purpose**: Complete filtering interface for card management
117 |    - **Features**: Set filtering, rarity filtering, view mode toggle, missing cards options
118 |    - **Events**: Dispatches filter changes to parent components
119 |    - **Integration**: Works with all card display components
120 | 
121 | 2. **CardGrid.svelte** (230 lines)
122 |    - **Purpose**: Visual grid display for cards with missing card indicators
123 |    - **Features**: Set grouping, card status badges, missing card actions, marketplace links
124 |    - **Responsive**: Adapts to mobile and desktop layouts
125 |    - **Integration**: Receives filtered data from CardFilters
126 | 
127 | 3. **CardTable.svelte** (332 lines)
128 |    - **Purpose**: Comprehensive data table with sortable columns and marketplace integration
129 |    - **Features**: Sortable headers, marketplace data, buy now/make offer buttons, status indicators
130 |    - **Columns**: Card, Set, Rarity, Type, Value, Listed Price, Available, Action, Status
131 |    - **Integration**: Full marketplace API integration for missing cards
132 | 
133 | 4. **PackManager.svelte** (201 lines)
134 |    - **Purpose**: Intelligent pack grouping and management interface
135 |    - **Features**: Pack grouping by name, status summaries, expandable details, individual pack tables
136 |    - **Logic**: Pack status analysis (opened, sealed, pending)
137 |    - **Display**: Collapsible groups with summary statistics
138 | 
139 | 5. **TradeTable.svelte** (127 lines)
140 |    - **Purpose**: Reusable trade analysis table with highlighting
141 |    - **Features**: Dynamic row highlighting, trade type indicators, card count badges
142 |    - **Events**: Click handling for trade details
143 |    - **Used By**: Both trade-finder and trade-compare pages
144 | 
145 | 6. **UserSearchInput.svelte** (111 lines)
146 |    - **Purpose**: Intelligent username search with blockchain integration
147 |    - **Features**: Autocomplete, username resolution, loading states
148 |    - **Integration**: Connects to blockchain sync service
149 |    - **Used By**: Multiple pages requiring user input
150 | 
151 | #### Backend Services (`src/lib/server/services/`)
152 | 
153 | 1. **alchemy.ts** - Blockchain integration with Base network scanning
154 | 2. **fetcher.ts** - Enhanced HTTP client with retry logic and timeout handling  
155 | 3. **parser.ts** - SvelteKit data extraction from rip.fun HTML
156 | 4. **normalizer.ts** - Data cleaning and structure normalization
157 | 5. **userSync.ts** - Background blockchain user synchronization
158 | 6. **comparator.ts** - Profile comparison and diff generation
159 | 7. **tradeAnalyzer.ts** - Centralized trade analysis logic (shared utility)
160 | 
161 | #### Shared Utilities (`src/lib/utils/`)
162 | 
163 | 1. **cacheUtils.ts** (162 lines)
164 |    - **Purpose**: Centralized localStorage management
165 |    - **Features**: User-specific caching, set data caching, cache expiration
166 |    - **Functions**: Smart cache keys, cleanup utilities, cache status checking
167 |    - **Used By**: All components requiring data persistence
168 | 
169 | ### Core Components
170 | 
171 | - **Component-Based Frontend**: Modular SvelteKit components with specialized functionality
172 |   - **CardFilters Component** (248 lines): Advanced filtering interface with set-based organization, missing cards options, and search functionality
173 |   - **CardGrid Component** (230 lines): Visual card display with set grouping, missing card indicators, and marketplace integration
174 |   - **CardTable Component** (349 lines): Comprehensive sortable table with marketplace columns and action buttons
175 |   - **PackManager Component** (202 lines): Intelligent pack grouping with expandable details and status summaries
176 |   - **TradeTable Component** (127 lines): Reusable trade analysis table with dynamic highlighting
177 |   - **UserSearchInput Component** (112 lines): Username search with blockchain integration and autocomplete
178 |   - **SetSummaryTable Component** (53 lines): Generic reusable summary table for trade analysis
179 | 
180 | - **Service-Oriented Backend**: Modular services with specialized functionality
181 |   - **Blockchain Service** (alchemyService): Alchemy-powered Base network scanning for NFT recipients and buyer addresses
182 |   - **User Sync Service** (userSyncService): Background synchronization coordinator with database integration and progress tracking
183 |   - **Enhanced Fetcher Service**: Progressive timeout handling (15s→45s) with exponential backoff retry logic
184 |   - **Parser Service**: SvelteKit data extraction with improved regex methods and fallback strategies
185 |   - **Normalizer Service**: Data cleaning with clip_embedding removal and structure standardization
186 |   - **Trade Analyzer Service** ⭐: Centralized trade analysis logic extracted from duplicate code
187 |   - **Comparator Service**: Profile comparison with field mapping and similarity analysis
188 | 
189 | - **Shared Utilities**: Centralized utility functions eliminating code duplication
190 |   - **cacheUtils.ts** (163 lines): Smart localStorage management with user/set caching and expiration
191 |   - **card.ts** (8 lines): Set name resolution utilities for consistent card display
192 |   - **pricing.ts** (21 lines): Centralized pricing helpers for market and listed values  
193 |   - **url.ts** (16 lines): URL building utilities for rip.fun card links
194 |   - **trade/summaries.ts** (108 lines): Trade summary building utilities for consistent analysis
195 | 
196 | - **Enhanced Data Processing Pipeline**: 
197 |   1. Reliable HTML/API fetching with intelligent fallback strategies
198 |   2. Multi-method SvelteKit data parsing with improved regex and validation
199 |   3. Automatic clip_embedding removal and data normalization
200 |   4. Component-based display with specialized filtering and visualization
201 |   5. Smart caching with user-specific and set-specific strategies
202 |   6. Marketplace integration with real-time listing data and purchase links
203 | 
204 | - **Database Layer**: SQLite with Prisma ORM for user mappings, address storage, and sync status tracking
205 | 
206 | ### Key Workflows
207 | 
208 | 1. **Smart Input Resolution**: User provides either a rip.fun username (with autocomplete) or numeric user ID, system automatically resolves to appropriate extraction target
209 | 2. **Enhanced Data Extraction**: Backend fetches rip.fun profile HTML with automatic retries and progressive timeouts
210 |    - Real-time progress updates to user during long extractions
211 |    - Automatic retry on timeout/network errors with exponential backoff
212 |    - Detailed error messages with troubleshooting guidance
213 | 3. **Data Processing**: Parses complete SvelteKit data structure with pack status analysis
214 |    - Groups packs by name/type for organized display
215 |    - Calculates opened, sealed, and pending open counts
216 |    - Preserves all relevant data while removing clip_embedding bloat
217 | 4. **Advanced Visualization**: Interactive display with comprehensive card and pack management
218 |    - **Card Filtering**: Set-based filtering with dropdown selection and card count display
219 |    - **Missing Cards Integration**: Show missing cards with marketplace data, available only filtering, and buy now functionality
220 |    - **Smart Deduplication**: Automatic card deduplication (always active, no toggle)
221 |    - **Dual View Modes**: Grid view for visual browsing and table view with marketplace columns
222 |    - **Smart Set Recognition**: Automatic parsing of set names from API data (e.g., "151", "Prismatic Evolutions")
223 |    - **Marketplace Data**: Listed prices, availability status, buy now/make offer buttons for missing cards
224 |    - **Collapsible Pack Groups**: Summary statistics with expandable detailed views
225 |    - **Interactive Tables**: Enhanced tables with marketplace columns (Listed Price, Available, Action)
226 |    - **Visual Indicators**: Color-coded status badges, availability icons (✅/❌), and marketplace integration
227 |    - **Cache Status**: Visual indicators showing data source (📦 Cached vs 🌐 Live)
228 | 5. **Data Export**: Provides complete JSON output with profile, cards, packs, and statistics
229 | 
230 | ## Security Considerations
231 | 
232 | - All fetched HTML and JSON must be sanitized to prevent XSS/injection
233 | - Input validation and normalization for user profile data
234 | - Secure rip.fun URL construction and validation
235 | - HTTPS-only communication with rip.fun
236 | 
237 | ## Data Processing Notes
238 | 
239 | ### SvelteKit Data Extraction
240 | - Target: `<script type="application/json" data-sveltekit-fetched>` elements
241 | - Multiple script blocks may exist and need combining
242 | - JSON parsing required for embedded data
243 | 
244 | ### Data Cleaning and Normalization Pipeline
245 | - Automatically remove clip_embedding from digital_cards and cards arrays
246 | - Remove unused/irrelevant keys (including clip_embedding references)
247 | - Convert date strings to standard format
248 | - Flatten nested objects to key-value pairs
249 | - Deduplicate arrays and strip empty values
250 | - Handle field mapping between rip.fun data structure and profile schema
251 | 
252 | ### Advanced Card Filtering and Display System
253 | - **Set-Based Organization**: Automatically group cards by Pokemon TCG sets using API-provided set data
254 | - **Smart Set Name Parsing**: Extract human-readable set names from `card.set.name` field (e.g., "151", "Prismatic Evolutions", "Black Bolt")
255 | - **Missing Cards Integration**: Complete marketplace integration with listing data and purchase options
256 |   - **Show Missing Cards**: Display missing cards alongside owned cards with red styling
257 |   - **Only Missing Cards**: Filter to show only missing cards from selected sets
258 |   - **Available Only**: Show only missing cards that have active marketplace listings
259 | - **Smart Deduplication**: Always-active intelligent deduplication (no user toggle required)
260 | - **Dual View Modes**: 
261 |   - **Grid View**: Visual card layout with images, stats, and missing cards indicators
262 |   - **Table View**: Comprehensive data table with marketplace columns (Card, Set, Rarity, Type, Value, Listed Price, Available, Action, Status)
263 | - **Marketplace Columns**:
264 |   - **Listed Price**: Lowest available price for missing cards
265 |   - **Available**: ✅/❌ icons showing listing availability
266 |   - **Action**: Buy Now (blue) or Make Offer (gray) buttons linking to rip.fun
267 | - **Dynamic Filtering**: Real-time filter updates with card count display for each set
268 | - **Fallback Handling**: Graceful degradation to set_id display when set names are unavailable
269 | 
270 | ### Pack Grouping and Status Analysis
271 | - Group digital_products by name to consolidate similar pack types
272 | - Analyze `open_status` field to categorize packs:
273 |   - **Opened**: status contains "opened" 
274 |   - **Sealed**: status contains "sealed", "unopened", or default for owned packs
275 |   - **Pending Open**: status contains "pending" or "opening"
276 | - Calculate summary statistics for each pack group
277 | - Preserve individual pack details while providing grouped overview
278 | 
279 | ### Enhanced Fetcher Configuration
280 | - **Initial Timeout**: 20 seconds for first attempt
281 | - **Maximum Timeout**: 60 seconds for final retry attempts  
282 | - **Retry Logic**: Up to 3 attempts with exponential backoff (1s, 2s, 4s delays)
283 | - **Browser Headers**: Realistic User-Agent and headers to avoid blocking
284 | - **Error Classification**: Distinguish temporary vs permanent failures for smart retry logic
285 | 
286 | ## Development Setup
287 | 
288 | This project uses **SvelteKit** with **TypeScript**, **Tailwind CSS**, and **Prisma** for data management.
289 | 
290 | **Current Tech Stack**:
291 | - **Framework**: SvelteKit (full-stack) with Svelte 5 runes
292 | - **Language**: TypeScript with comprehensive type definitions
293 | - **Styling**: Tailwind CSS with responsive design patterns
294 | - **Database**: SQLite with Prisma ORM for user mappings and sync tracking
295 | - **Blockchain**: Viem client with Alchemy for Base network integration
296 | - **Parsing**: Cheerio for HTML manipulation and advanced regex parsing
297 | - **HTTP Client**: Enhanced fetch with retry logic and timeout handling
298 | 
299 | **Setup Commands**:
300 | ```bash
301 | npm install                    # Install dependencies
302 | npm install alchemy-sdk        # Install Alchemy SDK for blockchain integration
303 | cp .env.example .env          # Copy environment template
304 | # Edit .env with your ALCHEMY_API_KEY
305 | npx prisma generate           # Generate Prisma client
306 | npx prisma db push           # Set up database (includes new username bridging schema)
307 | npm run dev                  # Development server
308 | npm run build               # Production build
309 | npm run check              # Type checking
310 | ```
311 | 
312 | **Development Server**: Runs on `http://localhost:5173` (or next available port)
313 | 
314 | ## Implementation Status & Priority
315 | 
316 | ### ✅ Completed Features
317 | 1. **Enhanced HTML Fetching**: Reliable retrieval with retry logic and progressive timeouts ✓
318 | 2. **SvelteKit Parser**: Advanced extraction and parsing of JSON script blocks ✓ 
319 | 3. **Data Cleaning**: Comprehensive normalization and field mapping logic ✓
320 | 4. **localStorage Caching System**: Smart browser storage with user/set caching and cache-first loading ✓
321 | 5. **Missing Cards Marketplace Integration**: Complete marketplace data with buy now functionality ✓
322 | 6. **Advanced Card Management**: Set-based filtering, smart deduplication, grid/table views ✓
323 | 7. **Smart Set Recognition**: Automatic parsing of human-readable set names from API data ✓
324 | 8. **Pack Grouping System**: Intelligent categorization with status tracking ✓
325 | 9. **Marketplace API Integration**: Card listings API, buy now/make offer functionality ✓
326 | 10. **Advanced Filtering**: Missing cards modes, available only filter, cache management ✓
327 | 11. **Advanced Frontend Interface**: Interactive filtering, dual view modes, expandable groups, real-time progress ✓
328 | 12. **Error Handling**: User-friendly messages with troubleshooting guidance ✓
329 | 
330 | ### 🚧 Current Architecture (Fully Implemented)
331 | - **Primary Focus**: rip.fun data extraction and visualization
332 | - **Data Source**: Direct HTML parsing from rip.fun profiles
333 | - **User Interface**: `/extract` page with username input and comprehensive data display
334 | - **Export Options**: JSON download and clipboard copy functionality
335 | 
336 | ### 🔮 Future Enhancements (Optional)
337 | 1. **Authentication**: User sessions for saved extractions
338 | 2. **History Tracking**: Previous extraction records and comparison
339 | 3. **Comparison Engine**: Diff generation between profile snapshots
340 | 4. **Advanced Filtering**: Search and filter within extracted data
341 | 5. **Bulk Operations**: Extract multiple profiles simultaneously
342 | 
343 | ### 🎯 Key Technical Achievements
344 | - **Zero timeout failures** with enhanced retry logic
345 | - **Instant loading** with smart localStorage caching system
346 | - **Complete marketplace integration** with real-time listing data and purchase functionality
347 | - **Advanced missing cards features** with multiple filtering modes and availability tracking
348 | - **Intelligent caching strategy** preserving static set data while refreshing user data
349 | - **Cross-user cache sharing** for Pokemon TCG set data efficiency
350 | - **Advanced card filtering** with set-based organization and smart deduplication
351 | - **Intelligent data parsing** with proper set name extraction from API responses
352 | - **Dual view modes** providing both visual and analytical perspectives with marketplace data
353 | - **Intuitive pack management** with grouped displays and status summaries
354 | - **Real-time user feedback** during long-running operations with cache status indicators
355 | - **Comprehensive error handling** with actionable guidance
356 | - **Responsive design** optimized for all device sizes
357 | - **🔄 Massive Code Reduction**: 1,000+ lines eliminated through strategic component architecture
358 | - **🔄 DRY Compliance**: Zero code duplication in UI components and business logic
359 | - **🔄 Maintainable Architecture**: Clear separation of concerns with specialized components
360 | - **🔄 Type Safety**: Enhanced TypeScript interfaces and proper event handling
361 | - **🔄 Performance Optimization**: Reduced bundle size and improved build times
362 | - **🔄 Developer Experience**: Clear component boundaries and reusable utilities
363 | 
364 | ### 📊 Refactoring Impact Summary
365 | 
366 | **Code Reduction:**
367 | - `extract/+page.svelte`: 2,216 → 1,475 lines (**741 lines saved, 33.4% reduction**)
368 | - `trade-finder/+page.svelte`: 803 → 488 lines (**315 lines saved, 39% reduction**)
369 | - **Total Reduction**: 1,000+ lines across application
370 | 
371 | **New Architecture Created:**
372 | - **6 Core Components**: CardFilters (248), CardGrid (230), CardTable (349), PackManager (202), TradeTable (127), UserSearchInput (112)
373 | - **1 Trade Component**: SetSummaryTable (53 lines)
374 | - **8 Backend Services**: Enhanced services with specialized functionality
375 | - **5 Shared Utilities**: cacheUtils (163), card (8), pricing (21), url (16), trade/summaries (108)
376 | - **Comprehensive API Layer**: 11 endpoints with consistent patterns and error handling
377 | 
378 | **Architecture Benefits:**
379 | - ✅ **Zero Code Duplication**: All UI logic properly componentized
380 | - ✅ **Service-Oriented Backend**: Clear separation between presentation and business logic
381 | - ✅ **Maintainable Structure**: Component responsibilities and service boundaries well-defined
382 | - ✅ **Reusable Components**: Shared across multiple pages with consistent interfaces
383 | - ✅ **Enhanced Type Safety**: Comprehensive TypeScript with interfaces and event typing
384 | - ✅ **Optimized Performance**: Reduced bundle size, smart caching, and component-level optimizations
385 | - ✅ **Developer Experience**: Clear file structure, comprehensive documentation, and testing patterns
386 | - ✅ **Scalable Foundation**: Modular architecture supporting future feature development
387 | 
388 | ## 🚀 Redis Cache Optimization & Smart UX (2025)
389 | 
390 | ### **Performance Enhancement Overview**
391 | Major Redis caching optimization implemented to dramatically reduce payload sizes, memory usage, and network transfer times while maintaining full functionality.
392 | 
393 | ### **🎯 Optimization Strategy: Hybrid Approach**
394 | Instead of full data normalization, implemented a hybrid approach that provides 80% of the benefits with 20% of the complexity:
395 | 
396 | 1. **Permanent Set Data Caching** - Pokemon set data never expires (static after release)
397 | 2. **Gameplay Field Filtering** - Remove heavy fields not needed for display
398 | 3. **Set Object Optimization** - Remove duplicate set metadata, keep essential fields only
399 | 4. **Preserve Timestamps** - Keep created_at/updated_at fields as requested
400 | 
401 | ### **🗂️ Data Structure Optimizations**
402 | 
403 | #### **Heavy Gameplay Fields Removed (per card):**
404 | ```typescript
405 | // Fields removed during processing (200-1,500 bytes per card):
406 | subtype: [...],        // Pokemon types (Basic, Stage 1, etc.)
407 | hp: 100,               // Hit points
408 | types: [...],          // Energy types (Fire, Water, etc.)  
409 | abilities: [...],      // Pokemon abilities (can be 20-500 bytes)
410 | attacks: [...],        // Attack descriptions (100-800 bytes of text)
411 | weaknesses: [...],     // Battle weaknesses
412 | resistances: [...],    // Battle resistances
413 | ```
414 | 
415 | #### **Set Object Optimization:**
416 | ```typescript
417 | // Before: Full set object (400+ bytes) duplicated per card
418 | card.set: {
419 |   id: "sv3pt5",
420 |   name: "151", 
421 |   logo: "https://...",
422 |   background_image_url: "...",
423 |   value_score: null,
424 |   tcgplayer_id: "23237",
425 |   card_count: {...},
426 |   series_id: "scarlet-violet",
427 |   created_at: "...",
428 |   updated_at: "...",
429 |   // ... many more fields
430 | }
431 | 
432 | // After: Lightweight set reference (80 bytes)
433 | card.set: {
434 |   id: "sv3pt5",
435 |   name: "151",
436 |   symbol: "https://...",
437 |   language: "en",
438 |   tcg_type: "pokemon",
439 |   release_date: "2023-09-22T00:00:00.000Z"
440 | }
441 | ```
442 | 
443 | #### **Fields Preserved:**
444 | ```typescript
445 | // Essential display fields (always kept):
446 | {
447 |   id: "sv3pt5-108",
448 |   card_number: "108", 
449 |   name: "Lickitung",
450 |   rarity: "Common",
451 |   raw_price: "0.07",
452 |   small_image_url: "https://...",
453 |   large_image_url: "https://...",
454 |   illustrator: "Saya Tsuruta",
455 |   is_chase: false,
456 |   is_reverse: false,
457 |   is_holo: false,
458 |   // ... all display-critical fields
459 |   created_at: "...",    // Kept as requested
460 |   updated_at: "...",    // Kept as requested
461 |   set: { /* optimized */ }
462 | }
463 | ```
464 | 
465 | ### **📊 Performance Impact**
466 | 
467 | #### **Payload Size Reduction:**
468 | ```
469 | Before Optimization (per 2000-card user):
470 | - Raw API response: ~2.0MB
471 | - After clip_embedding removal: ~1.8MB
472 | - Redis storage: ~1.8MB  
473 | - Network transfer: ~1.8MB
474 | 
475 | After Optimization (per 2000-card user):
476 | - Raw API response: ~2.0MB (same)
477 | - After all optimizations: ~1.0MB (44% reduction)
478 | - Redis storage: ~1.0MB (44% less memory)
479 | - Network transfer: ~1.0MB (44% faster)
480 | ```
481 | 
482 | #### **Multi-User Memory Efficiency:**
483 | ```
484 | 100 users × 1500 cards average:
485 | - Before: 270MB Redis storage + 270MB network transfers
486 | - After: 150MB Redis storage + 150MB network transfers  
487 | - Savings: 120MB Redis (44%) + 120MB network (44%)
488 | ```
489 | 
490 | #### **Cache Performance:**
491 | ```
492 | Set Data Caching:
493 | - Before: 7-day TTL expiration
494 | - After: Permanent caching (no expiration)
495 | - Benefit: Zero cache misses after initial warming
496 | 
497 | Response Times:
498 | - Cache MISS: 1-5 seconds (API fetch + processing)
499 | - Cache HIT: 0.01-0.05 seconds (Redis retrieval)  
500 | - Performance improvement: 20-500x faster
501 | ```
502 | 
503 | ### **🏗️ Implementation Details**
504 | 
505 | #### **New Functions Added:**
506 | - `filterCardFields()` - Remove heavy gameplay fields
507 | - `optimizeSetReference()` - Streamline set object metadata  
508 | - `optimizeExtractedData()` - Apply all optimizations to extracted data
509 | 
510 | #### **Integration Points:**
511 | - **Extract API** (`/api/extract`): Both API and HTML extraction paths optimized
512 | - **Set API** (`/api/set/[id]`): Permanent caching implemented
513 | - **Normalizer Service**: New optimization functions added
514 | 
515 | #### **Files Modified:**
516 | ```
517 | src/routes/api/extract/+server.ts        # Added optimization to both extraction paths
518 | src/routes/api/set/[setId]/+server.ts    # Removed TTL, permanent caching
519 | src/lib/server/services/normalizer.ts    # Added optimization functions
520 | ```
521 | 
522 | ### **🎯 Smart UX Enhancements (Implemented)**
523 | 
524 | #### **Cache Freshness Indicators:**
525 | ```typescript
526 | // Implemented smart cache UI:
527 | 💡 Cached data available from [age]
528 | 
529 | // Context-aware prompts based on cache age:
530 | - < 30 minutes: "The data is still fresh! Use cached unless you just made changes."
531 | - 30min - 2 hours: "Just opened packs or traded cards? Get fresh data. Otherwise, cached is fine."
532 | - 2-24 hours: "Data is X hours old. Consider refreshing if you've been active."
533 | - > 24 hours: "Data is over a day old. We recommend getting fresh data."
534 | 
535 | // Visual indicators in extraction info:
536 | 📦 Cached Data (23 minutes ago) | 🌐 Live Data
537 | [Get Fresh Data] [Use Cached (23min ago, faster)]
538 | 
539 | Profile data from 15 minutes ago [🔄 Refresh]
540 | ```
541 | 
542 | #### **Pre-Deployment Cache Warming:**
543 | ```bash
544 | # New cache warming script for deployment
545 | npm run cache:warm
546 | 
547 | # Features:
548 | - Pre-populates Redis with 20 popular Pokemon TCG sets
549 | - Runs during deployment to ensure instant loading
550 | - Batch processing to avoid API overload
551 | - Skip already cached sets to save time
552 | - Comprehensive progress and error reporting
553 | 
554 | # Deployment integration:
555 | npm run deploy:prepare  # Runs cache warming automatically
556 | 
557 | # Sets cached (popular/recent):
558 | - sv3pt5 (Pokemon 151)
559 | - sv4-sv8 (Recent Scarlet & Violet sets)
560 | - swsh9-12 (Sword & Shield sets)
561 | - cel25 (Celebrations)
562 | - base1-4 (Classic Base sets)
563 | - neo1 (Neo Genesis)
564 | ```
565 | 
566 | #### **User Experience Improvements:**
567 | - **Instant cache status** - Users see immediately if cached data is available
568 | - **Smart recommendations** - Context-aware suggestions based on cache age
569 | - **One-click choice** - Simple buttons for fresh vs cached data
570 | - **Cache age display** - Clear indication of data freshness
571 | - **Transparent source** - Visual badges showing data source (cached/live)
572 | - **Advanced controls** - Options to clear specific or all caches
573 | 
574 | ### **📈 Results & Benefits**
575 | - **44% payload reduction** - Smaller data transfers and storage
576 | - **20-500x faster loads** - Near-instant response from cache
577 | - **Zero cache misses** - Permanent set data caching
578 | - **Improved UX** - Smart prompts guide users to optimal choice
579 | - **Production ready** - Pre-deployment warming ensures smooth launch
580 | 
581 | #### **Context-Aware Caching:**
582 | - **Own Profile**: Shorter TTL (5 minutes), prominent refresh prompts
583 | - **Others' Profiles**: Longer TTL (1 hour), less prominent refresh options
584 | - **Set Data**: Permanent cache, no refresh needed
585 | 
586 | ### **🚀 Future Optimizations (Planned)**
587 | 
588 | #### **Pre-Deployment Set Warming:**
589 | ```bash
590 | # Planned build-time optimization:
591 | npm run build && npm run warm-cache && npm start
592 | 
593 | # Pre-populate all Pokemon sets in Redis before users arrive
594 | # Result: Zero "first user" penalty for any set
595 | ```
596 | 
597 | #### **Advanced Optimizations:**
598 | - **Card detail lazy loading**: Fetch full card data only when user clicks
599 | - **Image URL optimization**: CDN-based image serving
600 | - **Batch API calls**: Fetch multiple sets in single request
601 | 
602 | ### **📈 Business Impact**
603 | 
604 | #### **User Experience:**
605 | - **44% faster page loads** for cached data
606 | - **Instant subsequent visits** (0.01s vs 1-5s)
607 | - **Reduced bandwidth usage** for mobile users
608 | 
609 | #### **Infrastructure:**
610 | - **44% less Redis memory** usage
611 | - **44% reduced network bandwidth** costs
612 | - **Improved scalability** for user growth
613 | 
614 | #### **Development:**
615 | - **Maintained code simplicity** (hybrid vs full normalization)
616 | - **Preserved existing functionality** (no breaking changes)
617 | - **Enhanced debugging** with permanent set caches
618 | 
619 | This optimization provides massive performance improvements while maintaining the existing architecture and all user-facing functionality. The hybrid approach delivers enterprise-level caching benefits without the complexity of full data normalization.
620 | 
621 | ## 🛠️ Development Guidelines
622 | 
623 | ### Component Development
624 | When working with components, follow these patterns established in the refactoring:
625 | 
626 | 1. **Event-Driven Architecture**: Use Svelte's event dispatcher for parent-child communication
627 | 2. **Props Interface**: Define clear TypeScript interfaces for component props
628 | 3. **Reusable Logic**: Extract common functionality into utility functions
629 | 4. **Consistent Styling**: Follow Tailwind CSS patterns established in existing components
630 | 5. **Error Handling**: Implement proper error states and loading indicators
631 | 
632 | ### Adding New Components
633 | 1. Follow the established component structure in `src/lib/components/`
634 | 2. Include proper TypeScript types and interfaces
635 | 3. Use event dispatchers for parent communication
636 | 4. Add documentation comments explaining component purpose and usage
637 | 5. Consider reusability across multiple pages
638 | 
639 | ### Cache Management
640 | Use the centralized `cacheUtils.ts` for all localStorage operations:
641 | ```typescript
642 | import { getCachedUserData, setCachedUserData, clearUserCache } from '$lib/utils/cacheUtils';
643 | ```
644 | 
645 | ### API Integration
646 | Follow service-oriented patterns in `src/lib/server/services/`:
647 | 1. Create focused service modules for specific functionality
648 | 2. Include proper error handling and retry logic
649 | 3. Use TypeScript interfaces for request/response types
650 | 4. Follow established patterns in existing services
651 | 
652 | ## 📚 Component Documentation
653 | 
654 | Each component and service directory contains detailed CLAUDE.md files explaining:
655 | - Purpose and responsibilities
656 | - Key features and functionality
657 | - Integration patterns and usage examples
658 | - TypeScript interfaces and event handling
659 | - Performance considerations and best practices
660 | 
661 | Refer to individual CLAUDE.md files in each directory for component-specific guidance.


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
  1 | # rip.fun Data Extractor
  2 | 
  3 | A robust, **component-based** web application specifically designed to extract complete profile data from rip.fun user pages with intelligent username-to-ID resolution. The app features blockchain-powered username bridging, fetches HTML from rip.fun profiles, parses the SvelteKit data structure, and provides clean JSON output through a modular architecture with specialized components for card filtering, display, and pack management.
  4 | 
  5 | ## 🔄 Recent Major Refactoring (2025)
  6 | 
  7 | The application has undergone a **complete architectural refactoring** from monolithic design to a clean, component-based structure:
  8 | 
  9 | - **1,000+ lines of code eliminated** through strategic component extraction
 10 | - **Zero code duplication** - all UI logic properly componentized  
 11 | - **Modular architecture** with 7 specialized reusable components
 12 | - **Enhanced maintainability** with clear separation of concerns
 13 | - **Type-safe component communication** with proper event handling
 14 | - **Performance improvements** through reduced bundle size
 15 | 
 16 | **Before/After:**
 17 | - Extract page: 2,216 → 1,475 lines (**33.4% reduction**)
 18 | - Trade finder: 803 → 488 lines (**39% reduction**)
 19 | - **New reusable components**: CardFilters, CardGrid, CardTable, PackManager, TradeTable, UserSearchInput
 20 | 
 21 | ## ✨ Key Features
 22 | 
 23 | ### 🔗 Username Bridging System
 24 | - **Smart Username Resolution**: Input usernames instead of numeric user IDs for seamless user experience
 25 | - **Blockchain Integration**: Alchemy-powered blockchain scanning of rip.fun smart contract interactions
 26 | - **Automatic User Discovery**: Syncs user data from Base blockchain pack purchase events
 27 | - **Database Mapping**: Persistent storage of address-to-username mappings with block number tracking
 28 | - **Real-time User Search**: Autocomplete functionality with partial username matching
 29 | - **Sync Status Tracking**: Background synchronization with progress monitoring and status updates
 30 | - **Dual Input Support**: Accepts both traditional user IDs and human-readable usernames
 31 | 
 32 | ### Data Extraction & Processing
 33 | - **Complete Data Extraction**: Extract all profile data, cards, packs, and statistics
 34 | - **rip.fun Focused**: Specifically designed for rip.fun profile structure
 35 | - **SvelteKit Parser**: Advanced parsing of SvelteKit data from JavaScript code
 36 | - **Automatic Filtering**: Removes clip_embedding data while preserving all other information
 37 | - **Reliable Fetching**: Enhanced timeout handling with automatic retry logic and exponential backoff
 38 | - **localStorage Caching**: Smart browser storage with instant loading and cache-first strategy
 39 | - **Missing Cards Integration**: Real-time marketplace data with buy now/make offer functionality
 40 | 
 41 | ### User Experience
 42 | - **Instant Loading**: Smart caching system provides immediate data loading for returning users
 43 | - **Cache Status Indicators**: Visual badges showing data source (📦 Cached vs 🌐 Live)
 44 | - **Smart Refresh System**: Refresh button updates user data while preserving static set caches
 45 | - **Intelligent Pack Grouping**: Automatically groups packs by name (e.g., "Black Bolt", "White Flar", "151") with toggleable details
 46 | - **Pack Status Tracking**: Visual summary showing opened, sealed, and pending open counts for each pack category
 47 | - **Progressive Loading**: Real-time status updates during long extractions with helpful timeout guidance
 48 | - **Enhanced Error Handling**: Detailed error messages with troubleshooting suggestions
 49 | - **JSON Export**: Download clean data as JSON files or copy to clipboard
 50 | - **Advanced Cache Management**: Collapsible cache options for power users
 51 | - **Responsive Design**: Clean interface optimized for all device sizes
 52 | 
 53 | ### Advanced Card Management & Visualization
 54 | - **Set-Based Card Filtering**: Organize and filter cards by Pokemon TCG sets with real-time count updates
 55 | - **Missing Cards Marketplace Integration**: Complete missing cards detection with real-time listing data
 56 |   - **Show Missing Cards**: Display missing cards alongside owned cards with red styling
 57 |   - **Only Missing Cards**: Filter to show only missing cards from selected sets
 58 |   - **Available Only**: Show only missing cards with active marketplace listings
 59 | - **Buy Now/Make Offer Functionality**: Direct marketplace integration with purchase buttons
 60 | - **Smart Set Recognition**: Automatic parsing of human-readable set names (e.g., "151", "Prismatic Evolutions", "Black Bolt")
 61 | - **Smart Deduplication**: Always-active card deduplication for cleaner display (no user toggle)
 62 | - **Dual View Modes**: Switch between grid view (visual browsing) and table view with marketplace columns
 63 | - **Enhanced Card Tables**: Sortable columns including marketplace data (Listed Price, Available, Action)
 64 | - **Marketplace Columns**:
 65 |   - **Listed Price**: Lowest available price for missing cards
 66 |   - **Available**: ✅/❌ icons showing listing availability  
 67 |   - **Action**: Buy Now (blue) or Make Offer (gray) buttons
 68 | - **Organized Pack Display**: Table view with ID and status columns for each pack group
 69 | - **Collection Analytics**: Set-by-set breakdowns with rarity distribution and value tracking
 70 | - **Status Indicators**: Color-coded badges for listing status, pack conditions, and ownership
 71 | - **Visual Count Badges**: Availability indicators and marketplace status
 72 | 
 73 | ## Tech Stack
 74 | 
 75 | - **Frontend & Backend**: SvelteKit (full-stack framework) with **component-based architecture**
 76 | - **UI Components**: 7 specialized Svelte components with TypeScript interfaces
 77 | - **Database**: SQLite with Prisma ORM for user mappings and sync tracking
 78 | - **Blockchain Integration**: Alchemy SDK for Base network interaction
 79 | - **HTML Parsing**: Cheerio for server-side DOM manipulation
 80 | - **Styling**: Tailwind CSS with consistent component patterns
 81 | - **Type Safety**: TypeScript throughout with proper event handling
 82 | - **Caching**: Centralized localStorage management through `cacheUtils.ts`
 83 | - **Architecture**: Service-oriented backend with modular component frontend
 84 | 
 85 | ## Setup
 86 | 
 87 | ### Prerequisites
 88 | - Node.js 18+ and npm
 89 | - [Alchemy API account](https://dashboard.alchemy.com/) for blockchain integration
 90 | 
 91 | ### Installation
 92 | 
 93 | 1. **Install dependencies** (including Alchemy SDK):
 94 | ```sh
 95 | npm install
 96 | npm install alchemy-sdk
 97 | ```
 98 | 
 99 | 2. **Environment Configuration**:
100 | ```sh
101 | # Copy the environment template
102 | cp .env.example .env
103 | 
104 | # Edit .env and add your Alchemy API key:
105 | # ALCHEMY_API_KEY=your_actual_api_key_here
106 | ```
107 | 
108 | 3. **Database Setup**:
109 | ```sh
110 | # Generate Prisma client and set up database schema
111 | npx prisma generate
112 | npx prisma db push
113 | ```
114 | 
115 | 4. **Start Development Server**:
116 | ```sh
117 | npm run dev
118 | ```
119 | 
120 | 5. **Visit Application**: Open `http://localhost:5173` to use the application.
121 | 
122 | ### First-Time Username Bridging Setup
123 | 
124 | After setup, you'll need to sync blockchain data to enable username resolution:
125 | 
126 | 1. **Navigate to Extract Page**: Visit `/extract` in the application
127 | 2. **Trigger Initial Sync**: Click the "Sync Users" button to start blockchain data synchronization
128 | 3. **Monitor Sync Progress**: Check sync status - initial sync may take several minutes
129 | 4. **Start Using Usernames**: Once sync completes, you can input usernames instead of user IDs
130 | 
131 | ## Usage
132 | 
133 | 1. **Visit Extractor**: Go to `/extract` or click "Start Extracting" from the home page
134 | 2. **Enter Username or ID**: 
135 |    - **Username Mode**: Type any rip.fun username (e.g., "johndoe") with autocomplete suggestions
136 |    - **ID Mode**: Enter a numeric user ID directly (traditional method)
137 |    - **Smart Resolution**: System automatically detects input type and resolves accordingly
138 | 3. **Extract Data**: Click "Extract Profile Data" to start the extraction process
139 |    - Monitor real-time progress updates during extraction
140 |    - Automatic retries handle temporary timeouts or network issues
141 | 4. **Review Results**: Explore the comprehensive data visualization:
142 |    - **Card Management**: Use set-based filtering to organize cards by Pokemon TCG sets
143 |      - Filter dropdown shows all available sets with card counts
144 |      - **Missing Cards**: Check "Show missing cards" to see cards you don't own
145 |      - **Only Missing**: Filter to show only missing cards with marketplace data
146 |      - **Available Only**: Show only missing cards with active listings
147 |      - Switch between grid view (visual) and table view with marketplace columns
148 |    - **Marketplace Integration**: Buy missing cards directly from the interface
149 |      - **Buy Now**: Blue buttons for cards with active listings
150 |      - **Make Offer**: Gray buttons for cards without listings  
151 |      - **Listed Prices**: Real-time marketplace pricing data
152 |    - **Pack Groups**: Click any pack category to expand and see individual pack details
153 |    - **Status Summary**: View opened/sealed/pending counts at the top of each pack group
154 |    - **Collection Overview**: Browse set statistics, card rarities, and total values
155 | 5. **Export Data**: Download as JSON file or copy to clipboard for external use
156 | 
157 | ### 🃏 Card Management Features
158 | 
159 | - **Set-Based Organization**: Cards automatically grouped by Pokemon TCG sets (e.g., "151", "Prismatic Evolutions", "Black Bolt")
160 | - **Smart Filtering**: Dropdown filter with real-time card counts for each set
161 | - **Missing Cards Integration**: Complete marketplace features for cards you don't own
162 |   - **Show Missing Cards**: Red-styled missing cards displayed alongside owned cards
163 |   - **Only Missing Cards**: Dedicated filter to show only missing cards
164 |   - **Available Only**: Show only missing cards with active marketplace listings
165 | - **Smart Deduplication**: Always-active card deduplication (no toggle needed)
166 | - **Dual Display Modes**:
167 |   - **Grid View**: Visual card browser with images, stats, and missing card indicators
168 |   - **Table View**: Enhanced data table with marketplace columns (Card, Set, Rarity, Type, Value, Listed Price, Available, Action, Status)
169 | - **Marketplace Integration**:
170 |   - **Listed Price**: Real-time lowest prices for missing cards
171 |   - **Availability Icons**: ✅ for available, ❌ for unavailable missing cards
172 |   - **Buy Now/Make Offer**: Direct purchase buttons linking to rip.fun marketplace
173 | - **Visual Indicators**: Availability status, color-coded indicators, marketplace integration
174 | - **Responsive Design**: Optimized layouts for both desktop and mobile viewing
175 | 
176 | ### 🎯 Pack Management Features
177 | 
178 | - **Grouped Display**: Packs are automatically grouped by name (e.g., multiple "Black Bolt" packs show as one expandable group)
179 | - **Status Tracking**: Each group shows a summary of opened, sealed, and pending open packs
180 | - **Quick Overview**: Collapsed headers display key statistics without needing to expand
181 | - **Detailed View**: Expand any group to see a comprehensive table with individual pack IDs and statuses
182 | 
183 | ### Data Extraction & Visualization
184 | 
185 | The application extracts and displays comprehensive data from rip.fun profiles:
186 | 
187 | **Profile Information:**
188 | - `username` - rip.fun username
189 | - `bio` - Profile bio/description  
190 | - `email` - User email address
191 | - `login_provider` - Authentication provider (Google, etc.)
192 | - `avatar` - Profile avatar URL
193 | - `banner` - Profile banner URL
194 | - `smart_wallet_address` - Smart contract wallet address
195 | - `owner_wallet_address` - Owner wallet address
196 | - `verified` - Verification status
197 | - Account creation and update timestamps
198 | 
199 | **Digital Cards (Advanced Management):**
200 | - **Set-Based Organization**: Cards automatically grouped by Pokemon TCG sets with human-readable names
201 | - **Missing Cards Marketplace Integration**: Complete marketplace features for cards not owned
202 |   - **Real-Time Listing Data**: Live pricing from rip.fun marketplace API
203 |   - **Buy Now Functionality**: Direct purchase buttons for available cards
204 |   - **Make Offer Links**: Marketplace links for cards without active listings
205 |   - **Availability Tracking**: Visual indicators for listing availability
206 | - **Advanced Filtering System**: 
207 |   - **Set-Based Filter**: Dropdown to show all sets or specific collections
208 |   - **Show Missing Cards**: Display missing cards alongside owned cards
209 |   - **Only Missing Cards**: Filter to show only missing cards
210 |   - **Available Only**: Show only missing cards with active listings
211 | - **Smart Deduplication**: Always-active intelligent deduplication (no user toggle)
212 | - **Dual View Modes**: Grid view for visual browsing, table view with marketplace columns
213 | - **Complete Card Details**: Name, card number, rarity, HP, types, abilities, attacks, weaknesses, resistances
214 | - **Enhanced Market Data**: Owned card values, missing card listing prices, and marketplace status
215 | - **Visual Assets**: Card images, artwork, and set symbols
216 | - **Set Information**: Release dates, set statistics, and rarity distributions
217 | - **Interactive Tables**: Enhanced sortable columns including marketplace data (Listed Price, Available, Action)
218 | 
219 | **Digital Products & Packs (Enhanced Display):**
220 | - **Grouped Pack View**: Packs automatically organized by name/type
221 | - **Status Summary**: Visual overview of opened, sealed, and pending open counts
222 | - **Individual Pack Details**: Expandable tables showing each pack's ID and status
223 | - **Pack Metadata**: Product names, types, values, and marketplace listings
224 | - **Set Associations**: Connected artwork and release information  
225 | - **Token IDs**: Blockchain ownership verification details
226 | 
227 | **Collection Analytics:**
228 | - Set-by-set breakdowns with rarity distribution
229 | - Total collection value calculations
230 | - Card count statistics per set
231 | - Visual organization by set and rarity
232 | - Market value tracking
233 | 
234 | ### Data Cleaning
235 | 
236 | The application automatically removes `clip_embedding` data from the extracted information to focus on relevant profile data and reduce payload size.
237 | 
238 | ## 🔧 Reliability & Performance
239 | 
240 | ### localStorage Caching System
241 | - **Instant Loading**: Cache-first strategy provides immediate data loading
242 | - **User-Specific Caching**: Individual user data cached separately with timestamps
243 | - **Set Data Caching**: Pokemon TCG set data cached permanently (shared across users)
244 | - **Smart Refresh Logic**: Refresh button updates user data while preserving set caches
245 | - **Cache Status Indicators**: Visual badges showing data source (📦 Cached vs 🌐 Live)
246 | - **Advanced Cache Management**: Power user options to clear specific cache types
247 | - **Cross-User Efficiency**: Set data shared between different user profiles
248 | 
249 | ### Enhanced Fetching System
250 | - **Automatic Retries**: Up to 3 retry attempts with exponential backoff
251 | - **Progressive Timeouts**: Starts at 20s, increases to 60s maximum
252 | - **Smart Error Detection**: Distinguishes between temporary and permanent failures
253 | - **Browser-like Headers**: Realistic request headers to avoid blocking
254 | - **Detailed Logging**: Console output shows attempt progress and timing
255 | 
256 | ### User-Friendly Error Handling
257 | - **Timeout Guidance**: Explains possible causes (server load, network issues, large data)
258 | - **Specific Error Types**: Different messages for 404s, 500s, network failures
259 | - **Progress Updates**: Real-time feedback during long-running extractions
260 | - **Retry Notifications**: Clear indication when automatic retries are happening
261 | 
262 | ## API Endpoints
263 | 
264 | ### Core Extraction
265 | - `POST /api/extract` - Extract complete data from rip.fun username or user ID (Enhanced with retry logic and username resolution)
266 | 
267 | ### Username Bridging System
268 | - `POST /api/sync-users` - Trigger blockchain user synchronization from Base network
269 | - `GET /api/sync-users` - Get current sync status and progress information
270 | - `GET /api/resolve-username/[username]` - Resolve username to user ID and profile data
271 | - `GET /api/search-users?q=[query]&limit=[n]` - Search users with autocomplete functionality
272 | 
273 | ### Missing Cards & Marketplace Integration  
274 | - `GET /api/set/[setId]` - Fetch complete Pokemon TCG set data (cached permanently)
275 | - `GET /api/card/[cardId]/listings` - Get real-time marketplace listings for missing cards
276 | 
277 | ### Legacy Profile Management
278 | - `GET /api/profiles` - List all profiles (legacy feature)
279 | - `POST /api/profiles` - Create a new profile (legacy feature)
280 | - `GET /api/profiles/[id]` - Get a specific profile (legacy feature)
281 | - `PUT /api/profiles/[id]` - Update a profile (legacy feature)
282 | - `DELETE /api/profiles/[id]` - Delete a profile (legacy feature)
283 | - `POST /api/compare` - Compare profiles (legacy feature)
284 | 
285 | ## 📚 Documentation Structure
286 | 
287 | The application includes **comprehensive documentation** with detailed explanations of the component architecture:
288 | 
289 | - **`CLAUDE.md`** - Main project documentation with complete architecture overview
290 | - **`src/lib/components/CLAUDE.md`** - Detailed component documentation with usage examples
291 | - **`src/lib/server/services/CLAUDE.md`** - Backend services and business logic documentation
292 | - **`src/lib/utils/CLAUDE.md`** - Shared utilities and cache management documentation
293 | - **`src/routes/api/CLAUDE.md`** - API endpoints and integration patterns documentation
294 | - **`src/routes/CLAUDE.md`** - Page structure and route organization documentation
295 | 
296 | Each directory contains specific guidance for developers working with that part of the codebase.
297 | 
298 | ## Building
299 | 
300 | To create a production version of your app:
301 | 
302 | ```sh
303 | npm run build
304 | ```
305 | 
306 | You can preview the production build with `npm run preview`.
307 | 
308 | > To deploy your app, you may need to install an [adapter](https://svelte.dev/docs/kit/adapters) for your target environment.
309 | 
310 | ## 🎯 Architecture Summary
311 | 
312 | **Component-Based Structure:**
313 | - 7 specialized UI components eliminating code duplication
314 | - Service-oriented backend with focused business logic modules  
315 | - Centralized utilities for cache management and common operations
316 | - Clear separation between presentation, business logic, and data layers
317 | 
318 | **Key Benefits:**
319 | - ✅ **1,000+ lines of code eliminated** through strategic refactoring
320 | - ✅ **Zero code duplication** across the application
321 | - ✅ **Enhanced maintainability** with clear component boundaries
322 | - ✅ **Type-safe architecture** with comprehensive TypeScript integration
323 | - ✅ **Performance optimizations** through component-level caching
324 | - ✅ **Developer experience** improvements with extensive documentation
325 | 


--------------------------------------------------------------------------------
/REDIS.md:
--------------------------------------------------------------------------------
  1 | # Redis Setup Guide
  2 | 
  3 | This guide explains how to set up Redis caching across different environments (local, staging, production).
  4 | 
  5 | ## 🚀 **Quick Start**
  6 | 
  7 | ### **1. Railway Production/Staging**
  8 | ```bash
  9 | # Enable Redis plugin in Railway dashboard
 10 | # Or use railway.toml (already configured)
 11 | railway deploy
 12 | ```
 13 | Redis URL is automatically provided as `REDIS_URL` environment variable.
 14 | 
 15 | ### **2. Local Development (Default: Mock Redis)**
 16 | ```bash
 17 | # Default - no setup needed, no errors
 18 | npm run dev
 19 | # Uses mock Redis client automatically (no external dependencies)
 20 | ```
 21 | 
 22 | ### **3. Local Development (Optional: Real Redis)**
 23 | ```bash
 24 | # Option A: Use Docker Redis
 25 | npm run redis:start        # Start Redis container
 26 | npm run dev:redis         # Dev with real Redis
 27 | 
 28 | # Option B: Enable local Redis connection
 29 | echo "USE_LOCAL_REDIS=true" >> .env
 30 | npm run dev               # Will attempt localhost:6379
 31 | 
 32 | # Option C: Direct Redis URL
 33 | echo "REDIS_URL=redis://localhost:6379" >> .env  
 34 | npm run dev               # Direct connection
 35 | ```
 36 | 
 37 | ### **4. Testing Environment**
 38 | ```bash
 39 | # Uses mock Redis by default
 40 | npm test
 41 | ```
 42 | 
 43 | ## 📊 **Cache Performance**
 44 | 
 45 | ### **Cache Hit Rates Expected:**
 46 | - **Profile extractions**: 70-90% hit rate
 47 | - **Set data**: 95%+ hit rate (sets rarely change)
 48 | - **User searches**: 60-80% hit rate
 49 | 
 50 | ### **Response Time Improvements:**
 51 | | Operation | Without Redis | With Redis | Improvement |
 52 | |-----------|---------------|------------|-------------|
 53 | | Profile extraction | 20-60s | 0.1s | **200-600x** |
 54 | | Set data lookup | 2-5s | 0.05s | **40-100x** |
 55 | | User search | 100-500ms | 10ms | **10-50x** |
 56 | 
 57 | ## 🔧 **Configuration**
 58 | 
 59 | ### **Environment Variables**
 60 | ```bash
 61 | # Railway (automatically set)
 62 | REDIS_URL=redis://default:password@redis.railway.internal:6379
 63 | 
 64 | # Local development options:
 65 | # 1. Default (no variables) = Mock Redis
 66 | # 2. USE_LOCAL_REDIS=true = Attempt localhost connection  
 67 | # 3. REDIS_URL=redis://localhost:6379 = Direct connection
 68 | 
 69 | # Examples:
 70 | # USE_LOCAL_REDIS=true
 71 | # REDIS_URL=redis://localhost:6379
 72 | ```
 73 | 
 74 | ### **Cache TTL Settings**
 75 | ```typescript
 76 | // Profile extractions: 1 hour
 77 | CacheKeys.extraction(username) // TTL: 3600s
 78 | 
 79 | // Pokemon set data: 7 days  
 80 | CacheKeys.setData(setId) // TTL: 604800s
 81 | 
 82 | // User searches: 5 minutes
 83 | CacheKeys.userSearch(query) // TTL: 300s
 84 | ```
 85 | 
 86 | ## 🛠️ **Development Commands**
 87 | 
 88 | ### **Redis Management**
 89 | ```bash
 90 | # Start Redis (Docker)
 91 | npm run redis:start
 92 | 
 93 | # Stop Redis
 94 | npm run redis:stop
 95 | 
 96 | # View Redis logs
 97 | npm run redis:logs
 98 | 
 99 | # Development with Redis
100 | npm run dev:redis
101 | ```
102 | 
103 | ### **Cache Debugging**
104 | ```bash
105 | # Connect to local Redis
106 | docker exec -it ripexplorer-redis redis-cli
107 | 
108 | # View all keys
109 | KEYS rip:*
110 | 
111 | # Get cached profile
112 | GET rip:extract:username
113 | 
114 | # Clear all cache
115 | FLUSHALL
116 | ```
117 | 
118 | ## 🌍 **Multi-Environment Setup**
119 | 
120 | ### **Production (Railway)**
121 | 1. Enable Redis plugin in Railway dashboard
122 | 2. Deploy - Redis URL automatically available
123 | 3. Cache performance monitoring in logs
124 | 
125 | ### **Staging (Railway)**
126 | 1. Create staging environment
127 | 2. Enable Redis plugin for staging
128 | 3. Deploy staging branch
129 | 
130 | ### **Local Development**
131 | 1. **Option A**: Use mock Redis (default, no setup)
132 | 2. **Option B**: Use Docker Redis (`npm run redis:start`)
133 | 3. Both options provide same caching interface
134 | 
135 | ### **Testing**
136 | 1. Uses mock Redis automatically
137 | 2. Tests run without external dependencies
138 | 3. Same caching interface for consistency
139 | 
140 | ## 📈 **Monitoring**
141 | 
142 | ### **Cache Stats (in logs)**
143 | ```
144 | 🔴 Cache HIT for extraction: username
145 | 🔴 Cache MISS for set data: sv3pt5  
146 | 🔴 Cache STORED for extraction: username
147 | ```
148 | 
149 | ### **Performance Monitoring**
150 | - Response times logged for cache hits/misses
151 | - Cache hit rates in application logs
152 | - Memory usage monitored automatically
153 | 
154 | ## 🔍 **Troubleshooting**
155 | 
156 | ### **Redis Connection Issues**
157 | ```typescript
158 | // Check Redis health
159 | const isHealthy = await redisCache.ping();
160 | console.log('Redis healthy:', isHealthy);
161 | ```
162 | 
163 | ### **Cache Not Working**
164 | 1. Check `REDIS_URL` environment variable
165 | 2. Verify Redis service is running
166 | 3. Check logs for connection errors
167 | 4. Falls back to mock Redis automatically
168 | 
169 | ### **High Memory Usage**
170 | ```bash
171 | # Check cache size
172 | docker exec -it ripexplorer-redis redis-cli INFO memory
173 | 
174 | # Clear specific keys
175 | docker exec -it ripexplorer-redis redis-cli DEL rip:extract:*
176 | ```
177 | 
178 | ## 💡 **Best Practices**
179 | 
180 | ### **Cache Key Naming**
181 | ```typescript
182 | // Use structured key names
183 | CacheKeys.profile(username)     // rip:profile:username
184 | CacheKeys.setData(setId)       // rip:set:sv3pt5  
185 | CacheKeys.extraction(user)     // rip:extract:username
186 | ```
187 | 
188 | ### **Error Handling**
189 | - Cache failures never break requests
190 | - Graceful fallback to direct API calls
191 | - Mock Redis for development without setup
192 | 
193 | ### **TTL Strategy**
194 | - **Profile data**: 1 hour (changes frequently)
195 | - **Set data**: 7 days (rarely changes)
196 | - **Search results**: 5 minutes (balance freshness/performance)
197 | 
198 | ## 🚀 **Next Steps**
199 | 
200 | 1. **Deploy to Railway** - Redis plugin auto-configured
201 | 2. **Monitor performance** - Watch logs for cache hit rates
202 | 3. **Optimize TTL values** - Based on usage patterns
203 | 4. **Scale up** - Railway Redis grows with your app
204 | 
205 | Redis is now ready to provide massive performance improvements with zero configuration complexity!


--------------------------------------------------------------------------------
/docker-compose.yml:
--------------------------------------------------------------------------------
 1 | # Docker Compose for local development with Redis
 2 | # Run: docker-compose up -d redis
 3 | version: '3.8'
 4 | 
 5 | services:
 6 |   redis:
 7 |     image: redis:7-alpine
 8 |     container_name: ripexplorer-redis
 9 |     ports:
10 |       - "6379:6379"
11 |     command: redis-server --appendonly yes
12 |     volumes:
13 |       - redis_data:/data
14 |     healthcheck:
15 |       test: ["CMD", "redis-cli", "ping"]
16 |       interval: 10s
17 |       timeout: 5s
18 |       retries: 5
19 | 
20 | volumes:
21 |   redis_data:


--------------------------------------------------------------------------------
/example.json:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/cryptondee/ripexplorer/redis/example.json


--------------------------------------------------------------------------------
/package-lock.json:
--------------------------------------------------------------------------------
   1 | {
   2 | 	"name": "rip-fun-data-extractor",
   3 | 	"version": "0.0.1",
   4 | 	"lockfileVersion": 3,
   5 | 	"requires": true,
   6 | 	"packages": {
   7 | 		"": {
   8 | 			"name": "rip-fun-data-extractor",
   9 | 			"version": "0.0.1",
  10 | 			"hasInstallScript": true,
  11 | 			"dependencies": {
  12 | 				"@prisma/client": "^5.22.0",
  13 | 				"@sveltejs/adapter-node": "^5.3.1",
  14 | 				"alchemy-sdk": "^3.6.3",
  15 | 				"autoprefixer": "^10.4.16",
  16 | 				"cheerio": "^1.0.0",
  17 | 				"ioredis": "^5.7.0",
  18 | 				"postcss": "^8.4.31",
  19 | 				"tailwindcss": "^3.4.0",
  20 | 				"viem": "^2.34.0"
  21 | 			},
  22 | 			"devDependencies": {
  23 | 				"@sveltejs/adapter-auto": "^6.0.0",
  24 | 				"@sveltejs/kit": "^2.22.0",
  25 | 				"@sveltejs/vite-plugin-svelte": "^6.0.0",
  26 | 				"@tailwindcss/typography": "^0.5.10",
  27 | 				"@types/node": "^24.3.0",
  28 | 				"prisma": "^5.22.0",
  29 | 				"svelte": "^5.0.0",
  30 | 				"svelte-check": "^4.0.0",
  31 | 				"tsx": "^4.20.5",
  32 | 				"typescript": "^5.0.0",
  33 | 				"vite": "^7.0.4"
  34 | 			}
  35 | 		},
  36 | 		"node_modules/@adraffy/ens-normalize": {
  37 | 			"version": "1.11.0",
  38 | 			"resolved": "https://registry.npmjs.org/@adraffy/ens-normalize/-/ens-normalize-1.11.0.tgz",
  39 | 			"integrity": "sha512-/3DDPKHqqIqxUULp8yP4zODUY1i+2xvVWsv8A79xGWdCAG+8sb0hRh0Rk2QyOJUnnbyPUAZYcpBuRe3nS2OIUg==",
  40 | 			"license": "MIT"
  41 | 		},
  42 | 		"node_modules/@alloc/quick-lru": {
  43 | 			"version": "5.2.0",
  44 | 			"resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
  45 | 			"integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
  46 | 			"license": "MIT",
  47 | 			"engines": {
  48 | 				"node": ">=10"
  49 | 			},
  50 | 			"funding": {
  51 | 				"url": "https://github.com/sponsors/sindresorhus"
  52 | 			}
  53 | 		},
  54 | 		"node_modules/@babel/runtime": {
  55 | 			"version": "7.28.3",
  56 | 			"resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.3.tgz",
  57 | 			"integrity": "sha512-9uIQ10o0WGdpP6GDhXcdOJPJuDgFtIDtN/9+ArJQ2NAfAmiuhTQdzkaTGR33v43GYS2UrSA0eX2pPPHoFVvpxA==",
  58 | 			"license": "MIT",
  59 | 			"engines": {
  60 | 				"node": ">=6.9.0"
  61 | 			}
  62 | 		},
  63 | 		"node_modules/@esbuild/aix-ppc64": {
  64 | 			"version": "0.25.9",
  65 | 			"resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.9.tgz",
  66 | 			"integrity": "sha512-OaGtL73Jck6pBKjNIe24BnFE6agGl+6KxDtTfHhy1HmhthfKouEcOhqpSL64K4/0WCtbKFLOdzD/44cJ4k9opA==",
  67 | 			"cpu": [
  68 | 				"ppc64"
  69 | 			],
  70 | 			"license": "MIT",
  71 | 			"optional": true,
  72 | 			"os": [
  73 | 				"aix"
  74 | 			],
  75 | 			"engines": {
  76 | 				"node": ">=18"
  77 | 			}
  78 | 		},
  79 | 		"node_modules/@esbuild/android-arm": {
  80 | 			"version": "0.25.9",
  81 | 			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.9.tgz",
  82 | 			"integrity": "sha512-5WNI1DaMtxQ7t7B6xa572XMXpHAaI/9Hnhk8lcxF4zVN4xstUgTlvuGDorBguKEnZO70qwEcLpfifMLoxiPqHQ==",
  83 | 			"cpu": [
  84 | 				"arm"
  85 | 			],
  86 | 			"license": "MIT",
  87 | 			"optional": true,
  88 | 			"os": [
  89 | 				"android"
  90 | 			],
  91 | 			"engines": {
  92 | 				"node": ">=18"
  93 | 			}
  94 | 		},
  95 | 		"node_modules/@esbuild/android-arm64": {
  96 | 			"version": "0.25.9",
  97 | 			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.9.tgz",
  98 | 			"integrity": "sha512-IDrddSmpSv51ftWslJMvl3Q2ZT98fUSL2/rlUXuVqRXHCs5EUF1/f+jbjF5+NG9UffUDMCiTyh8iec7u8RlTLg==",
  99 | 			"cpu": [
 100 | 				"arm64"
 101 | 			],
 102 | 			"license": "MIT",
 103 | 			"optional": true,
 104 | 			"os": [
 105 | 				"android"
 106 | 			],
 107 | 			"engines": {
 108 | 				"node": ">=18"
 109 | 			}
 110 | 		},
 111 | 		"node_modules/@esbuild/android-x64": {
 112 | 			"version": "0.25.9",
 113 | 			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.9.tgz",
 114 | 			"integrity": "sha512-I853iMZ1hWZdNllhVZKm34f4wErd4lMyeV7BLzEExGEIZYsOzqDWDf+y082izYUE8gtJnYHdeDpN/6tUdwvfiw==",
 115 | 			"cpu": [
 116 | 				"x64"
 117 | 			],
 118 | 			"license": "MIT",
 119 | 			"optional": true,
 120 | 			"os": [
 121 | 				"android"
 122 | 			],
 123 | 			"engines": {
 124 | 				"node": ">=18"
 125 | 			}
 126 | 		},
 127 | 		"node_modules/@esbuild/darwin-arm64": {
 128 | 			"version": "0.25.9",
 129 | 			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.9.tgz",
 130 | 			"integrity": "sha512-XIpIDMAjOELi/9PB30vEbVMs3GV1v2zkkPnuyRRURbhqjyzIINwj+nbQATh4H9GxUgH1kFsEyQMxwiLFKUS6Rg==",
 131 | 			"cpu": [
 132 | 				"arm64"
 133 | 			],
 134 | 			"license": "MIT",
 135 | 			"optional": true,
 136 | 			"os": [
 137 | 				"darwin"
 138 | 			],
 139 | 			"engines": {
 140 | 				"node": ">=18"
 141 | 			}
 142 | 		},
 143 | 		"node_modules/@esbuild/darwin-x64": {
 144 | 			"version": "0.25.9",
 145 | 			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.9.tgz",
 146 | 			"integrity": "sha512-jhHfBzjYTA1IQu8VyrjCX4ApJDnH+ez+IYVEoJHeqJm9VhG9Dh2BYaJritkYK3vMaXrf7Ogr/0MQ8/MeIefsPQ==",
 147 | 			"cpu": [
 148 | 				"x64"
 149 | 			],
 150 | 			"license": "MIT",
 151 | 			"optional": true,
 152 | 			"os": [
 153 | 				"darwin"
 154 | 			],
 155 | 			"engines": {
 156 | 				"node": ">=18"
 157 | 			}
 158 | 		},
 159 | 		"node_modules/@esbuild/freebsd-arm64": {
 160 | 			"version": "0.25.9",
 161 | 			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.9.tgz",
 162 | 			"integrity": "sha512-z93DmbnY6fX9+KdD4Ue/H6sYs+bhFQJNCPZsi4XWJoYblUqT06MQUdBCpcSfuiN72AbqeBFu5LVQTjfXDE2A6Q==",
 163 | 			"cpu": [
 164 | 				"arm64"
 165 | 			],
 166 | 			"license": "MIT",
 167 | 			"optional": true,
 168 | 			"os": [
 169 | 				"freebsd"
 170 | 			],
 171 | 			"engines": {
 172 | 				"node": ">=18"
 173 | 			}
 174 | 		},
 175 | 		"node_modules/@esbuild/freebsd-x64": {
 176 | 			"version": "0.25.9",
 177 | 			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.9.tgz",
 178 | 			"integrity": "sha512-mrKX6H/vOyo5v71YfXWJxLVxgy1kyt1MQaD8wZJgJfG4gq4DpQGpgTB74e5yBeQdyMTbgxp0YtNj7NuHN0PoZg==",
 179 | 			"cpu": [
 180 | 				"x64"
 181 | 			],
 182 | 			"license": "MIT",
 183 | 			"optional": true,
 184 | 			"os": [
 185 | 				"freebsd"
 186 | 			],
 187 | 			"engines": {
 188 | 				"node": ">=18"
 189 | 			}
 190 | 		},
 191 | 		"node_modules/@esbuild/linux-arm": {
 192 | 			"version": "0.25.9",
 193 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.9.tgz",
 194 | 			"integrity": "sha512-HBU2Xv78SMgaydBmdor38lg8YDnFKSARg1Q6AT0/y2ezUAKiZvc211RDFHlEZRFNRVhcMamiToo7bDx3VEOYQw==",
 195 | 			"cpu": [
 196 | 				"arm"
 197 | 			],
 198 | 			"license": "MIT",
 199 | 			"optional": true,
 200 | 			"os": [
 201 | 				"linux"
 202 | 			],
 203 | 			"engines": {
 204 | 				"node": ">=18"
 205 | 			}
 206 | 		},
 207 | 		"node_modules/@esbuild/linux-arm64": {
 208 | 			"version": "0.25.9",
 209 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.9.tgz",
 210 | 			"integrity": "sha512-BlB7bIcLT3G26urh5Dmse7fiLmLXnRlopw4s8DalgZ8ef79Jj4aUcYbk90g8iCa2467HX8SAIidbL7gsqXHdRw==",
 211 | 			"cpu": [
 212 | 				"arm64"
 213 | 			],
 214 | 			"license": "MIT",
 215 | 			"optional": true,
 216 | 			"os": [
 217 | 				"linux"
 218 | 			],
 219 | 			"engines": {
 220 | 				"node": ">=18"
 221 | 			}
 222 | 		},
 223 | 		"node_modules/@esbuild/linux-ia32": {
 224 | 			"version": "0.25.9",
 225 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.9.tgz",
 226 | 			"integrity": "sha512-e7S3MOJPZGp2QW6AK6+Ly81rC7oOSerQ+P8L0ta4FhVi+/j/v2yZzx5CqqDaWjtPFfYz21Vi1S0auHrap3Ma3A==",
 227 | 			"cpu": [
 228 | 				"ia32"
 229 | 			],
 230 | 			"license": "MIT",
 231 | 			"optional": true,
 232 | 			"os": [
 233 | 				"linux"
 234 | 			],
 235 | 			"engines": {
 236 | 				"node": ">=18"
 237 | 			}
 238 | 		},
 239 | 		"node_modules/@esbuild/linux-loong64": {
 240 | 			"version": "0.25.9",
 241 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.9.tgz",
 242 | 			"integrity": "sha512-Sbe10Bnn0oUAB2AalYztvGcK+o6YFFA/9829PhOCUS9vkJElXGdphz0A3DbMdP8gmKkqPmPcMJmJOrI3VYB1JQ==",
 243 | 			"cpu": [
 244 | 				"loong64"
 245 | 			],
 246 | 			"license": "MIT",
 247 | 			"optional": true,
 248 | 			"os": [
 249 | 				"linux"
 250 | 			],
 251 | 			"engines": {
 252 | 				"node": ">=18"
 253 | 			}
 254 | 		},
 255 | 		"node_modules/@esbuild/linux-mips64el": {
 256 | 			"version": "0.25.9",
 257 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.9.tgz",
 258 | 			"integrity": "sha512-YcM5br0mVyZw2jcQeLIkhWtKPeVfAerES5PvOzaDxVtIyZ2NUBZKNLjC5z3/fUlDgT6w89VsxP2qzNipOaaDyA==",
 259 | 			"cpu": [
 260 | 				"mips64el"
 261 | 			],
 262 | 			"license": "MIT",
 263 | 			"optional": true,
 264 | 			"os": [
 265 | 				"linux"
 266 | 			],
 267 | 			"engines": {
 268 | 				"node": ">=18"
 269 | 			}
 270 | 		},
 271 | 		"node_modules/@esbuild/linux-ppc64": {
 272 | 			"version": "0.25.9",
 273 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.9.tgz",
 274 | 			"integrity": "sha512-++0HQvasdo20JytyDpFvQtNrEsAgNG2CY1CLMwGXfFTKGBGQT3bOeLSYE2l1fYdvML5KUuwn9Z8L1EWe2tzs1w==",
 275 | 			"cpu": [
 276 | 				"ppc64"
 277 | 			],
 278 | 			"license": "MIT",
 279 | 			"optional": true,
 280 | 			"os": [
 281 | 				"linux"
 282 | 			],
 283 | 			"engines": {
 284 | 				"node": ">=18"
 285 | 			}
 286 | 		},
 287 | 		"node_modules/@esbuild/linux-riscv64": {
 288 | 			"version": "0.25.9",
 289 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.9.tgz",
 290 | 			"integrity": "sha512-uNIBa279Y3fkjV+2cUjx36xkx7eSjb8IvnL01eXUKXez/CBHNRw5ekCGMPM0BcmqBxBcdgUWuUXmVWwm4CH9kg==",
 291 | 			"cpu": [
 292 | 				"riscv64"
 293 | 			],
 294 | 			"license": "MIT",
 295 | 			"optional": true,
 296 | 			"os": [
 297 | 				"linux"
 298 | 			],
 299 | 			"engines": {
 300 | 				"node": ">=18"
 301 | 			}
 302 | 		},
 303 | 		"node_modules/@esbuild/linux-s390x": {
 304 | 			"version": "0.25.9",
 305 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.9.tgz",
 306 | 			"integrity": "sha512-Mfiphvp3MjC/lctb+7D287Xw1DGzqJPb/J2aHHcHxflUo+8tmN/6d4k6I2yFR7BVo5/g7x2Monq4+Yew0EHRIA==",
 307 | 			"cpu": [
 308 | 				"s390x"
 309 | 			],
 310 | 			"license": "MIT",
 311 | 			"optional": true,
 312 | 			"os": [
 313 | 				"linux"
 314 | 			],
 315 | 			"engines": {
 316 | 				"node": ">=18"
 317 | 			}
 318 | 		},
 319 | 		"node_modules/@esbuild/linux-x64": {
 320 | 			"version": "0.25.9",
 321 | 			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.9.tgz",
 322 | 			"integrity": "sha512-iSwByxzRe48YVkmpbgoxVzn76BXjlYFXC7NvLYq+b+kDjyyk30J0JY47DIn8z1MO3K0oSl9fZoRmZPQI4Hklzg==",
 323 | 			"cpu": [
 324 | 				"x64"
 325 | 			],
 326 | 			"license": "MIT",
 327 | 			"optional": true,
 328 | 			"os": [
 329 | 				"linux"
 330 | 			],
 331 | 			"engines": {
 332 | 				"node": ">=18"
 333 | 			}
 334 | 		},
 335 | 		"node_modules/@esbuild/netbsd-arm64": {
 336 | 			"version": "0.25.9",
 337 | 			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.9.tgz",
 338 | 			"integrity": "sha512-9jNJl6FqaUG+COdQMjSCGW4QiMHH88xWbvZ+kRVblZsWrkXlABuGdFJ1E9L7HK+T0Yqd4akKNa/lO0+jDxQD4Q==",
 339 | 			"cpu": [
 340 | 				"arm64"
 341 | 			],
 342 | 			"license": "MIT",
 343 | 			"optional": true,
 344 | 			"os": [
 345 | 				"netbsd"
 346 | 			],
 347 | 			"engines": {
 348 | 				"node": ">=18"
 349 | 			}
 350 | 		},
 351 | 		"node_modules/@esbuild/netbsd-x64": {
 352 | 			"version": "0.25.9",
 353 | 			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.9.tgz",
 354 | 			"integrity": "sha512-RLLdkflmqRG8KanPGOU7Rpg829ZHu8nFy5Pqdi9U01VYtG9Y0zOG6Vr2z4/S+/3zIyOxiK6cCeYNWOFR9QP87g==",
 355 | 			"cpu": [
 356 | 				"x64"
 357 | 			],
 358 | 			"license": "MIT",
 359 | 			"optional": true,
 360 | 			"os": [
 361 | 				"netbsd"
 362 | 			],
 363 | 			"engines": {
 364 | 				"node": ">=18"
 365 | 			}
 366 | 		},
 367 | 		"node_modules/@esbuild/openbsd-arm64": {
 368 | 			"version": "0.25.9",
 369 | 			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.9.tgz",
 370 | 			"integrity": "sha512-YaFBlPGeDasft5IIM+CQAhJAqS3St3nJzDEgsgFixcfZeyGPCd6eJBWzke5piZuZ7CtL656eOSYKk4Ls2C0FRQ==",
 371 | 			"cpu": [
 372 | 				"arm64"
 373 | 			],
 374 | 			"license": "MIT",
 375 | 			"optional": true,
 376 | 			"os": [
 377 | 				"openbsd"
 378 | 			],
 379 | 			"engines": {
 380 | 				"node": ">=18"
 381 | 			}
 382 | 		},
 383 | 		"node_modules/@esbuild/openbsd-x64": {
 384 | 			"version": "0.25.9",
 385 | 			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.9.tgz",
 386 | 			"integrity": "sha512-1MkgTCuvMGWuqVtAvkpkXFmtL8XhWy+j4jaSO2wxfJtilVCi0ZE37b8uOdMItIHz4I6z1bWWtEX4CJwcKYLcuA==",
 387 | 			"cpu": [
 388 | 				"x64"
 389 | 			],
 390 | 			"license": "MIT",
 391 | 			"optional": true,
 392 | 			"os": [
 393 | 				"openbsd"
 394 | 			],
 395 | 			"engines": {
 396 | 				"node": ">=18"
 397 | 			}
 398 | 		},
 399 | 		"node_modules/@esbuild/openharmony-arm64": {
 400 | 			"version": "0.25.9",
 401 | 			"resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.9.tgz",
 402 | 			"integrity": "sha512-4Xd0xNiMVXKh6Fa7HEJQbrpP3m3DDn43jKxMjxLLRjWnRsfxjORYJlXPO4JNcXtOyfajXorRKY9NkOpTHptErg==",
 403 | 			"cpu": [
 404 | 				"arm64"
 405 | 			],
 406 | 			"license": "MIT",
 407 | 			"optional": true,
 408 | 			"os": [
 409 | 				"openharmony"
 410 | 			],
 411 | 			"engines": {
 412 | 				"node": ">=18"
 413 | 			}
 414 | 		},
 415 | 		"node_modules/@esbuild/sunos-x64": {
 416 | 			"version": "0.25.9",
 417 | 			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.9.tgz",
 418 | 			"integrity": "sha512-WjH4s6hzo00nNezhp3wFIAfmGZ8U7KtrJNlFMRKxiI9mxEK1scOMAaa9i4crUtu+tBr+0IN6JCuAcSBJZfnphw==",
 419 | 			"cpu": [
 420 | 				"x64"
 421 | 			],
 422 | 			"license": "MIT",
 423 | 			"optional": true,
 424 | 			"os": [
 425 | 				"sunos"
 426 | 			],
 427 | 			"engines": {
 428 | 				"node": ">=18"
 429 | 			}
 430 | 		},
 431 | 		"node_modules/@esbuild/win32-arm64": {
 432 | 			"version": "0.25.9",
 433 | 			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.9.tgz",
 434 | 			"integrity": "sha512-mGFrVJHmZiRqmP8xFOc6b84/7xa5y5YvR1x8djzXpJBSv/UsNK6aqec+6JDjConTgvvQefdGhFDAs2DLAds6gQ==",
 435 | 			"cpu": [
 436 | 				"arm64"
 437 | 			],
 438 | 			"license": "MIT",
 439 | 			"optional": true,
 440 | 			"os": [
 441 | 				"win32"
 442 | 			],
 443 | 			"engines": {
 444 | 				"node": ">=18"
 445 | 			}
 446 | 		},
 447 | 		"node_modules/@esbuild/win32-ia32": {
 448 | 			"version": "0.25.9",
 449 | 			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.9.tgz",
 450 | 			"integrity": "sha512-b33gLVU2k11nVx1OhX3C8QQP6UHQK4ZtN56oFWvVXvz2VkDoe6fbG8TOgHFxEvqeqohmRnIHe5A1+HADk4OQww==",
 451 | 			"cpu": [
 452 | 				"ia32"
 453 | 			],
 454 | 			"license": "MIT",
 455 | 			"optional": true,
 456 | 			"os": [
 457 | 				"win32"
 458 | 			],
 459 | 			"engines": {
 460 | 				"node": ">=18"
 461 | 			}
 462 | 		},
 463 | 		"node_modules/@esbuild/win32-x64": {
 464 | 			"version": "0.25.9",
 465 | 			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.9.tgz",
 466 | 			"integrity": "sha512-PPOl1mi6lpLNQxnGoyAfschAodRFYXJ+9fs6WHXz7CSWKbOqiMZsubC+BQsVKuul+3vKLuwTHsS2c2y9EoKwxQ==",
 467 | 			"cpu": [
 468 | 				"x64"
 469 | 			],
 470 | 			"license": "MIT",
 471 | 			"optional": true,
 472 | 			"os": [
 473 | 				"win32"
 474 | 			],
 475 | 			"engines": {
 476 | 				"node": ">=18"
 477 | 			}
 478 | 		},
 479 | 		"node_modules/@ethersproject/abi": {
 480 | 			"version": "5.8.0",
 481 | 			"resolved": "https://registry.npmjs.org/@ethersproject/abi/-/abi-5.8.0.tgz",
 482 | 			"integrity": "sha512-b9YS/43ObplgyV6SlyQsG53/vkSal0MNA1fskSC4mbnCMi8R+NkcH8K9FPYNESf6jUefBUniE4SOKms0E/KK1Q==",
 483 | 			"funding": [
 484 | 				{
 485 | 					"type": "individual",
 486 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 487 | 				},
 488 | 				{
 489 | 					"type": "individual",
 490 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 491 | 				}
 492 | 			],
 493 | 			"license": "MIT",
 494 | 			"dependencies": {
 495 | 				"@ethersproject/address": "^5.8.0",
 496 | 				"@ethersproject/bignumber": "^5.8.0",
 497 | 				"@ethersproject/bytes": "^5.8.0",
 498 | 				"@ethersproject/constants": "^5.8.0",
 499 | 				"@ethersproject/hash": "^5.8.0",
 500 | 				"@ethersproject/keccak256": "^5.8.0",
 501 | 				"@ethersproject/logger": "^5.8.0",
 502 | 				"@ethersproject/properties": "^5.8.0",
 503 | 				"@ethersproject/strings": "^5.8.0"
 504 | 			}
 505 | 		},
 506 | 		"node_modules/@ethersproject/abstract-provider": {
 507 | 			"version": "5.8.0",
 508 | 			"resolved": "https://registry.npmjs.org/@ethersproject/abstract-provider/-/abstract-provider-5.8.0.tgz",
 509 | 			"integrity": "sha512-wC9SFcmh4UK0oKuLJQItoQdzS/qZ51EJegK6EmAWlh+OptpQ/npECOR3QqECd8iGHC0RJb4WKbVdSfif4ammrg==",
 510 | 			"funding": [
 511 | 				{
 512 | 					"type": "individual",
 513 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 514 | 				},
 515 | 				{
 516 | 					"type": "individual",
 517 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 518 | 				}
 519 | 			],
 520 | 			"license": "MIT",
 521 | 			"dependencies": {
 522 | 				"@ethersproject/bignumber": "^5.8.0",
 523 | 				"@ethersproject/bytes": "^5.8.0",
 524 | 				"@ethersproject/logger": "^5.8.0",
 525 | 				"@ethersproject/networks": "^5.8.0",
 526 | 				"@ethersproject/properties": "^5.8.0",
 527 | 				"@ethersproject/transactions": "^5.8.0",
 528 | 				"@ethersproject/web": "^5.8.0"
 529 | 			}
 530 | 		},
 531 | 		"node_modules/@ethersproject/abstract-signer": {
 532 | 			"version": "5.8.0",
 533 | 			"resolved": "https://registry.npmjs.org/@ethersproject/abstract-signer/-/abstract-signer-5.8.0.tgz",
 534 | 			"integrity": "sha512-N0XhZTswXcmIZQdYtUnd79VJzvEwXQw6PK0dTl9VoYrEBxxCPXqS0Eod7q5TNKRxe1/5WUMuR0u0nqTF/avdCA==",
 535 | 			"funding": [
 536 | 				{
 537 | 					"type": "individual",
 538 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 539 | 				},
 540 | 				{
 541 | 					"type": "individual",
 542 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 543 | 				}
 544 | 			],
 545 | 			"license": "MIT",
 546 | 			"dependencies": {
 547 | 				"@ethersproject/abstract-provider": "^5.8.0",
 548 | 				"@ethersproject/bignumber": "^5.8.0",
 549 | 				"@ethersproject/bytes": "^5.8.0",
 550 | 				"@ethersproject/logger": "^5.8.0",
 551 | 				"@ethersproject/properties": "^5.8.0"
 552 | 			}
 553 | 		},
 554 | 		"node_modules/@ethersproject/address": {
 555 | 			"version": "5.8.0",
 556 | 			"resolved": "https://registry.npmjs.org/@ethersproject/address/-/address-5.8.0.tgz",
 557 | 			"integrity": "sha512-GhH/abcC46LJwshoN+uBNoKVFPxUuZm6dA257z0vZkKmU1+t8xTn8oK7B9qrj8W2rFRMch4gbJl6PmVxjxBEBA==",
 558 | 			"funding": [
 559 | 				{
 560 | 					"type": "individual",
 561 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 562 | 				},
 563 | 				{
 564 | 					"type": "individual",
 565 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 566 | 				}
 567 | 			],
 568 | 			"license": "MIT",
 569 | 			"dependencies": {
 570 | 				"@ethersproject/bignumber": "^5.8.0",
 571 | 				"@ethersproject/bytes": "^5.8.0",
 572 | 				"@ethersproject/keccak256": "^5.8.0",
 573 | 				"@ethersproject/logger": "^5.8.0",
 574 | 				"@ethersproject/rlp": "^5.8.0"
 575 | 			}
 576 | 		},
 577 | 		"node_modules/@ethersproject/base64": {
 578 | 			"version": "5.8.0",
 579 | 			"resolved": "https://registry.npmjs.org/@ethersproject/base64/-/base64-5.8.0.tgz",
 580 | 			"integrity": "sha512-lN0oIwfkYj9LbPx4xEkie6rAMJtySbpOAFXSDVQaBnAzYfB4X2Qr+FXJGxMoc3Bxp2Sm8OwvzMrywxyw0gLjIQ==",
 581 | 			"funding": [
 582 | 				{
 583 | 					"type": "individual",
 584 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 585 | 				},
 586 | 				{
 587 | 					"type": "individual",
 588 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 589 | 				}
 590 | 			],
 591 | 			"license": "MIT",
 592 | 			"dependencies": {
 593 | 				"@ethersproject/bytes": "^5.8.0"
 594 | 			}
 595 | 		},
 596 | 		"node_modules/@ethersproject/basex": {
 597 | 			"version": "5.8.0",
 598 | 			"resolved": "https://registry.npmjs.org/@ethersproject/basex/-/basex-5.8.0.tgz",
 599 | 			"integrity": "sha512-PIgTszMlDRmNwW9nhS6iqtVfdTAKosA7llYXNmGPw4YAI1PUyMv28988wAb41/gHF/WqGdoLv0erHaRcHRKW2Q==",
 600 | 			"funding": [
 601 | 				{
 602 | 					"type": "individual",
 603 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 604 | 				},
 605 | 				{
 606 | 					"type": "individual",
 607 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 608 | 				}
 609 | 			],
 610 | 			"license": "MIT",
 611 | 			"dependencies": {
 612 | 				"@ethersproject/bytes": "^5.8.0",
 613 | 				"@ethersproject/properties": "^5.8.0"
 614 | 			}
 615 | 		},
 616 | 		"node_modules/@ethersproject/bignumber": {
 617 | 			"version": "5.8.0",
 618 | 			"resolved": "https://registry.npmjs.org/@ethersproject/bignumber/-/bignumber-5.8.0.tgz",
 619 | 			"integrity": "sha512-ZyaT24bHaSeJon2tGPKIiHszWjD/54Sz8t57Toch475lCLljC6MgPmxk7Gtzz+ddNN5LuHea9qhAe0x3D+uYPA==",
 620 | 			"funding": [
 621 | 				{
 622 | 					"type": "individual",
 623 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 624 | 				},
 625 | 				{
 626 | 					"type": "individual",
 627 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 628 | 				}
 629 | 			],
 630 | 			"license": "MIT",
 631 | 			"dependencies": {
 632 | 				"@ethersproject/bytes": "^5.8.0",
 633 | 				"@ethersproject/logger": "^5.8.0",
 634 | 				"bn.js": "^5.2.1"
 635 | 			}
 636 | 		},
 637 | 		"node_modules/@ethersproject/bytes": {
 638 | 			"version": "5.8.0",
 639 | 			"resolved": "https://registry.npmjs.org/@ethersproject/bytes/-/bytes-5.8.0.tgz",
 640 | 			"integrity": "sha512-vTkeohgJVCPVHu5c25XWaWQOZ4v+DkGoC42/TS2ond+PARCxTJvgTFUNDZovyQ/uAQ4EcpqqowKydcdmRKjg7A==",
 641 | 			"funding": [
 642 | 				{
 643 | 					"type": "individual",
 644 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 645 | 				},
 646 | 				{
 647 | 					"type": "individual",
 648 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 649 | 				}
 650 | 			],
 651 | 			"license": "MIT",
 652 | 			"dependencies": {
 653 | 				"@ethersproject/logger": "^5.8.0"
 654 | 			}
 655 | 		},
 656 | 		"node_modules/@ethersproject/constants": {
 657 | 			"version": "5.8.0",
 658 | 			"resolved": "https://registry.npmjs.org/@ethersproject/constants/-/constants-5.8.0.tgz",
 659 | 			"integrity": "sha512-wigX4lrf5Vu+axVTIvNsuL6YrV4O5AXl5ubcURKMEME5TnWBouUh0CDTWxZ2GpnRn1kcCgE7l8O5+VbV9QTTcg==",
 660 | 			"funding": [
 661 | 				{
 662 | 					"type": "individual",
 663 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 664 | 				},
 665 | 				{
 666 | 					"type": "individual",
 667 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 668 | 				}
 669 | 			],
 670 | 			"license": "MIT",
 671 | 			"dependencies": {
 672 | 				"@ethersproject/bignumber": "^5.8.0"
 673 | 			}
 674 | 		},
 675 | 		"node_modules/@ethersproject/contracts": {
 676 | 			"version": "5.8.0",
 677 | 			"resolved": "https://registry.npmjs.org/@ethersproject/contracts/-/contracts-5.8.0.tgz",
 678 | 			"integrity": "sha512-0eFjGz9GtuAi6MZwhb4uvUM216F38xiuR0yYCjKJpNfSEy4HUM8hvqqBj9Jmm0IUz8l0xKEhWwLIhPgxNY0yvQ==",
 679 | 			"funding": [
 680 | 				{
 681 | 					"type": "individual",
 682 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 683 | 				},
 684 | 				{
 685 | 					"type": "individual",
 686 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 687 | 				}
 688 | 			],
 689 | 			"license": "MIT",
 690 | 			"dependencies": {
 691 | 				"@ethersproject/abi": "^5.8.0",
 692 | 				"@ethersproject/abstract-provider": "^5.8.0",
 693 | 				"@ethersproject/abstract-signer": "^5.8.0",
 694 | 				"@ethersproject/address": "^5.8.0",
 695 | 				"@ethersproject/bignumber": "^5.8.0",
 696 | 				"@ethersproject/bytes": "^5.8.0",
 697 | 				"@ethersproject/constants": "^5.8.0",
 698 | 				"@ethersproject/logger": "^5.8.0",
 699 | 				"@ethersproject/properties": "^5.8.0",
 700 | 				"@ethersproject/transactions": "^5.8.0"
 701 | 			}
 702 | 		},
 703 | 		"node_modules/@ethersproject/hash": {
 704 | 			"version": "5.8.0",
 705 | 			"resolved": "https://registry.npmjs.org/@ethersproject/hash/-/hash-5.8.0.tgz",
 706 | 			"integrity": "sha512-ac/lBcTbEWW/VGJij0CNSw/wPcw9bSRgCB0AIBz8CvED/jfvDoV9hsIIiWfvWmFEi8RcXtlNwp2jv6ozWOsooA==",
 707 | 			"funding": [
 708 | 				{
 709 | 					"type": "individual",
 710 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 711 | 				},
 712 | 				{
 713 | 					"type": "individual",
 714 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 715 | 				}
 716 | 			],
 717 | 			"license": "MIT",
 718 | 			"dependencies": {
 719 | 				"@ethersproject/abstract-signer": "^5.8.0",
 720 | 				"@ethersproject/address": "^5.8.0",
 721 | 				"@ethersproject/base64": "^5.8.0",
 722 | 				"@ethersproject/bignumber": "^5.8.0",
 723 | 				"@ethersproject/bytes": "^5.8.0",
 724 | 				"@ethersproject/keccak256": "^5.8.0",
 725 | 				"@ethersproject/logger": "^5.8.0",
 726 | 				"@ethersproject/properties": "^5.8.0",
 727 | 				"@ethersproject/strings": "^5.8.0"
 728 | 			}
 729 | 		},
 730 | 		"node_modules/@ethersproject/hdnode": {
 731 | 			"version": "5.8.0",
 732 | 			"resolved": "https://registry.npmjs.org/@ethersproject/hdnode/-/hdnode-5.8.0.tgz",
 733 | 			"integrity": "sha512-4bK1VF6E83/3/Im0ERnnUeWOY3P1BZml4ZD3wcH8Ys0/d1h1xaFt6Zc+Dh9zXf9TapGro0T4wvO71UTCp3/uoA==",
 734 | 			"funding": [
 735 | 				{
 736 | 					"type": "individual",
 737 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 738 | 				},
 739 | 				{
 740 | 					"type": "individual",
 741 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 742 | 				}
 743 | 			],
 744 | 			"license": "MIT",
 745 | 			"dependencies": {
 746 | 				"@ethersproject/abstract-signer": "^5.8.0",
 747 | 				"@ethersproject/basex": "^5.8.0",
 748 | 				"@ethersproject/bignumber": "^5.8.0",
 749 | 				"@ethersproject/bytes": "^5.8.0",
 750 | 				"@ethersproject/logger": "^5.8.0",
 751 | 				"@ethersproject/pbkdf2": "^5.8.0",
 752 | 				"@ethersproject/properties": "^5.8.0",
 753 | 				"@ethersproject/sha2": "^5.8.0",
 754 | 				"@ethersproject/signing-key": "^5.8.0",
 755 | 				"@ethersproject/strings": "^5.8.0",
 756 | 				"@ethersproject/transactions": "^5.8.0",
 757 | 				"@ethersproject/wordlists": "^5.8.0"
 758 | 			}
 759 | 		},
 760 | 		"node_modules/@ethersproject/json-wallets": {
 761 | 			"version": "5.8.0",
 762 | 			"resolved": "https://registry.npmjs.org/@ethersproject/json-wallets/-/json-wallets-5.8.0.tgz",
 763 | 			"integrity": "sha512-HxblNck8FVUtNxS3VTEYJAcwiKYsBIF77W15HufqlBF9gGfhmYOJtYZp8fSDZtn9y5EaXTE87zDwzxRoTFk11w==",
 764 | 			"funding": [
 765 | 				{
 766 | 					"type": "individual",
 767 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 768 | 				},
 769 | 				{
 770 | 					"type": "individual",
 771 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 772 | 				}
 773 | 			],
 774 | 			"license": "MIT",
 775 | 			"dependencies": {
 776 | 				"@ethersproject/abstract-signer": "^5.8.0",
 777 | 				"@ethersproject/address": "^5.8.0",
 778 | 				"@ethersproject/bytes": "^5.8.0",
 779 | 				"@ethersproject/hdnode": "^5.8.0",
 780 | 				"@ethersproject/keccak256": "^5.8.0",
 781 | 				"@ethersproject/logger": "^5.8.0",
 782 | 				"@ethersproject/pbkdf2": "^5.8.0",
 783 | 				"@ethersproject/properties": "^5.8.0",
 784 | 				"@ethersproject/random": "^5.8.0",
 785 | 				"@ethersproject/strings": "^5.8.0",
 786 | 				"@ethersproject/transactions": "^5.8.0",
 787 | 				"aes-js": "3.0.0",
 788 | 				"scrypt-js": "3.0.1"
 789 | 			}
 790 | 		},
 791 | 		"node_modules/@ethersproject/keccak256": {
 792 | 			"version": "5.8.0",
 793 | 			"resolved": "https://registry.npmjs.org/@ethersproject/keccak256/-/keccak256-5.8.0.tgz",
 794 | 			"integrity": "sha512-A1pkKLZSz8pDaQ1ftutZoaN46I6+jvuqugx5KYNeQOPqq+JZ0Txm7dlWesCHB5cndJSu5vP2VKptKf7cksERng==",
 795 | 			"funding": [
 796 | 				{
 797 | 					"type": "individual",
 798 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 799 | 				},
 800 | 				{
 801 | 					"type": "individual",
 802 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 803 | 				}
 804 | 			],
 805 | 			"license": "MIT",
 806 | 			"dependencies": {
 807 | 				"@ethersproject/bytes": "^5.8.0",
 808 | 				"js-sha3": "0.8.0"
 809 | 			}
 810 | 		},
 811 | 		"node_modules/@ethersproject/logger": {
 812 | 			"version": "5.8.0",
 813 | 			"resolved": "https://registry.npmjs.org/@ethersproject/logger/-/logger-5.8.0.tgz",
 814 | 			"integrity": "sha512-Qe6knGmY+zPPWTC+wQrpitodgBfH7XoceCGL5bJVejmH+yCS3R8jJm8iiWuvWbG76RUmyEG53oqv6GMVWqunjA==",
 815 | 			"funding": [
 816 | 				{
 817 | 					"type": "individual",
 818 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 819 | 				},
 820 | 				{
 821 | 					"type": "individual",
 822 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 823 | 				}
 824 | 			],
 825 | 			"license": "MIT"
 826 | 		},
 827 | 		"node_modules/@ethersproject/networks": {
 828 | 			"version": "5.8.0",
 829 | 			"resolved": "https://registry.npmjs.org/@ethersproject/networks/-/networks-5.8.0.tgz",
 830 | 			"integrity": "sha512-egPJh3aPVAzbHwq8DD7Po53J4OUSsA1MjQp8Vf/OZPav5rlmWUaFLiq8cvQiGK0Z5K6LYzm29+VA/p4RL1FzNg==",
 831 | 			"funding": [
 832 | 				{
 833 | 					"type": "individual",
 834 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 835 | 				},
 836 | 				{
 837 | 					"type": "individual",
 838 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 839 | 				}
 840 | 			],
 841 | 			"license": "MIT",
 842 | 			"dependencies": {
 843 | 				"@ethersproject/logger": "^5.8.0"
 844 | 			}
 845 | 		},
 846 | 		"node_modules/@ethersproject/pbkdf2": {
 847 | 			"version": "5.8.0",
 848 | 			"resolved": "https://registry.npmjs.org/@ethersproject/pbkdf2/-/pbkdf2-5.8.0.tgz",
 849 | 			"integrity": "sha512-wuHiv97BrzCmfEaPbUFpMjlVg/IDkZThp9Ri88BpjRleg4iePJaj2SW8AIyE8cXn5V1tuAaMj6lzvsGJkGWskg==",
 850 | 			"funding": [
 851 | 				{
 852 | 					"type": "individual",
 853 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 854 | 				},
 855 | 				{
 856 | 					"type": "individual",
 857 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 858 | 				}
 859 | 			],
 860 | 			"license": "MIT",
 861 | 			"dependencies": {
 862 | 				"@ethersproject/bytes": "^5.8.0",
 863 | 				"@ethersproject/sha2": "^5.8.0"
 864 | 			}
 865 | 		},
 866 | 		"node_modules/@ethersproject/properties": {
 867 | 			"version": "5.8.0",
 868 | 			"resolved": "https://registry.npmjs.org/@ethersproject/properties/-/properties-5.8.0.tgz",
 869 | 			"integrity": "sha512-PYuiEoQ+FMaZZNGrStmN7+lWjlsoufGIHdww7454FIaGdbe/p5rnaCXTr5MtBYl3NkeoVhHZuyzChPeGeKIpQw==",
 870 | 			"funding": [
 871 | 				{
 872 | 					"type": "individual",
 873 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 874 | 				},
 875 | 				{
 876 | 					"type": "individual",
 877 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 878 | 				}
 879 | 			],
 880 | 			"license": "MIT",
 881 | 			"dependencies": {
 882 | 				"@ethersproject/logger": "^5.8.0"
 883 | 			}
 884 | 		},
 885 | 		"node_modules/@ethersproject/providers": {
 886 | 			"version": "5.8.0",
 887 | 			"resolved": "https://registry.npmjs.org/@ethersproject/providers/-/providers-5.8.0.tgz",
 888 | 			"integrity": "sha512-3Il3oTzEx3o6kzcg9ZzbE+oCZYyY+3Zh83sKkn4s1DZfTUjIegHnN2Cm0kbn9YFy45FDVcuCLLONhU7ny0SsCw==",
 889 | 			"funding": [
 890 | 				{
 891 | 					"type": "individual",
 892 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 893 | 				},
 894 | 				{
 895 | 					"type": "individual",
 896 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 897 | 				}
 898 | 			],
 899 | 			"license": "MIT",
 900 | 			"dependencies": {
 901 | 				"@ethersproject/abstract-provider": "^5.8.0",
 902 | 				"@ethersproject/abstract-signer": "^5.8.0",
 903 | 				"@ethersproject/address": "^5.8.0",
 904 | 				"@ethersproject/base64": "^5.8.0",
 905 | 				"@ethersproject/basex": "^5.8.0",
 906 | 				"@ethersproject/bignumber": "^5.8.0",
 907 | 				"@ethersproject/bytes": "^5.8.0",
 908 | 				"@ethersproject/constants": "^5.8.0",
 909 | 				"@ethersproject/hash": "^5.8.0",
 910 | 				"@ethersproject/logger": "^5.8.0",
 911 | 				"@ethersproject/networks": "^5.8.0",
 912 | 				"@ethersproject/properties": "^5.8.0",
 913 | 				"@ethersproject/random": "^5.8.0",
 914 | 				"@ethersproject/rlp": "^5.8.0",
 915 | 				"@ethersproject/sha2": "^5.8.0",
 916 | 				"@ethersproject/strings": "^5.8.0",
 917 | 				"@ethersproject/transactions": "^5.8.0",
 918 | 				"@ethersproject/web": "^5.8.0",
 919 | 				"bech32": "1.1.4",
 920 | 				"ws": "8.18.0"
 921 | 			}
 922 | 		},
 923 | 		"node_modules/@ethersproject/random": {
 924 | 			"version": "5.8.0",
 925 | 			"resolved": "https://registry.npmjs.org/@ethersproject/random/-/random-5.8.0.tgz",
 926 | 			"integrity": "sha512-E4I5TDl7SVqyg4/kkA/qTfuLWAQGXmSOgYyO01So8hLfwgKvYK5snIlzxJMk72IFdG/7oh8yuSqY2KX7MMwg+A==",
 927 | 			"funding": [
 928 | 				{
 929 | 					"type": "individual",
 930 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 931 | 				},
 932 | 				{
 933 | 					"type": "individual",
 934 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 935 | 				}
 936 | 			],
 937 | 			"license": "MIT",
 938 | 			"dependencies": {
 939 | 				"@ethersproject/bytes": "^5.8.0",
 940 | 				"@ethersproject/logger": "^5.8.0"
 941 | 			}
 942 | 		},
 943 | 		"node_modules/@ethersproject/rlp": {
 944 | 			"version": "5.8.0",
 945 | 			"resolved": "https://registry.npmjs.org/@ethersproject/rlp/-/rlp-5.8.0.tgz",
 946 | 			"integrity": "sha512-LqZgAznqDbiEunaUvykH2JAoXTT9NV0Atqk8rQN9nx9SEgThA/WMx5DnW8a9FOufo//6FZOCHZ+XiClzgbqV9Q==",
 947 | 			"funding": [
 948 | 				{
 949 | 					"type": "individual",
 950 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 951 | 				},
 952 | 				{
 953 | 					"type": "individual",
 954 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 955 | 				}
 956 | 			],
 957 | 			"license": "MIT",
 958 | 			"dependencies": {
 959 | 				"@ethersproject/bytes": "^5.8.0",
 960 | 				"@ethersproject/logger": "^5.8.0"
 961 | 			}
 962 | 		},
 963 | 		"node_modules/@ethersproject/sha2": {
 964 | 			"version": "5.8.0",
 965 | 			"resolved": "https://registry.npmjs.org/@ethersproject/sha2/-/sha2-5.8.0.tgz",
 966 | 			"integrity": "sha512-dDOUrXr9wF/YFltgTBYS0tKslPEKr6AekjqDW2dbn1L1xmjGR+9GiKu4ajxovnrDbwxAKdHjW8jNcwfz8PAz4A==",
 967 | 			"funding": [
 968 | 				{
 969 | 					"type": "individual",
 970 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 971 | 				},
 972 | 				{
 973 | 					"type": "individual",
 974 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 975 | 				}
 976 | 			],
 977 | 			"license": "MIT",
 978 | 			"dependencies": {
 979 | 				"@ethersproject/bytes": "^5.8.0",
 980 | 				"@ethersproject/logger": "^5.8.0",
 981 | 				"hash.js": "1.1.7"
 982 | 			}
 983 | 		},
 984 | 		"node_modules/@ethersproject/signing-key": {
 985 | 			"version": "5.8.0",
 986 | 			"resolved": "https://registry.npmjs.org/@ethersproject/signing-key/-/signing-key-5.8.0.tgz",
 987 | 			"integrity": "sha512-LrPW2ZxoigFi6U6aVkFN/fa9Yx/+4AtIUe4/HACTvKJdhm0eeb107EVCIQcrLZkxaSIgc/eCrX8Q1GtbH+9n3w==",
 988 | 			"funding": [
 989 | 				{
 990 | 					"type": "individual",
 991 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
 992 | 				},
 993 | 				{
 994 | 					"type": "individual",
 995 | 					"url": "https://www.buymeacoffee.com/ricmoo"
 996 | 				}
 997 | 			],
 998 | 			"license": "MIT",
 999 | 			"dependencies": {
1000 | 				"@ethersproject/bytes": "^5.8.0",
1001 | 				"@ethersproject/logger": "^5.8.0",
1002 | 				"@ethersproject/properties": "^5.8.0",
1003 | 				"bn.js": "^5.2.1",
1004 | 				"elliptic": "6.6.1",
1005 | 				"hash.js": "1.1.7"
1006 | 			}
1007 | 		},
1008 | 		"node_modules/@ethersproject/strings": {
1009 | 			"version": "5.8.0",
1010 | 			"resolved": "https://registry.npmjs.org/@ethersproject/strings/-/strings-5.8.0.tgz",
1011 | 			"integrity": "sha512-qWEAk0MAvl0LszjdfnZ2uC8xbR2wdv4cDabyHiBh3Cldq/T8dPH3V4BbBsAYJUeonwD+8afVXld274Ls+Y1xXg==",
1012 | 			"funding": [
1013 | 				{
1014 | 					"type": "individual",
1015 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
1016 | 				},
1017 | 				{
1018 | 					"type": "individual",
1019 | 					"url": "https://www.buymeacoffee.com/ricmoo"
1020 | 				}
1021 | 			],
1022 | 			"license": "MIT",
1023 | 			"dependencies": {
1024 | 				"@ethersproject/bytes": "^5.8.0",
1025 | 				"@ethersproject/constants": "^5.8.0",
1026 | 				"@ethersproject/logger": "^5.8.0"
1027 | 			}
1028 | 		},
1029 | 		"node_modules/@ethersproject/transactions": {
1030 | 			"version": "5.8.0",
1031 | 			"resolved": "https://registry.npmjs.org/@ethersproject/transactions/-/transactions-5.8.0.tgz",
1032 | 			"integrity": "sha512-UglxSDjByHG0TuU17bDfCemZ3AnKO2vYrL5/2n2oXvKzvb7Cz+W9gOWXKARjp2URVwcWlQlPOEQyAviKwT4AHg==",
1033 | 			"funding": [
1034 | 				{
1035 | 					"type": "individual",
1036 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
1037 | 				},
1038 | 				{
1039 | 					"type": "individual",
1040 | 					"url": "https://www.buymeacoffee.com/ricmoo"
1041 | 				}
1042 | 			],
1043 | 			"license": "MIT",
1044 | 			"dependencies": {
1045 | 				"@ethersproject/address": "^5.8.0",
1046 | 				"@ethersproject/bignumber": "^5.8.0",
1047 | 				"@ethersproject/bytes": "^5.8.0",
1048 | 				"@ethersproject/constants": "^5.8.0",
1049 | 				"@ethersproject/keccak256": "^5.8.0",
1050 | 				"@ethersproject/logger": "^5.8.0",
1051 | 				"@ethersproject/properties": "^5.8.0",
1052 | 				"@ethersproject/rlp": "^5.8.0",
1053 | 				"@ethersproject/signing-key": "^5.8.0"
1054 | 			}
1055 | 		},
1056 | 		"node_modules/@ethersproject/units": {
1057 | 			"version": "5.8.0",
1058 | 			"resolved": "https://registry.npmjs.org/@ethersproject/units/-/units-5.8.0.tgz",
1059 | 			"integrity": "sha512-lxq0CAnc5kMGIiWW4Mr041VT8IhNM+Pn5T3haO74XZWFulk7wH1Gv64HqE96hT4a7iiNMdOCFEBgaxWuk8ETKQ==",
1060 | 			"funding": [
1061 | 				{
1062 | 					"type": "individual",
1063 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
1064 | 				},
1065 | 				{
1066 | 					"type": "individual",
1067 | 					"url": "https://www.buymeacoffee.com/ricmoo"
1068 | 				}
1069 | 			],
1070 | 			"license": "MIT",
1071 | 			"dependencies": {
1072 | 				"@ethersproject/bignumber": "^5.8.0",
1073 | 				"@ethersproject/constants": "^5.8.0",
1074 | 				"@ethersproject/logger": "^5.8.0"
1075 | 			}
1076 | 		},
1077 | 		"node_modules/@ethersproject/wallet": {
1078 | 			"version": "5.8.0",
1079 | 			"resolved": "https://registry.npmjs.org/@ethersproject/wallet/-/wallet-5.8.0.tgz",
1080 | 			"integrity": "sha512-G+jnzmgg6UxurVKRKvw27h0kvG75YKXZKdlLYmAHeF32TGUzHkOFd7Zn6QHOTYRFWnfjtSSFjBowKo7vfrXzPA==",
1081 | 			"funding": [
1082 | 				{
1083 | 					"type": "individual",
1084 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
1085 | 				},
1086 | 				{
1087 | 					"type": "individual",
1088 | 					"url": "https://www.buymeacoffee.com/ricmoo"
1089 | 				}
1090 | 			],
1091 | 			"license": "MIT",
1092 | 			"dependencies": {
1093 | 				"@ethersproject/abstract-provider": "^5.8.0",
1094 | 				"@ethersproject/abstract-signer": "^5.8.0",
1095 | 				"@ethersproject/address": "^5.8.0",
1096 | 				"@ethersproject/bignumber": "^5.8.0",
1097 | 				"@ethersproject/bytes": "^5.8.0",
1098 | 				"@ethersproject/hash": "^5.8.0",
1099 | 				"@ethersproject/hdnode": "^5.8.0",
1100 | 				"@ethersproject/json-wallets": "^5.8.0",
1101 | 				"@ethersproject/keccak256": "^5.8.0",
1102 | 				"@ethersproject/logger": "^5.8.0",
1103 | 				"@ethersproject/properties": "^5.8.0",
1104 | 				"@ethersproject/random": "^5.8.0",
1105 | 				"@ethersproject/signing-key": "^5.8.0",
1106 | 				"@ethersproject/transactions": "^5.8.0",
1107 | 				"@ethersproject/wordlists": "^5.8.0"
1108 | 			}
1109 | 		},
1110 | 		"node_modules/@ethersproject/web": {
1111 | 			"version": "5.8.0",
1112 | 			"resolved": "https://registry.npmjs.org/@ethersproject/web/-/web-5.8.0.tgz",
1113 | 			"integrity": "sha512-j7+Ksi/9KfGviws6Qtf9Q7KCqRhpwrYKQPs+JBA/rKVFF/yaWLHJEH3zfVP2plVu+eys0d2DlFmhoQJayFewcw==",
1114 | 			"funding": [
1115 | 				{
1116 | 					"type": "individual",
1117 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
1118 | 				},
1119 | 				{
1120 | 					"type": "individual",
1121 | 					"url": "https://www.buymeacoffee.com/ricmoo"
1122 | 				}
1123 | 			],
1124 | 			"license": "MIT",
1125 | 			"dependencies": {
1126 | 				"@ethersproject/base64": "^5.8.0",
1127 | 				"@ethersproject/bytes": "^5.8.0",
1128 | 				"@ethersproject/logger": "^5.8.0",
1129 | 				"@ethersproject/properties": "^5.8.0",
1130 | 				"@ethersproject/strings": "^5.8.0"
1131 | 			}
1132 | 		},
1133 | 		"node_modules/@ethersproject/wordlists": {
1134 | 			"version": "5.8.0",
1135 | 			"resolved": "https://registry.npmjs.org/@ethersproject/wordlists/-/wordlists-5.8.0.tgz",
1136 | 			"integrity": "sha512-2df9bbXicZws2Sb5S6ET493uJ0Z84Fjr3pC4tu/qlnZERibZCeUVuqdtt+7Tv9xxhUxHoIekIA7avrKUWHrezg==",
1137 | 			"funding": [
1138 | 				{
1139 | 					"type": "individual",
1140 | 					"url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
1141 | 				},
1142 | 				{
1143 | 					"type": "individual",
1144 | 					"url": "https://www.buymeacoffee.com/ricmoo"
1145 | 				}
1146 | 			],
1147 | 			"license": "MIT",
1148 | 			"dependencies": {
1149 | 				"@ethersproject/bytes": "^5.8.0",
1150 | 				"@ethersproject/hash": "^5.8.0",
1151 | 				"@ethersproject/logger": "^5.8.0",
1152 | 				"@ethersproject/properties": "^5.8.0",
1153 | 				"@ethersproject/strings": "^5.8.0"
1154 | 			}
1155 | 		},
1156 | 		"node_modules/@ioredis/commands": {
1157 | 			"version": "1.3.0",
1158 | 			"resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.3.0.tgz",
1159 | 			"integrity": "sha512-M/T6Zewn7sDaBQEqIZ8Rb+i9y8qfGmq+5SDFSf9sA2lUZTmdDLVdOiQaeDp+Q4wElZ9HG1GAX5KhDaidp6LQsQ==",
1160 | 			"license": "MIT"
1161 | 		},
1162 | 		"node_modules/@isaacs/cliui": {
1163 | 			"version": "8.0.2",
1164 | 			"resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
1165 | 			"integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
1166 | 			"license": "ISC",
1167 | 			"dependencies": {
1168 | 				"string-width": "^5.1.2",
1169 | 				"string-width-cjs": "npm:string-width@^4.2.0",
1170 | 				"strip-ansi": "^7.0.1",
1171 | 				"strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
1172 | 				"wrap-ansi": "^8.1.0",
1173 | 				"wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
1174 | 			},
1175 | 			"engines": {
1176 | 				"node": ">=12"
1177 | 			}
1178 | 		},
1179 | 		"node_modules/@jridgewell/gen-mapping": {
1180 | 			"version": "0.3.13",
1181 | 			"resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
1182 | 			"integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
1183 | 			"license": "MIT",
1184 | 			"dependencies": {
1185 | 				"@jridgewell/sourcemap-codec": "^1.5.0",
1186 | 				"@jridgewell/trace-mapping": "^0.3.24"
1187 | 			}
1188 | 		},
1189 | 		"node_modules/@jridgewell/remapping": {
1190 | 			"version": "2.3.5",
1191 | 			"resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
1192 | 			"integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
1193 | 			"license": "MIT",
1194 | 			"dependencies": {
1195 | 				"@jridgewell/gen-mapping": "^0.3.5",
1196 | 				"@jridgewell/trace-mapping": "^0.3.24"
1197 | 			}
1198 | 		},
1199 | 		"node_modules/@jridgewell/resolve-uri": {
1200 | 			"version": "3.1.2",
1201 | 			"resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
1202 | 			"integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
1203 | 			"license": "MIT",
1204 | 			"engines": {
1205 | 				"node": ">=6.0.0"
1206 | 			}
1207 | 		},
1208 | 		"node_modules/@jridgewell/sourcemap-codec": {
1209 | 			"version": "1.5.5",
1210 | 			"resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
1211 | 			"integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
1212 | 			"license": "MIT"
1213 | 		},
1214 | 		"node_modules/@jridgewell/trace-mapping": {
1215 | 			"version": "0.3.30",
1216 | 			"resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
1217 | 			"integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
1218 | 			"license": "MIT",
1219 | 			"dependencies": {
1220 | 				"@jridgewell/resolve-uri": "^3.1.0",
1221 | 				"@jridgewell/sourcemap-codec": "^1.4.14"
1222 | 			}
1223 | 		},
1224 | 		"node_modules/@noble/ciphers": {
1225 | 			"version": "1.3.0",
1226 | 			"resolved": "https://registry.npmjs.org/@noble/ciphers/-/ciphers-1.3.0.tgz",
1227 | 			"integrity": "sha512-2I0gnIVPtfnMw9ee9h1dJG7tp81+8Ob3OJb3Mv37rx5L40/b0i7djjCVvGOVqc9AEIQyvyu1i6ypKdFw8R8gQw==",
1228 | 			"license": "MIT",
1229 | 			"engines": {
1230 | 				"node": "^14.21.3 || >=16"
1231 | 			},
1232 | 			"funding": {
1233 | 				"url": "https://paulmillr.com/funding/"
1234 | 			}
1235 | 		},
1236 | 		"node_modules/@noble/curves": {
1237 | 			"version": "1.9.7",
1238 | 			"resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.9.7.tgz",
1239 | 			"integrity": "sha512-gbKGcRUYIjA3/zCCNaWDciTMFI0dCkvou3TL8Zmy5Nc7sJ47a0jtOeZoTaMxkuqRo9cRhjOdZJXegxYE5FN/xw==",
1240 | 			"license": "MIT",
1241 | 			"dependencies": {
1242 | 				"@noble/hashes": "1.8.0"
1243 | 			},
1244 | 			"engines": {
1245 | 				"node": "^14.21.3 || >=16"
1246 | 			},
1247 | 			"funding": {
1248 | 				"url": "https://paulmillr.com/funding/"
1249 | 			}
1250 | 		},
1251 | 		"node_modules/@noble/hashes": {
1252 | 			"version": "1.8.0",
1253 | 			"resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.8.0.tgz",
1254 | 			"integrity": "sha512-jCs9ldd7NwzpgXDIf6P3+NrHh9/sD6CQdxHyjQI+h/6rDNo88ypBxxz45UDuZHz9r3tNz7N/VInSVoVdtXEI4A==",
1255 | 			"license": "MIT",
1256 | 			"engines": {
1257 | 				"node": "^14.21.3 || >=16"
1258 | 			},
1259 | 			"funding": {
1260 | 				"url": "https://paulmillr.com/funding/"
1261 | 			}
1262 | 		},
1263 | 		"node_modules/@nodelib/fs.scandir": {
1264 | 			"version": "2.1.5",
1265 | 			"resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
1266 | 			"integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
1267 | 			"license": "MIT",
1268 | 			"dependencies": {
1269 | 				"@nodelib/fs.stat": "2.0.5",
1270 | 				"run-parallel": "^1.1.9"
1271 | 			},
1272 | 			"engines": {
1273 | 				"node": ">= 8"
1274 | 			}
1275 | 		},
1276 | 		"node_modules/@nodelib/fs.stat": {
1277 | 			"version": "2.0.5",
1278 | 			"resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
1279 | 			"integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
1280 | 			"license": "MIT",
1281 | 			"engines": {
1282 | 				"node": ">= 8"
1283 | 			}
1284 | 		},
1285 | 		"node_modules/@nodelib/fs.walk": {
1286 | 			"version": "1.2.8",
1287 | 			"resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
1288 | 			"integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
1289 | 			"license": "MIT",
1290 | 			"dependencies": {
1291 | 				"@nodelib/fs.scandir": "2.1.5",
1292 | 				"fastq": "^1.6.0"
1293 | 			},
1294 | 			"engines": {
1295 | 				"node": ">= 8"
1296 | 			}
1297 | 		},
1298 | 		"node_modules/@pkgjs/parseargs": {
1299 | 			"version": "0.11.0",
1300 | 			"resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
1301 | 			"integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
1302 | 			"license": "MIT",
1303 | 			"optional": true,
1304 | 			"engines": {
1305 | 				"node": ">=14"
1306 | 			}
1307 | 		},
1308 | 		"node_modules/@polka/url": {
1309 | 			"version": "1.0.0-next.29",
1310 | 			"resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
1311 | 			"integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
1312 | 			"license": "MIT"
1313 | 		},
1314 | 		"node_modules/@prisma/client": {
1315 | 			"version": "5.22.0",
1316 | 			"resolved": "https://registry.npmjs.org/@prisma/client/-/client-5.22.0.tgz",
1317 | 			"integrity": "sha512-M0SVXfyHnQREBKxCgyo7sffrKttwE6R8PMq330MIUF0pTwjUhLbW84pFDlf06B27XyCR++VtjugEnIHdr07SVA==",
1318 | 			"hasInstallScript": true,
1319 | 			"license": "Apache-2.0",
1320 | 			"engines": {
1321 | 				"node": ">=16.13"
1322 | 			},
1323 | 			"peerDependencies": {
1324 | 				"prisma": "*"
1325 | 			},
1326 | 			"peerDependenciesMeta": {
1327 | 				"prisma": {
1328 | 					"optional": true
1329 | 				}
1330 | 			}
1331 | 		},
1332 | 		"node_modules/@prisma/debug": {
1333 | 			"version": "5.22.0",
1334 | 			"resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-5.22.0.tgz",
1335 | 			"integrity": "sha512-AUt44v3YJeggO2ZU5BkXI7M4hu9BF2zzH2iF2V5pyXT/lRTyWiElZ7It+bRH1EshoMRxHgpYg4VB6rCM+mG5jQ==",
1336 | 			"devOptional": true,
1337 | 			"license": "Apache-2.0"
1338 | 		},
1339 | 		"node_modules/@prisma/engines": {
1340 | 			"version": "5.22.0",
1341 | 			"resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-5.22.0.tgz",
1342 | 			"integrity": "sha512-UNjfslWhAt06kVL3CjkuYpHAWSO6L4kDCVPegV6itt7nD1kSJavd3vhgAEhjglLJJKEdJ7oIqDJ+yHk6qO8gPA==",
1343 | 			"devOptional": true,
1344 | 			"hasInstallScript": true,
1345 | 			"license": "Apache-2.0",
1346 | 			"dependencies": {
1347 | 				"@prisma/debug": "5.22.0",
1348 | 				"@prisma/engines-version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
1349 | 				"@prisma/fetch-engine": "5.22.0",
1350 | 				"@prisma/get-platform": "5.22.0"
1351 | 			}
1352 | 		},
1353 | 		"node_modules/@prisma/engines-version": {
1354 | 			"version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
1355 | 			"resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2.tgz",
1356 | 			"integrity": "sha512-2PTmxFR2yHW/eB3uqWtcgRcgAbG1rwG9ZriSvQw+nnb7c4uCr3RAcGMb6/zfE88SKlC1Nj2ziUvc96Z379mHgQ==",
1357 | 			"devOptional": true,
1358 | 			"license": "Apache-2.0"
1359 | 		},
1360 | 		"node_modules/@prisma/fetch-engine": {
1361 | 			"version": "5.22.0",
1362 | 			"resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-5.22.0.tgz",
1363 | 			"integrity": "sha512-bkrD/Mc2fSvkQBV5EpoFcZ87AvOgDxbG99488a5cexp5Ccny+UM6MAe/UFkUC0wLYD9+9befNOqGiIJhhq+HbA==",
1364 | 			"devOptional": true,
1365 | 			"license": "Apache-2.0",
1366 | 			"dependencies": {
1367 | 				"@prisma/debug": "5.22.0",
1368 | 				"@prisma/engines-version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
1369 | 				"@prisma/get-platform": "5.22.0"
1370 | 			}
1371 | 		},
1372 | 		"node_modules/@prisma/get-platform": {
1373 | 			"version": "5.22.0",
1374 | 			"resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-5.22.0.tgz",
1375 | 			"integrity": "sha512-pHhpQdr1UPFpt+zFfnPazhulaZYCUqeIcPpJViYoq9R+D/yw4fjE+CtnsnKzPYm0ddUbeXUzjGVGIRVgPDCk4Q==",
1376 | 			"devOptional": true,
1377 | 			"license": "Apache-2.0",
1378 | 			"dependencies": {
1379 | 				"@prisma/debug": "5.22.0"
1380 | 			}
1381 | 		},
1382 | 		"node_modules/@rollup/plugin-commonjs": {
1383 | 			"version": "28.0.6",
1384 | 			"resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-28.0.6.tgz",
1385 | 			"integrity": "sha512-XSQB1K7FUU5QP+3lOQmVCE3I0FcbbNvmNT4VJSj93iUjayaARrTQeoRdiYQoftAJBLrR9t2agwAd3ekaTgHNlw==",
1386 | 			"license": "MIT",
1387 | 			"dependencies": {
1388 | 				"@rollup/pluginutils": "^5.0.1",
1389 | 				"commondir": "^1.0.1",
1390 | 				"estree-walker": "^2.0.2",
1391 | 				"fdir": "^6.2.0",
1392 | 				"is-reference": "1.2.1",
1393 | 				"magic-string": "^0.30.3",
1394 | 				"picomatch": "^4.0.2"
1395 | 			},
1396 | 			"engines": {
1397 | 				"node": ">=16.0.0 || 14 >= 14.17"
1398 | 			},
1399 | 			"peerDependencies": {
1400 | 				"rollup": "^2.68.0||^3.0.0||^4.0.0"
1401 | 			},
1402 | 			"peerDependenciesMeta": {
1403 | 				"rollup": {
1404 | 					"optional": true
1405 | 				}
1406 | 			}
1407 | 		},
1408 | 		"node_modules/@rollup/plugin-commonjs/node_modules/is-reference": {
1409 | 			"version": "1.2.1",
1410 | 			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-1.2.1.tgz",
1411 | 			"integrity": "sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==",
1412 | 			"license": "MIT",
1413 | 			"dependencies": {
1414 | 				"@types/estree": "*"
1415 | 			}
1416 | 		},
1417 | 		"node_modules/@rollup/plugin-json": {
1418 | 			"version": "6.1.0",
1419 | 			"resolved": "https://registry.npmjs.org/@rollup/plugin-json/-/plugin-json-6.1.0.tgz",
1420 | 			"integrity": "sha512-EGI2te5ENk1coGeADSIwZ7G2Q8CJS2sF120T7jLw4xFw9n7wIOXHo+kIYRAoVpJAN+kmqZSoO3Fp4JtoNF4ReA==",
1421 | 			"license": "MIT",
1422 | 			"dependencies": {
1423 | 				"@rollup/pluginutils": "^5.1.0"
1424 | 			},
1425 | 			"engines": {
1426 | 				"node": ">=14.0.0"
1427 | 			},
1428 | 			"peerDependencies": {
1429 | 				"rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
1430 | 			},
1431 | 			"peerDependenciesMeta": {
1432 | 				"rollup": {
1433 | 					"optional": true
1434 | 				}
1435 | 			}
1436 | 		},
1437 | 		"node_modules/@rollup/plugin-node-resolve": {
1438 | 			"version": "16.0.1",
1439 | 			"resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-16.0.1.tgz",
1440 | 			"integrity": "sha512-tk5YCxJWIG81umIvNkSod2qK5KyQW19qcBF/B78n1bjtOON6gzKoVeSzAE8yHCZEDmqkHKkxplExA8KzdJLJpA==",
1441 | 			"license": "MIT",
1442 | 			"dependencies": {
1443 | 				"@rollup/pluginutils": "^5.0.1",
1444 | 				"@types/resolve": "1.20.2",
1445 | 				"deepmerge": "^4.2.2",
1446 | 				"is-module": "^1.0.0",
1447 | 				"resolve": "^1.22.1"
1448 | 			},
1449 | 			"engines": {
1450 | 				"node": ">=14.0.0"
1451 | 			},
1452 | 			"peerDependencies": {
1453 | 				"rollup": "^2.78.0||^3.0.0||^4.0.0"
1454 | 			},
1455 | 			"peerDependenciesMeta": {
1456 | 				"rollup": {
1457 | 					"optional": true
1458 | 				}
1459 | 			}
1460 | 		},
1461 | 		"node_modules/@rollup/pluginutils": {
1462 | 			"version": "5.2.0",
1463 | 			"resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.2.0.tgz",
1464 | 			"integrity": "sha512-qWJ2ZTbmumwiLFomfzTyt5Kng4hwPi9rwCYN4SHb6eaRU1KNO4ccxINHr/VhH4GgPlt1XfSTLX2LBTme8ne4Zw==",
1465 | 			"license": "MIT",
1466 | 			"dependencies": {
1467 | 				"@types/estree": "^1.0.0",
1468 | 				"estree-walker": "^2.0.2",
1469 | 				"picomatch": "^4.0.2"
1470 | 			},
1471 | 			"engines": {
1472 | 				"node": ">=14.0.0"
1473 | 			},
1474 | 			"peerDependencies": {
1475 | 				"rollup": "^1.20.0||^2.0.0||^3.0.0||^4.0.0"
1476 | 			},
1477 | 			"peerDependenciesMeta": {
1478 | 				"rollup": {
1479 | 					"optional": true
1480 | 				}
1481 | 			}
1482 | 		},
1483 | 		"node_modules/@rollup/rollup-android-arm-eabi": {
1484 | 			"version": "4.48.0",
1485 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.48.0.tgz",
1486 | 			"integrity": "sha512-aVzKH922ogVAWkKiyKXorjYymz2084zrhrZRXtLrA5eEx5SO8Dj0c/4FpCHZyn7MKzhW2pW4tK28vVr+5oQ2xw==",
1487 | 			"cpu": [
1488 | 				"arm"
1489 | 			],
1490 | 			"license": "MIT",
1491 | 			"optional": true,
1492 | 			"os": [
1493 | 				"android"
1494 | 			]
1495 | 		},
1496 | 		"node_modules/@rollup/rollup-android-arm64": {
1497 | 			"version": "4.48.0",
1498 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.48.0.tgz",
1499 | 			"integrity": "sha512-diOdQuw43xTa1RddAFbhIA8toirSzFMcnIg8kvlzRbK26xqEnKJ/vqQnghTAajy2Dcy42v+GMPMo6jq67od+Dw==",
1500 | 			"cpu": [
1501 | 				"arm64"
1502 | 			],
1503 | 			"license": "MIT",
1504 | 			"optional": true,
1505 | 			"os": [
1506 | 				"android"
1507 | 			]
1508 | 		},
1509 | 		"node_modules/@rollup/rollup-darwin-arm64": {
1510 | 			"version": "4.48.0",
1511 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.48.0.tgz",
1512 | 			"integrity": "sha512-QhR2KA18fPlJWFefySJPDYZELaVqIUVnYgAOdtJ+B/uH96CFg2l1TQpX19XpUMWUqMyIiyY45wje8K6F4w4/CA==",
1513 | 			"cpu": [
1514 | 				"arm64"
1515 | 			],
1516 | 			"license": "MIT",
1517 | 			"optional": true,
1518 | 			"os": [
1519 | 				"darwin"
1520 | 			]
1521 | 		},
1522 | 		"node_modules/@rollup/rollup-darwin-x64": {
1523 | 			"version": "4.48.0",
1524 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.48.0.tgz",
1525 | 			"integrity": "sha512-Q9RMXnQVJ5S1SYpNSTwXDpoQLgJ/fbInWOyjbCnnqTElEyeNvLAB3QvG5xmMQMhFN74bB5ZZJYkKaFPcOG8sGg==",
1526 | 			"cpu": [
1527 | 				"x64"
1528 | 			],
1529 | 			"license": "MIT",
1530 | 			"optional": true,
1531 | 			"os": [
1532 | 				"darwin"
1533 | 			]
1534 | 		},
1535 | 		"node_modules/@rollup/rollup-freebsd-arm64": {
1536 | 			"version": "4.48.0",
1537 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.48.0.tgz",
1538 | 			"integrity": "sha512-3jzOhHWM8O8PSfyft+ghXZfBkZawQA0PUGtadKYxFqpcYlOYjTi06WsnYBsbMHLawr+4uWirLlbhcYLHDXR16w==",
1539 | 			"cpu": [
1540 | 				"arm64"
1541 | 			],
1542 | 			"license": "MIT",
1543 | 			"optional": true,
1544 | 			"os": [
1545 | 				"freebsd"
1546 | 			]
1547 | 		},
1548 | 		"node_modules/@rollup/rollup-freebsd-x64": {
1549 | 			"version": "4.48.0",
1550 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.48.0.tgz",
1551 | 			"integrity": "sha512-NcD5uVUmE73C/TPJqf78hInZmiSBsDpz3iD5MF/BuB+qzm4ooF2S1HfeTChj5K4AV3y19FFPgxonsxiEpy8v/A==",
1552 | 			"cpu": [
1553 | 				"x64"
1554 | 			],
1555 | 			"license": "MIT",
1556 | 			"optional": true,
1557 | 			"os": [
1558 | 				"freebsd"
1559 | 			]
1560 | 		},
1561 | 		"node_modules/@rollup/rollup-linux-arm-gnueabihf": {
1562 | 			"version": "4.48.0",
1563 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.48.0.tgz",
1564 | 			"integrity": "sha512-JWnrj8qZgLWRNHr7NbpdnrQ8kcg09EBBq8jVOjmtlB3c8C6IrynAJSMhMVGME4YfTJzIkJqvSUSVJRqkDnu/aA==",
1565 | 			"cpu": [
1566 | 				"arm"
1567 | 			],
1568 | 			"license": "MIT",
1569 | 			"optional": true,
1570 | 			"os": [
1571 | 				"linux"
1572 | 			]
1573 | 		},
1574 | 		"node_modules/@rollup/rollup-linux-arm-musleabihf": {
1575 | 			"version": "4.48.0",
1576 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.48.0.tgz",
1577 | 			"integrity": "sha512-9xu92F0TxuMH0tD6tG3+GtngwdgSf8Bnz+YcsPG91/r5Vgh5LNofO48jV55priA95p3c92FLmPM7CvsVlnSbGQ==",
1578 | 			"cpu": [
1579 | 				"arm"
1580 | 			],
1581 | 			"license": "MIT",
1582 | 			"optional": true,
1583 | 			"os": [
1584 | 				"linux"
1585 | 			]
1586 | 		},
1587 | 		"node_modules/@rollup/rollup-linux-arm64-gnu": {
1588 | 			"version": "4.48.0",
1589 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.48.0.tgz",
1590 | 			"integrity": "sha512-NLtvJB5YpWn7jlp1rJiY0s+G1Z1IVmkDuiywiqUhh96MIraC0n7XQc2SZ1CZz14shqkM+XN2UrfIo7JB6UufOA==",
1591 | 			"cpu": [
1592 | 				"arm64"
1593 | 			],
1594 | 			"license": "MIT",
1595 | 			"optional": true,
1596 | 			"os": [
1597 | 				"linux"
1598 | 			]
1599 | 		},
1600 | 		"node_modules/@rollup/rollup-linux-arm64-musl": {
1601 | 			"version": "4.48.0",
1602 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.48.0.tgz",
1603 | 			"integrity": "sha512-QJ4hCOnz2SXgCh+HmpvZkM+0NSGcZACyYS8DGbWn2PbmA0e5xUk4bIP8eqJyNXLtyB4gZ3/XyvKtQ1IFH671vQ==",
1604 | 			"cpu": [
1605 | 				"arm64"
1606 | 			],
1607 | 			"license": "MIT",
1608 | 			"optional": true,
1609 | 			"os": [
1610 | 				"linux"
1611 | 			]
1612 | 		},
1613 | 		"node_modules/@rollup/rollup-linux-loongarch64-gnu": {
1614 | 			"version": "4.48.0",
1615 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.48.0.tgz",
1616 | 			"integrity": "sha512-Pk0qlGJnhILdIC5zSKQnprFjrGmjfDM7TPZ0FKJxRkoo+kgMRAg4ps1VlTZf8u2vohSicLg7NP+cA5qE96PaFg==",
1617 | 			"cpu": [
1618 | 				"loong64"
1619 | 			],
1620 | 			"license": "MIT",
1621 | 			"optional": true,
1622 | 			"os": [
1623 | 				"linux"
1624 | 			]
1625 | 		},
1626 | 		"node_modules/@rollup/rollup-linux-ppc64-gnu": {
1627 | 			"version": "4.48.0",
1628 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.48.0.tgz",
1629 | 			"integrity": "sha512-/dNFc6rTpoOzgp5GKoYjT6uLo8okR/Chi2ECOmCZiS4oqh3mc95pThWma7Bgyk6/WTEvjDINpiBCuecPLOgBLQ==",
1630 | 			"cpu": [
1631 | 				"ppc64"
1632 | 			],
1633 | 			"license": "MIT",
1634 | 			"optional": true,
1635 | 			"os": [
1636 | 				"linux"
1637 | 			]
1638 | 		},
1639 | 		"node_modules/@rollup/rollup-linux-riscv64-gnu": {
1640 | 			"version": "4.48.0",
1641 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.48.0.tgz",
1642 | 			"integrity": "sha512-YBwXsvsFI8CVA4ej+bJF2d9uAeIiSkqKSPQNn0Wyh4eMDY4wxuSp71BauPjQNCKK2tD2/ksJ7uhJ8X/PVY9bHQ==",
1643 | 			"cpu": [
1644 | 				"riscv64"
1645 | 			],
1646 | 			"license": "MIT",
1647 | 			"optional": true,
1648 | 			"os": [
1649 | 				"linux"
1650 | 			]
1651 | 		},
1652 | 		"node_modules/@rollup/rollup-linux-riscv64-musl": {
1653 | 			"version": "4.48.0",
1654 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.48.0.tgz",
1655 | 			"integrity": "sha512-FI3Rr2aGAtl1aHzbkBIamsQyuauYtTF9SDUJ8n2wMXuuxwchC3QkumZa1TEXYIv/1AUp1a25Kwy6ONArvnyeVQ==",
1656 | 			"cpu": [
1657 | 				"riscv64"
1658 | 			],
1659 | 			"license": "MIT",
1660 | 			"optional": true,
1661 | 			"os": [
1662 | 				"linux"
1663 | 			]
1664 | 		},
1665 | 		"node_modules/@rollup/rollup-linux-s390x-gnu": {
1666 | 			"version": "4.48.0",
1667 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.48.0.tgz",
1668 | 			"integrity": "sha512-Dx7qH0/rvNNFmCcIRe1pyQ9/H0XO4v/f0SDoafwRYwc2J7bJZ5N4CHL/cdjamISZ5Cgnon6iazAVRFlxSoHQnQ==",
1669 | 			"cpu": [
1670 | 				"s390x"
1671 | 			],
1672 | 			"license": "MIT",
1673 | 			"optional": true,
1674 | 			"os": [
1675 | 				"linux"
1676 | 			]
1677 | 		},
1678 | 		"node_modules/@rollup/rollup-linux-x64-gnu": {
1679 | 			"version": "4.48.0",
1680 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.48.0.tgz",
1681 | 			"integrity": "sha512-GUdZKTeKBq9WmEBzvFYuC88yk26vT66lQV8D5+9TgkfbewhLaTHRNATyzpQwwbHIfJvDJ3N9WJ90wK/uR3cy3Q==",
1682 | 			"cpu": [
1683 | 				"x64"
1684 | 			],
1685 | 			"license": "MIT",
1686 | 			"optional": true,
1687 | 			"os": [
1688 | 				"linux"
1689 | 			]
1690 | 		},
1691 | 		"node_modules/@rollup/rollup-linux-x64-musl": {
1692 | 			"version": "4.48.0",
1693 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.48.0.tgz",
1694 | 			"integrity": "sha512-ao58Adz/v14MWpQgYAb4a4h3fdw73DrDGtaiF7Opds5wNyEQwtO6M9dBh89nke0yoZzzaegq6J/EXs7eBebG8A==",
1695 | 			"cpu": [
1696 | 				"x64"
1697 | 			],
1698 | 			"license": "MIT",
1699 | 			"optional": true,
1700 | 			"os": [
1701 | 				"linux"
1702 | 			]
1703 | 		},
1704 | 		"node_modules/@rollup/rollup-win32-arm64-msvc": {
1705 | 			"version": "4.48.0",
1706 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.48.0.tgz",
1707 | 			"integrity": "sha512-kpFno46bHtjZVdRIOxqaGeiABiToo2J+st7Yce+aiAoo1H0xPi2keyQIP04n2JjDVuxBN6bSz9R6RdTK5hIppw==",
1708 | 			"cpu": [
1709 | 				"arm64"
1710 | 			],
1711 | 			"license": "MIT",
1712 | 			"optional": true,
1713 | 			"os": [
1714 | 				"win32"
1715 | 			]
1716 | 		},
1717 | 		"node_modules/@rollup/rollup-win32-ia32-msvc": {
1718 | 			"version": "4.48.0",
1719 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.48.0.tgz",
1720 | 			"integrity": "sha512-rFYrk4lLk9YUTIeihnQMiwMr6gDhGGSbWThPEDfBoU/HdAtOzPXeexKi7yU8jO+LWRKnmqPN9NviHQf6GDwBcQ==",
1721 | 			"cpu": [
1722 | 				"ia32"
1723 | 			],
1724 | 			"license": "MIT",
1725 | 			"optional": true,
1726 | 			"os": [
1727 | 				"win32"
1728 | 			]
1729 | 		},
1730 | 		"node_modules/@rollup/rollup-win32-x64-msvc": {
1731 | 			"version": "4.48.0",
1732 | 			"resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.48.0.tgz",
1733 | 			"integrity": "sha512-sq0hHLTgdtwOPDB5SJOuaoHyiP1qSwg+71TQWk8iDS04bW1wIE0oQ6otPiRj2ZvLYNASLMaTp8QRGUVZ+5OL5A==",
1734 | 			"cpu": [
1735 | 				"x64"
1736 | 			],
1737 | 			"license": "MIT",
1738 | 			"optional": true,
1739 | 			"os": [
1740 | 				"win32"
1741 | 			]
1742 | 		},
1743 | 		"node_modules/@scure/base": {
1744 | 			"version": "1.2.6",
1745 | 			"resolved": "https://registry.npmjs.org/@scure/base/-/base-1.2.6.tgz",
1746 | 			"integrity": "sha512-g/nm5FgUa//MCj1gV09zTJTaM6KBAHqLN907YVQqf7zC49+DcO4B1so4ZX07Ef10Twr6nuqYEH9GEggFXA4Fmg==",
1747 | 			"license": "MIT",
1748 | 			"funding": {
1749 | 				"url": "https://paulmillr.com/funding/"
1750 | 			}
1751 | 		},
1752 | 		"node_modules/@scure/bip32": {
1753 | 			"version": "1.7.0",
1754 | 			"resolved": "https://registry.npmjs.org/@scure/bip32/-/bip32-1.7.0.tgz",
1755 | 			"integrity": "sha512-E4FFX/N3f4B80AKWp5dP6ow+flD1LQZo/w8UnLGYZO674jS6YnYeepycOOksv+vLPSpgN35wgKgy+ybfTb2SMw==",
1756 | 			"license": "MIT",
1757 | 			"dependencies": {
1758 | 				"@noble/curves": "~1.9.0",
1759 | 				"@noble/hashes": "~1.8.0",
1760 | 				"@scure/base": "~1.2.5"
1761 | 			},
1762 | 			"funding": {
1763 | 				"url": "https://paulmillr.com/funding/"
1764 | 			}
1765 | 		},
1766 | 		"node_modules/@scure/bip39": {
1767 | 			"version": "1.6.0",
1768 | 			"resolved": "https://registry.npmjs.org/@scure/bip39/-/bip39-1.6.0.tgz",
1769 | 			"integrity": "sha512-+lF0BbLiJNwVlev4eKelw1WWLaiKXw7sSl8T6FvBlWkdX+94aGJ4o8XjUdlyhTCjd8c+B3KT3JfS8P0bLRNU6A==",
1770 | 			"license": "MIT",
1771 | 			"dependencies": {
1772 | 				"@noble/hashes": "~1.8.0",
1773 | 				"@scure/base": "~1.2.5"
1774 | 			},
1775 | 			"funding": {
1776 | 				"url": "https://paulmillr.com/funding/"
1777 | 			}
1778 | 		},
1779 | 		"node_modules/@solana/buffer-layout": {
1780 | 			"version": "4.0.1",
1781 | 			"resolved": "https://registry.npmjs.org/@solana/buffer-layout/-/buffer-layout-4.0.1.tgz",
1782 | 			"integrity": "sha512-E1ImOIAD1tBZFRdjeM4/pzTiTApC0AOBGwyAMS4fwIodCWArzJ3DWdoh8cKxeFM2fElkxBh2Aqts1BPC373rHA==",
1783 | 			"license": "MIT",
1784 | 			"dependencies": {
1785 | 				"buffer": "~6.0.3"
1786 | 			},
1787 | 			"engines": {
1788 | 				"node": ">=5.10"
1789 | 			}
1790 | 		},
1791 | 		"node_modules/@solana/codecs-core": {
1792 | 			"version": "2.3.0",
1793 | 			"resolved": "https://registry.npmjs.org/@solana/codecs-core/-/codecs-core-2.3.0.tgz",
1794 | 			"integrity": "sha512-oG+VZzN6YhBHIoSKgS5ESM9VIGzhWjEHEGNPSibiDTxFhsFWxNaz8LbMDPjBUE69r9wmdGLkrQ+wVPbnJcZPvw==",
1795 | 			"license": "MIT",
1796 | 			"dependencies": {
1797 | 				"@solana/errors": "2.3.0"
1798 | 			},
1799 | 			"engines": {
1800 | 				"node": ">=20.18.0"
1801 | 			},
1802 | 			"peerDependencies": {
1803 | 				"typescript": ">=5.3.3"
1804 | 			}
1805 | 		},
1806 | 		"node_modules/@solana/codecs-numbers": {
1807 | 			"version": "2.3.0",
1808 | 			"resolved": "https://registry.npmjs.org/@solana/codecs-numbers/-/codecs-numbers-2.3.0.tgz",
1809 | 			"integrity": "sha512-jFvvwKJKffvG7Iz9dmN51OGB7JBcy2CJ6Xf3NqD/VP90xak66m/Lg48T01u5IQ/hc15mChVHiBm+HHuOFDUrQg==",
1810 | 			"license": "MIT",
1811 | 			"dependencies": {
1812 | 				"@solana/codecs-core": "2.3.0",
1813 | 				"@solana/errors": "2.3.0"
1814 | 			},
1815 | 			"engines": {
1816 | 				"node": ">=20.18.0"
1817 | 			},
1818 | 			"peerDependencies": {
1819 | 				"typescript": ">=5.3.3"
1820 | 			}
1821 | 		},
1822 | 		"node_modules/@solana/errors": {
1823 | 			"version": "2.3.0",
1824 | 			"resolved": "https://registry.npmjs.org/@solana/errors/-/errors-2.3.0.tgz",
1825 | 			"integrity": "sha512-66RI9MAbwYV0UtP7kGcTBVLxJgUxoZGm8Fbc0ah+lGiAw17Gugco6+9GrJCV83VyF2mDWyYnYM9qdI3yjgpnaQ==",
1826 | 			"license": "MIT",
1827 | 			"dependencies": {
1828 | 				"chalk": "^5.4.1",
1829 | 				"commander": "^14.0.0"
1830 | 			},
1831 | 			"bin": {
1832 | 				"errors": "bin/cli.mjs"
1833 | 			},
1834 | 			"engines": {
1835 | 				"node": ">=20.18.0"
1836 | 			},
1837 | 			"peerDependencies": {
1838 | 				"typescript": ">=5.3.3"
1839 | 			}
1840 | 		},
1841 | 		"node_modules/@solana/errors/node_modules/commander": {
1842 | 			"version": "14.0.0",
1843 | 			"resolved": "https://registry.npmjs.org/commander/-/commander-14.0.0.tgz",
1844 | 			"integrity": "sha512-2uM9rYjPvyq39NwLRqaiLtWHyDC1FvryJDa2ATTVims5YAS4PupsEQsDvP14FqhFr0P49CYDugi59xaxJlTXRA==",
1845 | 			"license": "MIT",
1846 | 			"engines": {
1847 | 				"node": ">=20"
1848 | 			}
1849 | 		},
1850 | 		"node_modules/@solana/web3.js": {
1851 | 			"version": "1.98.4",
1852 | 			"resolved": "https://registry.npmjs.org/@solana/web3.js/-/web3.js-1.98.4.tgz",
1853 | 			"integrity": "sha512-vv9lfnvjUsRiq//+j5pBdXig0IQdtzA0BRZ3bXEP4KaIyF1CcaydWqgyzQgfZMNIsWNWmG+AUHwPy4AHOD6gpw==",
1854 | 			"license": "MIT",
1855 | 			"dependencies": {
1856 | 				"@babel/runtime": "^7.25.0",
1857 | 				"@noble/curves": "^1.4.2",
1858 | 				"@noble/hashes": "^1.4.0",
1859 | 				"@solana/buffer-layout": "^4.0.1",
1860 | 				"@solana/codecs-numbers": "^2.1.0",
1861 | 				"agentkeepalive": "^4.5.0",
1862 | 				"bn.js": "^5.2.1",
1863 | 				"borsh": "^0.7.0",
1864 | 				"bs58": "^4.0.1",
1865 | 				"buffer": "6.0.3",
1866 | 				"fast-stable-stringify": "^1.0.0",
1867 | 				"jayson": "^4.1.1",
1868 | 				"node-fetch": "^2.7.0",
1869 | 				"rpc-websockets": "^9.0.2",
1870 | 				"superstruct": "^2.0.2"
1871 | 			}
1872 | 		},
1873 | 		"node_modules/@standard-schema/spec": {
1874 | 			"version": "1.0.0",
1875 | 			"resolved": "https://registry.npmjs.org/@standard-schema/spec/-/spec-1.0.0.tgz",
1876 | 			"integrity": "sha512-m2bOd0f2RT9k8QJx1JN85cZYyH1RqFBdlwtkSlf4tBDYLCiiZnv1fIIwacK6cqwXavOydf0NPToMQgpKq+dVlA==",
1877 | 			"license": "MIT"
1878 | 		},
1879 | 		"node_modules/@sveltejs/acorn-typescript": {
1880 | 			"version": "1.0.5",
1881 | 			"resolved": "https://registry.npmjs.org/@sveltejs/acorn-typescript/-/acorn-typescript-1.0.5.tgz",
1882 | 			"integrity": "sha512-IwQk4yfwLdibDlrXVE04jTZYlLnwsTT2PIOQQGNLWfjavGifnk1JD1LcZjZaBTRcxZu2FfPfNLOE04DSu9lqtQ==",
1883 | 			"license": "MIT",
1884 | 			"peerDependencies": {
1885 | 				"acorn": "^8.9.0"
1886 | 			}
1887 | 		},
1888 | 		"node_modules/@sveltejs/adapter-auto": {
1889 | 			"version": "6.1.0",
1890 | 			"resolved": "https://registry.npmjs.org/@sveltejs/adapter-auto/-/adapter-auto-6.1.0.tgz",
1891 | 			"integrity": "sha512-shOuLI5D2s+0zTv2ab5M5PqfknXqWbKi+0UwB9yLTRIdzsK1R93JOO8jNhIYSHdW+IYXIYnLniu+JZqXs7h9Wg==",
1892 | 			"dev": true,
1893 | 			"license": "MIT",
1894 | 			"peerDependencies": {
1895 | 				"@sveltejs/kit": "^2.0.0"
1896 | 			}
1897 | 		},
1898 | 		"node_modules/@sveltejs/adapter-node": {
1899 | 			"version": "5.3.1",
1900 | 			"resolved": "https://registry.npmjs.org/@sveltejs/adapter-node/-/adapter-node-5.3.1.tgz",
1901 | 			"integrity": "sha512-PSoGfa9atkmuixe7jvuS2tsUohVZF20So87ASzfMRGTTNqEd8s48KAodlv3CzHwq9XO/BM8KsQLpqqsr/6dmuA==",
1902 | 			"license": "MIT",
1903 | 			"dependencies": {
1904 | 				"@rollup/plugin-commonjs": "^28.0.1",
1905 | 				"@rollup/plugin-json": "^6.1.0",
1906 | 				"@rollup/plugin-node-resolve": "^16.0.0",
1907 | 				"rollup": "^4.9.5"
1908 | 			},
1909 | 			"peerDependencies": {
1910 | 				"@sveltejs/kit": "^2.4.0"
1911 | 			}
1912 | 		},
1913 | 		"node_modules/@sveltejs/kit": {
1914 | 			"version": "2.36.1",
1915 | 			"resolved": "https://registry.npmjs.org/@sveltejs/kit/-/kit-2.36.1.tgz",
1916 | 			"integrity": "sha512-dldNCtSIpaGxQMEfHaUxSPH/k3uU28pTZwtKzfkn8fqpOjWufKlMBeIL7FJ/s93dOrhEq41zaQYkXh+XTgEgVw==",
1917 | 			"license": "MIT",
1918 | 			"dependencies": {
1919 | 				"@standard-schema/spec": "^1.0.0",
1920 | 				"@sveltejs/acorn-typescript": "^1.0.5",
1921 | 				"@types/cookie": "^0.6.0",
1922 | 				"acorn": "^8.14.1",
1923 | 				"cookie": "^0.6.0",
1924 | 				"devalue": "^5.1.0",
1925 | 				"esm-env": "^1.2.2",
1926 | 				"kleur": "^4.1.5",
1927 | 				"magic-string": "^0.30.5",
1928 | 				"mrmime": "^2.0.0",
1929 | 				"sade": "^1.8.1",
1930 | 				"set-cookie-parser": "^2.6.0",
1931 | 				"sirv": "^3.0.0"
1932 | 			},
1933 | 			"bin": {
1934 | 				"svelte-kit": "svelte-kit.js"
1935 | 			},
1936 | 			"engines": {
1937 | 				"node": ">=18.13"
1938 | 			},
1939 | 			"peerDependencies": {
1940 | 				"@opentelemetry/api": "^1.0.0",
1941 | 				"@sveltejs/vite-plugin-svelte": "^3.0.0 || ^4.0.0-next.1 || ^5.0.0 || ^6.0.0-next.0",
1942 | 				"svelte": "^4.0.0 || ^5.0.0-next.0",
1943 | 				"vite": "^5.0.3 || ^6.0.0 || ^7.0.0-beta.0"
1944 | 			},
1945 | 			"peerDependenciesMeta": {
1946 | 				"@opentelemetry/api": {
1947 | 					"optional": true
1948 | 				}
1949 | 			}
1950 | 		},
1951 | 		"node_modules/@sveltejs/vite-plugin-svelte": {
1952 | 			"version": "6.1.3",
1953 | 			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte/-/vite-plugin-svelte-6.1.3.tgz",
1954 | 			"integrity": "sha512-3pppgIeIZs6nrQLazzKcdnTJ2IWiui/UucEPXKyFG35TKaHQrfkWBnv6hyJcLxFuR90t+LaoecrqTs8rJKWfSQ==",
1955 | 			"license": "MIT",
1956 | 			"dependencies": {
1957 | 				"@sveltejs/vite-plugin-svelte-inspector": "^5.0.0",
1958 | 				"debug": "^4.4.1",
1959 | 				"deepmerge": "^4.3.1",
1960 | 				"kleur": "^4.1.5",
1961 | 				"magic-string": "^0.30.17",
1962 | 				"vitefu": "^1.1.1"
1963 | 			},
1964 | 			"engines": {
1965 | 				"node": "^20.19 || ^22.12 || >=24"
1966 | 			},
1967 | 			"peerDependencies": {
1968 | 				"svelte": "^5.0.0",
1969 | 				"vite": "^6.3.0 || ^7.0.0"
1970 | 			}
1971 | 		},
1972 | 		"node_modules/@sveltejs/vite-plugin-svelte-inspector": {
1973 | 			"version": "5.0.1",
1974 | 			"resolved": "https://registry.npmjs.org/@sveltejs/vite-plugin-svelte-inspector/-/vite-plugin-svelte-inspector-5.0.1.tgz",
1975 | 			"integrity": "sha512-ubWshlMk4bc8mkwWbg6vNvCeT7lGQojE3ijDh3QTR6Zr/R+GXxsGbyH4PExEPpiFmqPhYiVSVmHBjUcVc1JIrA==",
1976 | 			"license": "MIT",
1977 | 			"dependencies": {
1978 | 				"debug": "^4.4.1"
1979 | 			},
1980 | 			"engines": {
1981 | 				"node": "^20.19 || ^22.12 || >=24"
1982 | 			},
1983 | 			"peerDependencies": {
1984 | 				"@sveltejs/vite-plugin-svelte": "^6.0.0-next.0",
1985 | 				"svelte": "^5.0.0",
1986 | 				"vite": "^6.3.0 || ^7.0.0"
1987 | 			}
1988 | 		},
1989 | 		"node_modules/@swc/helpers": {
1990 | 			"version": "0.5.17",
1991 | 			"resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.17.tgz",
1992 | 			"integrity": "sha512-5IKx/Y13RsYd+sauPb2x+U/xZikHjolzfuDgTAl/Tdf3Q8rslRvC19NKDLgAJQ6wsqADk10ntlv08nPFw/gO/A==",
1993 | 			"license": "Apache-2.0",
1994 | 			"dependencies": {
1995 | 				"tslib": "^2.8.0"
1996 | 			}
1997 | 		},
1998 | 		"node_modules/@tailwindcss/typography": {
1999 | 			"version": "0.5.16",
2000 | 			"resolved": "https://registry.npmjs.org/@tailwindcss/typography/-/typography-0.5.16.tgz",
2001 | 			"integrity": "sha512-0wDLwCVF5V3x3b1SGXPCDcdsbDHMBe+lkFzBRaHeLvNi+nrrnZ1lA18u+OTWO8iSWU2GxUOCvlXtDuqftc1oiA==",
2002 | 			"dev": true,
2003 | 			"license": "MIT",
2004 | 			"dependencies": {
2005 | 				"lodash.castarray": "^4.4.0",
2006 | 				"lodash.isplainobject": "^4.0.6",
2007 | 				"lodash.merge": "^4.6.2",
2008 | 				"postcss-selector-parser": "6.0.10"
2009 | 			},
2010 | 			"peerDependencies": {
2011 | 				"tailwindcss": ">=3.0.0 || insiders || >=4.0.0-alpha.20 || >=4.0.0-beta.1"
2012 | 			}
2013 | 		},
2014 | 		"node_modules/@types/connect": {
2015 | 			"version": "3.4.38",
2016 | 			"resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
2017 | 			"integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
2018 | 			"license": "MIT",
2019 | 			"dependencies": {
2020 | 				"@types/node": "*"
2021 | 			}
2022 | 		},
2023 | 		"node_modules/@types/cookie": {
2024 | 			"version": "0.6.0",
2025 | 			"resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.6.0.tgz",
2026 | 			"integrity": "sha512-4Kh9a6B2bQciAhf7FSuMRRkUWecJgJu9nPnx3yzpsfXX/c50REIqpHY4C82bXP90qrLtXtkDxTZosYO3UpOwlA==",
2027 | 			"license": "MIT"
2028 | 		},
2029 | 		"node_modules/@types/estree": {
2030 | 			"version": "1.0.8",
2031 | 			"resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
2032 | 			"integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
2033 | 			"license": "MIT"
2034 | 		},
2035 | 		"node_modules/@types/node": {
2036 | 			"version": "24.3.0",
2037 | 			"resolved": "https://registry.npmjs.org/@types/node/-/node-24.3.0.tgz",
2038 | 			"integrity": "sha512-aPTXCrfwnDLj4VvXrm+UUCQjNEvJgNA8s5F1cvwQU+3KNltTOkBm1j30uNLyqqPNe7gE3KFzImYoZEfLhp4Yow==",
2039 | 			"license": "MIT",
2040 | 			"dependencies": {
2041 | 				"undici-types": "~7.10.0"
2042 | 			}
2043 | 		},
2044 | 		"node_modules/@types/resolve": {
2045 | 			"version": "1.20.2",
2046 | 			"resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.20.2.tgz",
2047 | 			"integrity": "sha512-60BCwRFOZCQhDncwQdxxeOEEkbc5dIMccYLwbxsS4TUNeVECQ/pBJ0j09mrHOl/JJvpRPGwO9SvE4nR2Nb/a4Q==",
2048 | 			"license": "MIT"
2049 | 		},
2050 | 		"node_modules/@types/uuid": {
2051 | 			"version": "8.3.4",
2052 | 			"resolved": "https://registry.npmjs.org/@types/uuid/-/uuid-8.3.4.tgz",
2053 | 			"integrity": "sha512-c/I8ZRb51j+pYGAu5CrFMRxqZ2ke4y2grEBO5AUjgSkSk+qT2Ea+OdWElz/OiMf5MNpn2b17kuVBwZLQJXzihw==",
2054 | 			"license": "MIT"
2055 | 		},
2056 | 		"node_modules/@types/ws": {
2057 | 			"version": "7.4.7",
2058 | 			"resolved": "https://registry.npmjs.org/@types/ws/-/ws-7.4.7.tgz",
2059 | 			"integrity": "sha512-JQbbmxZTZehdc2iszGKs5oC3NFnjeay7mtAWrdt7qNtAVK0g19muApzAy4bm9byz79xa2ZnO/BOBC2R8RC5Lww==",
2060 | 			"license": "MIT",
2061 | 			"dependencies": {
2062 | 				"@types/node": "*"
2063 | 			}
2064 | 		},
2065 | 		"node_modules/abitype": {
2066 | 			"version": "1.0.8",
2067 | 			"resolved": "https://registry.npmjs.org/abitype/-/abitype-1.0.8.tgz",
2068 | 			"integrity": "sha512-ZeiI6h3GnW06uYDLx0etQtX/p8E24UaHHBj57RSjK7YBFe7iuVn07EDpOeP451D06sF27VOz9JJPlIKJmXgkEg==",
2069 | 			"license": "MIT",
2070 | 			"funding": {
2071 | 				"url": "https://github.com/sponsors/wevm"
2072 | 			},
2073 | 			"peerDependencies": {
2074 | 				"typescript": ">=5.0.4",
2075 | 				"zod": "^3 >=3.22.0"
2076 | 			},
2077 | 			"peerDependenciesMeta": {
2078 | 				"typescript": {
2079 | 					"optional": true
2080 | 				},
2081 | 				"zod": {
2082 | 					"optional": true
2083 | 				}
2084 | 			}
2085 | 		},
2086 | 		"node_modules/acorn": {
2087 | 			"version": "8.15.0",
2088 | 			"resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
2089 | 			"integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
2090 | 			"license": "MIT",
2091 | 			"bin": {
2092 | 				"acorn": "bin/acorn"
2093 | 			},
2094 | 			"engines": {
2095 | 				"node": ">=0.4.0"
2096 | 			}
2097 | 		},
2098 | 		"node_modules/aes-js": {
2099 | 			"version": "3.0.0",
2100 | 			"resolved": "https://registry.npmjs.org/aes-js/-/aes-js-3.0.0.tgz",
2101 | 			"integrity": "sha512-H7wUZRn8WpTq9jocdxQ2c8x2sKo9ZVmzfRE13GiNJXfp7NcKYEdvl3vspKjXox6RIG2VtaRe4JFvxG4rqp2Zuw==",
2102 | 			"license": "MIT"
2103 | 		},
2104 | 		"node_modules/agentkeepalive": {
2105 | 			"version": "4.6.0",
2106 | 			"resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
2107 | 			"integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
2108 | 			"license": "MIT",
2109 | 			"dependencies": {
2110 | 				"humanize-ms": "^1.2.1"
2111 | 			},
2112 | 			"engines": {
2113 | 				"node": ">= 8.0.0"
2114 | 			}
2115 | 		},
2116 | 		"node_modules/alchemy-sdk": {
2117 | 			"version": "3.6.3",
2118 | 			"resolved": "https://registry.npmjs.org/alchemy-sdk/-/alchemy-sdk-3.6.3.tgz",
2119 | 			"integrity": "sha512-AHSJGxJf3r8blvp97RatmiyBFTGtWH9pWDmdsv8mngdANuLvxRLhTU5Abf1lX2u6JzE7ulgG8/x0BsMLAEmAjA==",
2120 | 			"license": "MIT",
2121 | 			"dependencies": {
2122 | 				"@ethersproject/abi": "^5.7.0",
2123 | 				"@ethersproject/abstract-provider": "^5.7.0",
2124 | 				"@ethersproject/bignumber": "^5.7.0",
2125 | 				"@ethersproject/bytes": "^5.7.0",
2126 | 				"@ethersproject/contracts": "^5.7.0",
2127 | 				"@ethersproject/hash": "^5.7.0",
2128 | 				"@ethersproject/networks": "^5.7.0",
2129 | 				"@ethersproject/providers": "^5.7.0",
2130 | 				"@ethersproject/units": "^5.7.0",
2131 | 				"@ethersproject/wallet": "^5.7.0",
2132 | 				"@ethersproject/web": "^5.7.0",
2133 | 				"@solana/web3.js": "^1.87.6",
2134 | 				"axios": "^1.7.4",
2135 | 				"sturdy-websocket": "^0.2.1",
2136 | 				"websocket": "^1.0.34"
2137 | 			}
2138 | 		},
2139 | 		"node_modules/ansi-regex": {
2140 | 			"version": "6.2.0",
2141 | 			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.0.tgz",
2142 | 			"integrity": "sha512-TKY5pyBkHyADOPYlRT9Lx6F544mPl0vS5Ew7BJ45hA08Q+t3GjbueLliBWN3sMICk6+y7HdyxSzC4bWS8baBdg==",
2143 | 			"license": "MIT",
2144 | 			"engines": {
2145 | 				"node": ">=12"
2146 | 			},
2147 | 			"funding": {
2148 | 				"url": "https://github.com/chalk/ansi-regex?sponsor=1"
2149 | 			}
2150 | 		},
2151 | 		"node_modules/ansi-styles": {
2152 | 			"version": "6.2.1",
2153 | 			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
2154 | 			"integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
2155 | 			"license": "MIT",
2156 | 			"engines": {
2157 | 				"node": ">=12"
2158 | 			},
2159 | 			"funding": {
2160 | 				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
2161 | 			}
2162 | 		},
2163 | 		"node_modules/any-promise": {
2164 | 			"version": "1.3.0",
2165 | 			"resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
2166 | 			"integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
2167 | 			"license": "MIT"
2168 | 		},
2169 | 		"node_modules/anymatch": {
2170 | 			"version": "3.1.3",
2171 | 			"resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
2172 | 			"integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
2173 | 			"license": "ISC",
2174 | 			"dependencies": {
2175 | 				"normalize-path": "^3.0.0",
2176 | 				"picomatch": "^2.0.4"
2177 | 			},
2178 | 			"engines": {
2179 | 				"node": ">= 8"
2180 | 			}
2181 | 		},
2182 | 		"node_modules/anymatch/node_modules/picomatch": {
2183 | 			"version": "2.3.1",
2184 | 			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
2185 | 			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
2186 | 			"license": "MIT",
2187 | 			"engines": {
2188 | 				"node": ">=8.6"
2189 | 			},
2190 | 			"funding": {
2191 | 				"url": "https://github.com/sponsors/jonschlinkert"
2192 | 			}
2193 | 		},
2194 | 		"node_modules/arg": {
2195 | 			"version": "5.0.2",
2196 | 			"resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
2197 | 			"integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
2198 | 			"license": "MIT"
2199 | 		},
2200 | 		"node_modules/aria-query": {
2201 | 			"version": "5.3.2",
2202 | 			"resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
2203 | 			"integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
2204 | 			"license": "Apache-2.0",
2205 | 			"engines": {
2206 | 				"node": ">= 0.4"
2207 | 			}
2208 | 		},
2209 | 		"node_modules/asynckit": {
2210 | 			"version": "0.4.0",
2211 | 			"resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
2212 | 			"integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
2213 | 			"license": "MIT"
2214 | 		},
2215 | 		"node_modules/autoprefixer": {
2216 | 			"version": "10.4.21",
2217 | 			"resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
2218 | 			"integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
2219 | 			"funding": [
2220 | 				{
2221 | 					"type": "opencollective",
2222 | 					"url": "https://opencollective.com/postcss/"
2223 | 				},
2224 | 				{
2225 | 					"type": "tidelift",
2226 | 					"url": "https://tidelift.com/funding/github/npm/autoprefixer"
2227 | 				},
2228 | 				{
2229 | 					"type": "github",
2230 | 					"url": "https://github.com/sponsors/ai"
2231 | 				}
2232 | 			],
2233 | 			"license": "MIT",
2234 | 			"dependencies": {
2235 | 				"browserslist": "^4.24.4",
2236 | 				"caniuse-lite": "^1.0.30001702",
2237 | 				"fraction.js": "^4.3.7",
2238 | 				"normalize-range": "^0.1.2",
2239 | 				"picocolors": "^1.1.1",
2240 | 				"postcss-value-parser": "^4.2.0"
2241 | 			},
2242 | 			"bin": {
2243 | 				"autoprefixer": "bin/autoprefixer"
2244 | 			},
2245 | 			"engines": {
2246 | 				"node": "^10 || ^12 || >=14"
2247 | 			},
2248 | 			"peerDependencies": {
2249 | 				"postcss": "^8.1.0"
2250 | 			}
2251 | 		},
2252 | 		"node_modules/axios": {
2253 | 			"version": "1.11.0",
2254 | 			"resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
2255 | 			"integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
2256 | 			"license": "MIT",
2257 | 			"dependencies": {
2258 | 				"follow-redirects": "^1.15.6",
2259 | 				"form-data": "^4.0.4",
2260 | 				"proxy-from-env": "^1.1.0"
2261 | 			}
2262 | 		},
2263 | 		"node_modules/axobject-query": {
2264 | 			"version": "4.1.0",
2265 | 			"resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
2266 | 			"integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
2267 | 			"license": "Apache-2.0",
2268 | 			"engines": {
2269 | 				"node": ">= 0.4"
2270 | 			}
2271 | 		},
2272 | 		"node_modules/balanced-match": {
2273 | 			"version": "1.0.2",
2274 | 			"resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
2275 | 			"integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
2276 | 			"license": "MIT"
2277 | 		},
2278 | 		"node_modules/base-x": {
2279 | 			"version": "3.0.11",
2280 | 			"resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.11.tgz",
2281 | 			"integrity": "sha512-xz7wQ8xDhdyP7tQxwdteLYeFfS68tSMNCZ/Y37WJ4bhGfKPpqEIlmIyueQHqOyoPhE6xNUqjzRr8ra0eF9VRvA==",
2282 | 			"license": "MIT",
2283 | 			"dependencies": {
2284 | 				"safe-buffer": "^5.0.1"
2285 | 			}
2286 | 		},
2287 | 		"node_modules/base64-js": {
2288 | 			"version": "1.5.1",
2289 | 			"resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
2290 | 			"integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
2291 | 			"funding": [
2292 | 				{
2293 | 					"type": "github",
2294 | 					"url": "https://github.com/sponsors/feross"
2295 | 				},
2296 | 				{
2297 | 					"type": "patreon",
2298 | 					"url": "https://www.patreon.com/feross"
2299 | 				},
2300 | 				{
2301 | 					"type": "consulting",
2302 | 					"url": "https://feross.org/support"
2303 | 				}
2304 | 			],
2305 | 			"license": "MIT"
2306 | 		},
2307 | 		"node_modules/bech32": {
2308 | 			"version": "1.1.4",
2309 | 			"resolved": "https://registry.npmjs.org/bech32/-/bech32-1.1.4.tgz",
2310 | 			"integrity": "sha512-s0IrSOzLlbvX7yp4WBfPITzpAU8sqQcpsmwXDiKwrG4r491vwCO/XpejasRNl0piBMe/DvP4Tz0mIS/X1DPJBQ==",
2311 | 			"license": "MIT"
2312 | 		},
2313 | 		"node_modules/binary-extensions": {
2314 | 			"version": "2.3.0",
2315 | 			"resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
2316 | 			"integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
2317 | 			"license": "MIT",
2318 | 			"engines": {
2319 | 				"node": ">=8"
2320 | 			},
2321 | 			"funding": {
2322 | 				"url": "https://github.com/sponsors/sindresorhus"
2323 | 			}
2324 | 		},
2325 | 		"node_modules/bn.js": {
2326 | 			"version": "5.2.2",
2327 | 			"resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.2.tgz",
2328 | 			"integrity": "sha512-v2YAxEmKaBLahNwE1mjp4WON6huMNeuDvagFZW+ASCuA/ku0bXR9hSMw0XpiqMoA3+rmnyck/tPRSFQkoC9Cuw==",
2329 | 			"license": "MIT"
2330 | 		},
2331 | 		"node_modules/boolbase": {
2332 | 			"version": "1.0.0",
2333 | 			"resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
2334 | 			"integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
2335 | 			"license": "ISC"
2336 | 		},
2337 | 		"node_modules/borsh": {
2338 | 			"version": "0.7.0",
2339 | 			"resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
2340 | 			"integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
2341 | 			"license": "Apache-2.0",
2342 | 			"dependencies": {
2343 | 				"bn.js": "^5.2.0",
2344 | 				"bs58": "^4.0.0",
2345 | 				"text-encoding-utf-8": "^1.0.2"
2346 | 			}
2347 | 		},
2348 | 		"node_modules/brace-expansion": {
2349 | 			"version": "2.0.2",
2350 | 			"resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
2351 | 			"integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
2352 | 			"license": "MIT",
2353 | 			"dependencies": {
2354 | 				"balanced-match": "^1.0.0"
2355 | 			}
2356 | 		},
2357 | 		"node_modules/braces": {
2358 | 			"version": "3.0.3",
2359 | 			"resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
2360 | 			"integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
2361 | 			"license": "MIT",
2362 | 			"dependencies": {
2363 | 				"fill-range": "^7.1.1"
2364 | 			},
2365 | 			"engines": {
2366 | 				"node": ">=8"
2367 | 			}
2368 | 		},
2369 | 		"node_modules/brorand": {
2370 | 			"version": "1.1.0",
2371 | 			"resolved": "https://registry.npmjs.org/brorand/-/brorand-1.1.0.tgz",
2372 | 			"integrity": "sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==",
2373 | 			"license": "MIT"
2374 | 		},
2375 | 		"node_modules/browserslist": {
2376 | 			"version": "4.25.3",
2377 | 			"resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.3.tgz",
2378 | 			"integrity": "sha512-cDGv1kkDI4/0e5yON9yM5G/0A5u8sf5TnmdX5C9qHzI9PPu++sQ9zjm1k9NiOrf3riY4OkK0zSGqfvJyJsgCBQ==",
2379 | 			"funding": [
2380 | 				{
2381 | 					"type": "opencollective",
2382 | 					"url": "https://opencollective.com/browserslist"
2383 | 				},
2384 | 				{
2385 | 					"type": "tidelift",
2386 | 					"url": "https://tidelift.com/funding/github/npm/browserslist"
2387 | 				},
2388 | 				{
2389 | 					"type": "github",
2390 | 					"url": "https://github.com/sponsors/ai"
2391 | 				}
2392 | 			],
2393 | 			"license": "MIT",
2394 | 			"dependencies": {
2395 | 				"caniuse-lite": "^1.0.30001735",
2396 | 				"electron-to-chromium": "^1.5.204",
2397 | 				"node-releases": "^2.0.19",
2398 | 				"update-browserslist-db": "^1.1.3"
2399 | 			},
2400 | 			"bin": {
2401 | 				"browserslist": "cli.js"
2402 | 			},
2403 | 			"engines": {
2404 | 				"node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
2405 | 			}
2406 | 		},
2407 | 		"node_modules/bs58": {
2408 | 			"version": "4.0.1",
2409 | 			"resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
2410 | 			"integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
2411 | 			"license": "MIT",
2412 | 			"dependencies": {
2413 | 				"base-x": "^3.0.2"
2414 | 			}
2415 | 		},
2416 | 		"node_modules/buffer": {
2417 | 			"version": "6.0.3",
2418 | 			"resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
2419 | 			"integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
2420 | 			"funding": [
2421 | 				{
2422 | 					"type": "github",
2423 | 					"url": "https://github.com/sponsors/feross"
2424 | 				},
2425 | 				{
2426 | 					"type": "patreon",
2427 | 					"url": "https://www.patreon.com/feross"
2428 | 				},
2429 | 				{
2430 | 					"type": "consulting",
2431 | 					"url": "https://feross.org/support"
2432 | 				}
2433 | 			],
2434 | 			"license": "MIT",
2435 | 			"dependencies": {
2436 | 				"base64-js": "^1.3.1",
2437 | 				"ieee754": "^1.2.1"
2438 | 			}
2439 | 		},
2440 | 		"node_modules/bufferutil": {
2441 | 			"version": "4.0.9",
2442 | 			"resolved": "https://registry.npmjs.org/bufferutil/-/bufferutil-4.0.9.tgz",
2443 | 			"integrity": "sha512-WDtdLmJvAuNNPzByAYpRo2rF1Mmradw6gvWsQKf63476DDXmomT9zUiGypLcG4ibIM67vhAj8jJRdbmEws2Aqw==",
2444 | 			"hasInstallScript": true,
2445 | 			"license": "MIT",
2446 | 			"dependencies": {
2447 | 				"node-gyp-build": "^4.3.0"
2448 | 			},
2449 | 			"engines": {
2450 | 				"node": ">=6.14.2"
2451 | 			}
2452 | 		},
2453 | 		"node_modules/call-bind-apply-helpers": {
2454 | 			"version": "1.0.2",
2455 | 			"resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
2456 | 			"integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
2457 | 			"license": "MIT",
2458 | 			"dependencies": {
2459 | 				"es-errors": "^1.3.0",
2460 | 				"function-bind": "^1.1.2"
2461 | 			},
2462 | 			"engines": {
2463 | 				"node": ">= 0.4"
2464 | 			}
2465 | 		},
2466 | 		"node_modules/camelcase-css": {
2467 | 			"version": "2.0.1",
2468 | 			"resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
2469 | 			"integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
2470 | 			"license": "MIT",
2471 | 			"engines": {
2472 | 				"node": ">= 6"
2473 | 			}
2474 | 		},
2475 | 		"node_modules/caniuse-lite": {
2476 | 			"version": "1.0.30001737",
2477 | 			"resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001737.tgz",
2478 | 			"integrity": "sha512-BiloLiXtQNrY5UyF0+1nSJLXUENuhka2pzy2Fx5pGxqavdrxSCW4U6Pn/PoG3Efspi2frRbHpBV2XsrPE6EDlw==",
2479 | 			"funding": [
2480 | 				{
2481 | 					"type": "opencollective",
2482 | 					"url": "https://opencollective.com/browserslist"
2483 | 				},
2484 | 				{
2485 | 					"type": "tidelift",
2486 | 					"url": "https://tidelift.com/funding/github/npm/caniuse-lite"
2487 | 				},
2488 | 				{
2489 | 					"type": "github",
2490 | 					"url": "https://github.com/sponsors/ai"
2491 | 				}
2492 | 			],
2493 | 			"license": "CC-BY-4.0"
2494 | 		},
2495 | 		"node_modules/chalk": {
2496 | 			"version": "5.6.0",
2497 | 			"resolved": "https://registry.npmjs.org/chalk/-/chalk-5.6.0.tgz",
2498 | 			"integrity": "sha512-46QrSQFyVSEyYAgQ22hQ+zDa60YHA4fBstHmtSApj1Y5vKtG27fWowW03jCk5KcbXEWPZUIR894aARCA/G1kfQ==",
2499 | 			"license": "MIT",
2500 | 			"engines": {
2501 | 				"node": "^12.17.0 || ^14.13 || >=16.0.0"
2502 | 			},
2503 | 			"funding": {
2504 | 				"url": "https://github.com/chalk/chalk?sponsor=1"
2505 | 			}
2506 | 		},
2507 | 		"node_modules/cheerio": {
2508 | 			"version": "1.1.2",
2509 | 			"resolved": "https://registry.npmjs.org/cheerio/-/cheerio-1.1.2.tgz",
2510 | 			"integrity": "sha512-IkxPpb5rS/d1IiLbHMgfPuS0FgiWTtFIm/Nj+2woXDLTZ7fOT2eqzgYbdMlLweqlHbsZjxEChoVK+7iph7jyQg==",
2511 | 			"license": "MIT",
2512 | 			"dependencies": {
2513 | 				"cheerio-select": "^2.1.0",
2514 | 				"dom-serializer": "^2.0.0",
2515 | 				"domhandler": "^5.0.3",
2516 | 				"domutils": "^3.2.2",
2517 | 				"encoding-sniffer": "^0.2.1",
2518 | 				"htmlparser2": "^10.0.0",
2519 | 				"parse5": "^7.3.0",
2520 | 				"parse5-htmlparser2-tree-adapter": "^7.1.0",
2521 | 				"parse5-parser-stream": "^7.1.2",
2522 | 				"undici": "^7.12.0",
2523 | 				"whatwg-mimetype": "^4.0.0"
2524 | 			},
2525 | 			"engines": {
2526 | 				"node": ">=20.18.1"
2527 | 			},
2528 | 			"funding": {
2529 | 				"url": "https://github.com/cheeriojs/cheerio?sponsor=1"
2530 | 			}
2531 | 		},
2532 | 		"node_modules/cheerio-select": {
2533 | 			"version": "2.1.0",
2534 | 			"resolved": "https://registry.npmjs.org/cheerio-select/-/cheerio-select-2.1.0.tgz",
2535 | 			"integrity": "sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==",
2536 | 			"license": "BSD-2-Clause",
2537 | 			"dependencies": {
2538 | 				"boolbase": "^1.0.0",
2539 | 				"css-select": "^5.1.0",
2540 | 				"css-what": "^6.1.0",
2541 | 				"domelementtype": "^2.3.0",
2542 | 				"domhandler": "^5.0.3",
2543 | 				"domutils": "^3.0.1"
2544 | 			},
2545 | 			"funding": {
2546 | 				"url": "https://github.com/sponsors/fb55"
2547 | 			}
2548 | 		},
2549 | 		"node_modules/chokidar": {
2550 | 			"version": "4.0.3",
2551 | 			"resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
2552 | 			"integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
2553 | 			"dev": true,
2554 | 			"license": "MIT",
2555 | 			"dependencies": {
2556 | 				"readdirp": "^4.0.1"
2557 | 			},
2558 | 			"engines": {
2559 | 				"node": ">= 14.16.0"
2560 | 			},
2561 | 			"funding": {
2562 | 				"url": "https://paulmillr.com/funding/"
2563 | 			}
2564 | 		},
2565 | 		"node_modules/clsx": {
2566 | 			"version": "2.1.1",
2567 | 			"resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
2568 | 			"integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
2569 | 			"license": "MIT",
2570 | 			"engines": {
2571 | 				"node": ">=6"
2572 | 			}
2573 | 		},
2574 | 		"node_modules/cluster-key-slot": {
2575 | 			"version": "1.1.2",
2576 | 			"resolved": "https://registry.npmjs.org/cluster-key-slot/-/cluster-key-slot-1.1.2.tgz",
2577 | 			"integrity": "sha512-RMr0FhtfXemyinomL4hrWcYJxmX6deFdCxpJzhDttxgO1+bcCnkk+9drydLVDmAMG7NE6aN/fl4F7ucU/90gAA==",
2578 | 			"license": "Apache-2.0",
2579 | 			"engines": {
2580 | 				"node": ">=0.10.0"
2581 | 			}
2582 | 		},
2583 | 		"node_modules/color-convert": {
2584 | 			"version": "2.0.1",
2585 | 			"resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
2586 | 			"integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
2587 | 			"license": "MIT",
2588 | 			"dependencies": {
2589 | 				"color-name": "~1.1.4"
2590 | 			},
2591 | 			"engines": {
2592 | 				"node": ">=7.0.0"
2593 | 			}
2594 | 		},
2595 | 		"node_modules/color-name": {
2596 | 			"version": "1.1.4",
2597 | 			"resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
2598 | 			"integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
2599 | 			"license": "MIT"
2600 | 		},
2601 | 		"node_modules/combined-stream": {
2602 | 			"version": "1.0.8",
2603 | 			"resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
2604 | 			"integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
2605 | 			"license": "MIT",
2606 | 			"dependencies": {
2607 | 				"delayed-stream": "~1.0.0"
2608 | 			},
2609 | 			"engines": {
2610 | 				"node": ">= 0.8"
2611 | 			}
2612 | 		},
2613 | 		"node_modules/commander": {
2614 | 			"version": "4.1.1",
2615 | 			"resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
2616 | 			"integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
2617 | 			"license": "MIT",
2618 | 			"engines": {
2619 | 				"node": ">= 6"
2620 | 			}
2621 | 		},
2622 | 		"node_modules/commondir": {
2623 | 			"version": "1.0.1",
2624 | 			"resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
2625 | 			"integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
2626 | 			"license": "MIT"
2627 | 		},
2628 | 		"node_modules/cookie": {
2629 | 			"version": "0.6.0",
2630 | 			"resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
2631 | 			"integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
2632 | 			"license": "MIT",
2633 | 			"engines": {
2634 | 				"node": ">= 0.6"
2635 | 			}
2636 | 		},
2637 | 		"node_modules/cross-spawn": {
2638 | 			"version": "7.0.6",
2639 | 			"resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
2640 | 			"integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
2641 | 			"license": "MIT",
2642 | 			"dependencies": {
2643 | 				"path-key": "^3.1.0",
2644 | 				"shebang-command": "^2.0.0",
2645 | 				"which": "^2.0.1"
2646 | 			},
2647 | 			"engines": {
2648 | 				"node": ">= 8"
2649 | 			}
2650 | 		},
2651 | 		"node_modules/css-select": {
2652 | 			"version": "5.2.2",
2653 | 			"resolved": "https://registry.npmjs.org/css-select/-/css-select-5.2.2.tgz",
2654 | 			"integrity": "sha512-TizTzUddG/xYLA3NXodFM0fSbNizXjOKhqiQQwvhlspadZokn1KDy0NZFS0wuEubIYAV5/c1/lAr0TaaFXEXzw==",
2655 | 			"license": "BSD-2-Clause",
2656 | 			"dependencies": {
2657 | 				"boolbase": "^1.0.0",
2658 | 				"css-what": "^6.1.0",
2659 | 				"domhandler": "^5.0.2",
2660 | 				"domutils": "^3.0.1",
2661 | 				"nth-check": "^2.0.1"
2662 | 			},
2663 | 			"funding": {
2664 | 				"url": "https://github.com/sponsors/fb55"
2665 | 			}
2666 | 		},
2667 | 		"node_modules/css-what": {
2668 | 			"version": "6.2.2",
2669 | 			"resolved": "https://registry.npmjs.org/css-what/-/css-what-6.2.2.tgz",
2670 | 			"integrity": "sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==",
2671 | 			"license": "BSD-2-Clause",
2672 | 			"engines": {
2673 | 				"node": ">= 6"
2674 | 			},
2675 | 			"funding": {
2676 | 				"url": "https://github.com/sponsors/fb55"
2677 | 			}
2678 | 		},
2679 | 		"node_modules/cssesc": {
2680 | 			"version": "3.0.0",
2681 | 			"resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
2682 | 			"integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
2683 | 			"license": "MIT",
2684 | 			"bin": {
2685 | 				"cssesc": "bin/cssesc"
2686 | 			},
2687 | 			"engines": {
2688 | 				"node": ">=4"
2689 | 			}
2690 | 		},
2691 | 		"node_modules/d": {
2692 | 			"version": "1.0.2",
2693 | 			"resolved": "https://registry.npmjs.org/d/-/d-1.0.2.tgz",
2694 | 			"integrity": "sha512-MOqHvMWF9/9MX6nza0KgvFH4HpMU0EF5uUDXqX/BtxtU8NfB0QzRtJ8Oe/6SuS4kbhyzVJwjd97EA4PKrzJ8bw==",
2695 | 			"license": "ISC",
2696 | 			"dependencies": {
2697 | 				"es5-ext": "^0.10.64",
2698 | 				"type": "^2.7.2"
2699 | 			},
2700 | 			"engines": {
2701 | 				"node": ">=0.12"
2702 | 			}
2703 | 		},
2704 | 		"node_modules/debug": {
2705 | 			"version": "4.4.1",
2706 | 			"resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
2707 | 			"integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
2708 | 			"license": "MIT",
2709 | 			"dependencies": {
2710 | 				"ms": "^2.1.3"
2711 | 			},
2712 | 			"engines": {
2713 | 				"node": ">=6.0"
2714 | 			},
2715 | 			"peerDependenciesMeta": {
2716 | 				"supports-color": {
2717 | 					"optional": true
2718 | 				}
2719 | 			}
2720 | 		},
2721 | 		"node_modules/deepmerge": {
2722 | 			"version": "4.3.1",
2723 | 			"resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
2724 | 			"integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
2725 | 			"license": "MIT",
2726 | 			"engines": {
2727 | 				"node": ">=0.10.0"
2728 | 			}
2729 | 		},
2730 | 		"node_modules/delay": {
2731 | 			"version": "5.0.0",
2732 | 			"resolved": "https://registry.npmjs.org/delay/-/delay-5.0.0.tgz",
2733 | 			"integrity": "sha512-ReEBKkIfe4ya47wlPYf/gu5ib6yUG0/Aez0JQZQz94kiWtRQvZIQbTiehsnwHvLSWJnQdhVeqYue7Id1dKr0qw==",
2734 | 			"license": "MIT",
2735 | 			"engines": {
2736 | 				"node": ">=10"
2737 | 			},
2738 | 			"funding": {
2739 | 				"url": "https://github.com/sponsors/sindresorhus"
2740 | 			}
2741 | 		},
2742 | 		"node_modules/delayed-stream": {
2743 | 			"version": "1.0.0",
2744 | 			"resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
2745 | 			"integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
2746 | 			"license": "MIT",
2747 | 			"engines": {
2748 | 				"node": ">=0.4.0"
2749 | 			}
2750 | 		},
2751 | 		"node_modules/denque": {
2752 | 			"version": "2.1.0",
2753 | 			"resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
2754 | 			"integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
2755 | 			"license": "Apache-2.0",
2756 | 			"engines": {
2757 | 				"node": ">=0.10"
2758 | 			}
2759 | 		},
2760 | 		"node_modules/devalue": {
2761 | 			"version": "5.1.1",
2762 | 			"resolved": "https://registry.npmjs.org/devalue/-/devalue-5.1.1.tgz",
2763 | 			"integrity": "sha512-maua5KUiapvEwiEAe+XnlZ3Rh0GD+qI1J/nb9vrJc3muPXvcF/8gXYTWF76+5DAqHyDUtOIImEuo0YKE9mshVw==",
2764 | 			"license": "MIT"
2765 | 		},
2766 | 		"node_modules/didyoumean": {
2767 | 			"version": "1.2.2",
2768 | 			"resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
2769 | 			"integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
2770 | 			"license": "Apache-2.0"
2771 | 		},
2772 | 		"node_modules/dlv": {
2773 | 			"version": "1.1.3",
2774 | 			"resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
2775 | 			"integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
2776 | 			"license": "MIT"
2777 | 		},
2778 | 		"node_modules/dom-serializer": {
2779 | 			"version": "2.0.0",
2780 | 			"resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
2781 | 			"integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
2782 | 			"license": "MIT",
2783 | 			"dependencies": {
2784 | 				"domelementtype": "^2.3.0",
2785 | 				"domhandler": "^5.0.2",
2786 | 				"entities": "^4.2.0"
2787 | 			},
2788 | 			"funding": {
2789 | 				"url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
2790 | 			}
2791 | 		},
2792 | 		"node_modules/domelementtype": {
2793 | 			"version": "2.3.0",
2794 | 			"resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
2795 | 			"integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
2796 | 			"funding": [
2797 | 				{
2798 | 					"type": "github",
2799 | 					"url": "https://github.com/sponsors/fb55"
2800 | 				}
2801 | 			],
2802 | 			"license": "BSD-2-Clause"
2803 | 		},
2804 | 		"node_modules/domhandler": {
2805 | 			"version": "5.0.3",
2806 | 			"resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz",
2807 | 			"integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==",
2808 | 			"license": "BSD-2-Clause",
2809 | 			"dependencies": {
2810 | 				"domelementtype": "^2.3.0"
2811 | 			},
2812 | 			"engines": {
2813 | 				"node": ">= 4"
2814 | 			},
2815 | 			"funding": {
2816 | 				"url": "https://github.com/fb55/domhandler?sponsor=1"
2817 | 			}
2818 | 		},
2819 | 		"node_modules/domutils": {
2820 | 			"version": "3.2.2",
2821 | 			"resolved": "https://registry.npmjs.org/domutils/-/domutils-3.2.2.tgz",
2822 | 			"integrity": "sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==",
2823 | 			"license": "BSD-2-Clause",
2824 | 			"dependencies": {
2825 | 				"dom-serializer": "^2.0.0",
2826 | 				"domelementtype": "^2.3.0",
2827 | 				"domhandler": "^5.0.3"
2828 | 			},
2829 | 			"funding": {
2830 | 				"url": "https://github.com/fb55/domutils?sponsor=1"
2831 | 			}
2832 | 		},
2833 | 		"node_modules/dunder-proto": {
2834 | 			"version": "1.0.1",
2835 | 			"resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
2836 | 			"integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
2837 | 			"license": "MIT",
2838 | 			"dependencies": {
2839 | 				"call-bind-apply-helpers": "^1.0.1",
2840 | 				"es-errors": "^1.3.0",
2841 | 				"gopd": "^1.2.0"
2842 | 			},
2843 | 			"engines": {
2844 | 				"node": ">= 0.4"
2845 | 			}
2846 | 		},
2847 | 		"node_modules/eastasianwidth": {
2848 | 			"version": "0.2.0",
2849 | 			"resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
2850 | 			"integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
2851 | 			"license": "MIT"
2852 | 		},
2853 | 		"node_modules/electron-to-chromium": {
2854 | 			"version": "1.5.208",
2855 | 			"resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.208.tgz",
2856 | 			"integrity": "sha512-ozZyibehoe7tOhNaf16lKmljVf+3npZcJIEbJRVftVsmAg5TeA1mGS9dVCZzOwr2xT7xK15V0p7+GZqSPgkuPg==",
2857 | 			"license": "ISC"
2858 | 		},
2859 | 		"node_modules/elliptic": {
2860 | 			"version": "6.6.1",
2861 | 			"resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.6.1.tgz",
2862 | 			"integrity": "sha512-RaddvvMatK2LJHqFJ+YA4WysVN5Ita9E35botqIYspQ4TkRAlCicdzKOjlyv/1Za5RyTNn7di//eEV0uTAfe3g==",
2863 | 			"license": "MIT",
2864 | 			"dependencies": {
2865 | 				"bn.js": "^4.11.9",
2866 | 				"brorand": "^1.1.0",
2867 | 				"hash.js": "^1.0.0",
2868 | 				"hmac-drbg": "^1.0.1",
2869 | 				"inherits": "^2.0.4",
2870 | 				"minimalistic-assert": "^1.0.1",
2871 | 				"minimalistic-crypto-utils": "^1.0.1"
2872 | 			}
2873 | 		},
2874 | 		"node_modules/elliptic/node_modules/bn.js": {
2875 | 			"version": "4.12.2",
2876 | 			"resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.12.2.tgz",
2877 | 			"integrity": "sha512-n4DSx829VRTRByMRGdjQ9iqsN0Bh4OolPsFnaZBLcbi8iXcB+kJ9s7EnRt4wILZNV3kPLHkRVfOc/HvhC3ovDw==",
2878 | 			"license": "MIT"
2879 | 		},
2880 | 		"node_modules/emoji-regex": {
2881 | 			"version": "9.2.2",
2882 | 			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
2883 | 			"integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
2884 | 			"license": "MIT"
2885 | 		},
2886 | 		"node_modules/encoding-sniffer": {
2887 | 			"version": "0.2.1",
2888 | 			"resolved": "https://registry.npmjs.org/encoding-sniffer/-/encoding-sniffer-0.2.1.tgz",
2889 | 			"integrity": "sha512-5gvq20T6vfpekVtqrYQsSCFZ1wEg5+wW0/QaZMWkFr6BqD3NfKs0rLCx4rrVlSWJeZb5NBJgVLswK/w2MWU+Gw==",
2890 | 			"license": "MIT",
2891 | 			"dependencies": {
2892 | 				"iconv-lite": "^0.6.3",
2893 | 				"whatwg-encoding": "^3.1.1"
2894 | 			},
2895 | 			"funding": {
2896 | 				"url": "https://github.com/fb55/encoding-sniffer?sponsor=1"
2897 | 			}
2898 | 		},
2899 | 		"node_modules/entities": {
2900 | 			"version": "4.5.0",
2901 | 			"resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
2902 | 			"integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
2903 | 			"license": "BSD-2-Clause",
2904 | 			"engines": {
2905 | 				"node": ">=0.12"
2906 | 			},
2907 | 			"funding": {
2908 | 				"url": "https://github.com/fb55/entities?sponsor=1"
2909 | 			}
2910 | 		},
2911 | 		"node_modules/es-define-property": {
2912 | 			"version": "1.0.1",
2913 | 			"resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
2914 | 			"integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
2915 | 			"license": "MIT",
2916 | 			"engines": {
2917 | 				"node": ">= 0.4"
2918 | 			}
2919 | 		},
2920 | 		"node_modules/es-errors": {
2921 | 			"version": "1.3.0",
2922 | 			"resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
2923 | 			"integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
2924 | 			"license": "MIT",
2925 | 			"engines": {
2926 | 				"node": ">= 0.4"
2927 | 			}
2928 | 		},
2929 | 		"node_modules/es-object-atoms": {
2930 | 			"version": "1.1.1",
2931 | 			"resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
2932 | 			"integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
2933 | 			"license": "MIT",
2934 | 			"dependencies": {
2935 | 				"es-errors": "^1.3.0"
2936 | 			},
2937 | 			"engines": {
2938 | 				"node": ">= 0.4"
2939 | 			}
2940 | 		},
2941 | 		"node_modules/es-set-tostringtag": {
2942 | 			"version": "2.1.0",
2943 | 			"resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
2944 | 			"integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
2945 | 			"license": "MIT",
2946 | 			"dependencies": {
2947 | 				"es-errors": "^1.3.0",
2948 | 				"get-intrinsic": "^1.2.6",
2949 | 				"has-tostringtag": "^1.0.2",
2950 | 				"hasown": "^2.0.2"
2951 | 			},
2952 | 			"engines": {
2953 | 				"node": ">= 0.4"
2954 | 			}
2955 | 		},
2956 | 		"node_modules/es5-ext": {
2957 | 			"version": "0.10.64",
2958 | 			"resolved": "https://registry.npmjs.org/es5-ext/-/es5-ext-0.10.64.tgz",
2959 | 			"integrity": "sha512-p2snDhiLaXe6dahss1LddxqEm+SkuDvV8dnIQG0MWjyHpcMNfXKPE+/Cc0y+PhxJX3A4xGNeFCj5oc0BUh6deg==",
2960 | 			"hasInstallScript": true,
2961 | 			"license": "ISC",
2962 | 			"dependencies": {
2963 | 				"es6-iterator": "^2.0.3",
2964 | 				"es6-symbol": "^3.1.3",
2965 | 				"esniff": "^2.0.1",
2966 | 				"next-tick": "^1.1.0"
2967 | 			},
2968 | 			"engines": {
2969 | 				"node": ">=0.10"
2970 | 			}
2971 | 		},
2972 | 		"node_modules/es6-iterator": {
2973 | 			"version": "2.0.3",
2974 | 			"resolved": "https://registry.npmjs.org/es6-iterator/-/es6-iterator-2.0.3.tgz",
2975 | 			"integrity": "sha512-zw4SRzoUkd+cl+ZoE15A9o1oQd920Bb0iOJMQkQhl3jNc03YqVjAhG7scf9C5KWRU/R13Orf588uCC6525o02g==",
2976 | 			"license": "MIT",
2977 | 			"dependencies": {
2978 | 				"d": "1",
2979 | 				"es5-ext": "^0.10.35",
2980 | 				"es6-symbol": "^3.1.1"
2981 | 			}
2982 | 		},
2983 | 		"node_modules/es6-promise": {
2984 | 			"version": "4.2.8",
2985 | 			"resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
2986 | 			"integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==",
2987 | 			"license": "MIT"
2988 | 		},
2989 | 		"node_modules/es6-promisify": {
2990 | 			"version": "5.0.0",
2991 | 			"resolved": "https://registry.npmjs.org/es6-promisify/-/es6-promisify-5.0.0.tgz",
2992 | 			"integrity": "sha512-C+d6UdsYDk0lMebHNR4S2NybQMMngAOnOwYBQjTOiv0MkoJMP0Myw2mgpDLBcpfCmRLxyFqYhS/CfOENq4SJhQ==",
2993 | 			"license": "MIT",
2994 | 			"dependencies": {
2995 | 				"es6-promise": "^4.0.3"
2996 | 			}
2997 | 		},
2998 | 		"node_modules/es6-symbol": {
2999 | 			"version": "3.1.4",
3000 | 			"resolved": "https://registry.npmjs.org/es6-symbol/-/es6-symbol-3.1.4.tgz",
3001 | 			"integrity": "sha512-U9bFFjX8tFiATgtkJ1zg25+KviIXpgRvRHS8sau3GfhVzThRQrOeksPeT0BWW2MNZs1OEWJ1DPXOQMn0KKRkvg==",
3002 | 			"license": "ISC",
3003 | 			"dependencies": {
3004 | 				"d": "^1.0.2",
3005 | 				"ext": "^1.7.0"
3006 | 			},
3007 | 			"engines": {
3008 | 				"node": ">=0.12"
3009 | 			}
3010 | 		},
3011 | 		"node_modules/esbuild": {
3012 | 			"version": "0.25.9",
3013 | 			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.9.tgz",
3014 | 			"integrity": "sha512-CRbODhYyQx3qp7ZEwzxOk4JBqmD/seJrzPa/cGjY1VtIn5E09Oi9/dB4JwctnfZ8Q8iT7rioVv5k/FNT/uf54g==",
3015 | 			"hasInstallScript": true,
3016 | 			"license": "MIT",
3017 | 			"bin": {
3018 | 				"esbuild": "bin/esbuild"
3019 | 			},
3020 | 			"engines": {
3021 | 				"node": ">=18"
3022 | 			},
3023 | 			"optionalDependencies": {
3024 | 				"@esbuild/aix-ppc64": "0.25.9",
3025 | 				"@esbuild/android-arm": "0.25.9",
3026 | 				"@esbuild/android-arm64": "0.25.9",
3027 | 				"@esbuild/android-x64": "0.25.9",
3028 | 				"@esbuild/darwin-arm64": "0.25.9",
3029 | 				"@esbuild/darwin-x64": "0.25.9",
3030 | 				"@esbuild/freebsd-arm64": "0.25.9",
3031 | 				"@esbuild/freebsd-x64": "0.25.9",
3032 | 				"@esbuild/linux-arm": "0.25.9",
3033 | 				"@esbuild/linux-arm64": "0.25.9",
3034 | 				"@esbuild/linux-ia32": "0.25.9",
3035 | 				"@esbuild/linux-loong64": "0.25.9",
3036 | 				"@esbuild/linux-mips64el": "0.25.9",
3037 | 				"@esbuild/linux-ppc64": "0.25.9",
3038 | 				"@esbuild/linux-riscv64": "0.25.9",
3039 | 				"@esbuild/linux-s390x": "0.25.9",
3040 | 				"@esbuild/linux-x64": "0.25.9",
3041 | 				"@esbuild/netbsd-arm64": "0.25.9",
3042 | 				"@esbuild/netbsd-x64": "0.25.9",
3043 | 				"@esbuild/openbsd-arm64": "0.25.9",
3044 | 				"@esbuild/openbsd-x64": "0.25.9",
3045 | 				"@esbuild/openharmony-arm64": "0.25.9",
3046 | 				"@esbuild/sunos-x64": "0.25.9",
3047 | 				"@esbuild/win32-arm64": "0.25.9",
3048 | 				"@esbuild/win32-ia32": "0.25.9",
3049 | 				"@esbuild/win32-x64": "0.25.9"
3050 | 			}
3051 | 		},
3052 | 		"node_modules/escalade": {
3053 | 			"version": "3.2.0",
3054 | 			"resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
3055 | 			"integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
3056 | 			"license": "MIT",
3057 | 			"engines": {
3058 | 				"node": ">=6"
3059 | 			}
3060 | 		},
3061 | 		"node_modules/esm-env": {
3062 | 			"version": "1.2.2",
3063 | 			"resolved": "https://registry.npmjs.org/esm-env/-/esm-env-1.2.2.tgz",
3064 | 			"integrity": "sha512-Epxrv+Nr/CaL4ZcFGPJIYLWFom+YeV1DqMLHJoEd9SYRxNbaFruBwfEX/kkHUJf55j2+TUbmDcmuilbP1TmXHA==",
3065 | 			"license": "MIT"
3066 | 		},
3067 | 		"node_modules/esniff": {
3068 | 			"version": "2.0.1",
3069 | 			"resolved": "https://registry.npmjs.org/esniff/-/esniff-2.0.1.tgz",
3070 | 			"integrity": "sha512-kTUIGKQ/mDPFoJ0oVfcmyJn4iBDRptjNVIzwIFR7tqWXdVI9xfA2RMwY/gbSpJG3lkdWNEjLap/NqVHZiJsdfg==",
3071 | 			"license": "ISC",
3072 | 			"dependencies": {
3073 | 				"d": "^1.0.1",
3074 | 				"es5-ext": "^0.10.62",
3075 | 				"event-emitter": "^0.3.5",
3076 | 				"type": "^2.7.2"
3077 | 			},
3078 | 			"engines": {
3079 | 				"node": ">=0.10"
3080 | 			}
3081 | 		},
3082 | 		"node_modules/esrap": {
3083 | 			"version": "2.1.0",
3084 | 			"resolved": "https://registry.npmjs.org/esrap/-/esrap-2.1.0.tgz",
3085 | 			"integrity": "sha512-yzmPNpl7TBbMRC5Lj2JlJZNPml0tzqoqP5B1JXycNUwtqma9AKCO0M2wHrdgsHcy1WRW7S9rJknAMtByg3usgA==",
3086 | 			"license": "MIT",
3087 | 			"dependencies": {
3088 | 				"@jridgewell/sourcemap-codec": "^1.4.15"
3089 | 			}
3090 | 		},
3091 | 		"node_modules/estree-walker": {
3092 | 			"version": "2.0.2",
3093 | 			"resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
3094 | 			"integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
3095 | 			"license": "MIT"
3096 | 		},
3097 | 		"node_modules/event-emitter": {
3098 | 			"version": "0.3.5",
3099 | 			"resolved": "https://registry.npmjs.org/event-emitter/-/event-emitter-0.3.5.tgz",
3100 | 			"integrity": "sha512-D9rRn9y7kLPnJ+hMq7S/nhvoKwwvVJahBi2BPmx3bvbsEdK3W9ii8cBSGjP+72/LnM4n6fo3+dkCX5FeTQruXA==",
3101 | 			"license": "MIT",
3102 | 			"dependencies": {
3103 | 				"d": "1",
3104 | 				"es5-ext": "~0.10.14"
3105 | 			}
3106 | 		},
3107 | 		"node_modules/eventemitter3": {
3108 | 			"version": "5.0.1",
3109 | 			"resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
3110 | 			"integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
3111 | 			"license": "MIT"
3112 | 		},
3113 | 		"node_modules/ext": {
3114 | 			"version": "1.7.0",
3115 | 			"resolved": "https://registry.npmjs.org/ext/-/ext-1.7.0.tgz",
3116 | 			"integrity": "sha512-6hxeJYaL110a9b5TEJSj0gojyHQAmA2ch5Os+ySCiA1QGdS697XWY1pzsrSjqA9LDEEgdB/KypIlR59RcLuHYw==",
3117 | 			"license": "ISC",
3118 | 			"dependencies": {
3119 | 				"type": "^2.7.2"
3120 | 			}
3121 | 		},
3122 | 		"node_modules/eyes": {
3123 | 			"version": "0.1.8",
3124 | 			"resolved": "https://registry.npmjs.org/eyes/-/eyes-0.1.8.tgz",
3125 | 			"integrity": "sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ==",
3126 | 			"engines": {
3127 | 				"node": "> 0.1.90"
3128 | 			}
3129 | 		},
3130 | 		"node_modules/fast-glob": {
3131 | 			"version": "3.3.3",
3132 | 			"resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
3133 | 			"integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
3134 | 			"license": "MIT",
3135 | 			"dependencies": {
3136 | 				"@nodelib/fs.stat": "^2.0.2",
3137 | 				"@nodelib/fs.walk": "^1.2.3",
3138 | 				"glob-parent": "^5.1.2",
3139 | 				"merge2": "^1.3.0",
3140 | 				"micromatch": "^4.0.8"
3141 | 			},
3142 | 			"engines": {
3143 | 				"node": ">=8.6.0"
3144 | 			}
3145 | 		},
3146 | 		"node_modules/fast-glob/node_modules/glob-parent": {
3147 | 			"version": "5.1.2",
3148 | 			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
3149 | 			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
3150 | 			"license": "ISC",
3151 | 			"dependencies": {
3152 | 				"is-glob": "^4.0.1"
3153 | 			},
3154 | 			"engines": {
3155 | 				"node": ">= 6"
3156 | 			}
3157 | 		},
3158 | 		"node_modules/fast-stable-stringify": {
3159 | 			"version": "1.0.0",
3160 | 			"resolved": "https://registry.npmjs.org/fast-stable-stringify/-/fast-stable-stringify-1.0.0.tgz",
3161 | 			"integrity": "sha512-wpYMUmFu5f00Sm0cj2pfivpmawLZ0NKdviQ4w9zJeR8JVtOpOxHmLaJuj0vxvGqMJQWyP/COUkF75/57OKyRag==",
3162 | 			"license": "MIT"
3163 | 		},
3164 | 		"node_modules/fastq": {
3165 | 			"version": "1.19.1",
3166 | 			"resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
3167 | 			"integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
3168 | 			"license": "ISC",
3169 | 			"dependencies": {
3170 | 				"reusify": "^1.0.4"
3171 | 			}
3172 | 		},
3173 | 		"node_modules/fdir": {
3174 | 			"version": "6.5.0",
3175 | 			"resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
3176 | 			"integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
3177 | 			"license": "MIT",
3178 | 			"engines": {
3179 | 				"node": ">=12.0.0"
3180 | 			},
3181 | 			"peerDependencies": {
3182 | 				"picomatch": "^3 || ^4"
3183 | 			},
3184 | 			"peerDependenciesMeta": {
3185 | 				"picomatch": {
3186 | 					"optional": true
3187 | 				}
3188 | 			}
3189 | 		},
3190 | 		"node_modules/fill-range": {
3191 | 			"version": "7.1.1",
3192 | 			"resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
3193 | 			"integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
3194 | 			"license": "MIT",
3195 | 			"dependencies": {
3196 | 				"to-regex-range": "^5.0.1"
3197 | 			},
3198 | 			"engines": {
3199 | 				"node": ">=8"
3200 | 			}
3201 | 		},
3202 | 		"node_modules/follow-redirects": {
3203 | 			"version": "1.15.11",
3204 | 			"resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
3205 | 			"integrity": "sha512-deG2P0JfjrTxl50XGCDyfI97ZGVCxIpfKYmfyrQ54n5FO/0gfIES8C/Psl6kWVDolizcaaxZJnTS0QSMxvnsBQ==",
3206 | 			"funding": [
3207 | 				{
3208 | 					"type": "individual",
3209 | 					"url": "https://github.com/sponsors/RubenVerborgh"
3210 | 				}
3211 | 			],
3212 | 			"license": "MIT",
3213 | 			"engines": {
3214 | 				"node": ">=4.0"
3215 | 			},
3216 | 			"peerDependenciesMeta": {
3217 | 				"debug": {
3218 | 					"optional": true
3219 | 				}
3220 | 			}
3221 | 		},
3222 | 		"node_modules/foreground-child": {
3223 | 			"version": "3.3.1",
3224 | 			"resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
3225 | 			"integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
3226 | 			"license": "ISC",
3227 | 			"dependencies": {
3228 | 				"cross-spawn": "^7.0.6",
3229 | 				"signal-exit": "^4.0.1"
3230 | 			},
3231 | 			"engines": {
3232 | 				"node": ">=14"
3233 | 			},
3234 | 			"funding": {
3235 | 				"url": "https://github.com/sponsors/isaacs"
3236 | 			}
3237 | 		},
3238 | 		"node_modules/form-data": {
3239 | 			"version": "4.0.4",
3240 | 			"resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
3241 | 			"integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
3242 | 			"license": "MIT",
3243 | 			"dependencies": {
3244 | 				"asynckit": "^0.4.0",
3245 | 				"combined-stream": "^1.0.8",
3246 | 				"es-set-tostringtag": "^2.1.0",
3247 | 				"hasown": "^2.0.2",
3248 | 				"mime-types": "^2.1.12"
3249 | 			},
3250 | 			"engines": {
3251 | 				"node": ">= 6"
3252 | 			}
3253 | 		},
3254 | 		"node_modules/fraction.js": {
3255 | 			"version": "4.3.7",
3256 | 			"resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
3257 | 			"integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
3258 | 			"license": "MIT",
3259 | 			"engines": {
3260 | 				"node": "*"
3261 | 			},
3262 | 			"funding": {
3263 | 				"type": "patreon",
3264 | 				"url": "https://github.com/sponsors/rawify"
3265 | 			}
3266 | 		},
3267 | 		"node_modules/fsevents": {
3268 | 			"version": "2.3.3",
3269 | 			"resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
3270 | 			"integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
3271 | 			"hasInstallScript": true,
3272 | 			"license": "MIT",
3273 | 			"optional": true,
3274 | 			"os": [
3275 | 				"darwin"
3276 | 			],
3277 | 			"engines": {
3278 | 				"node": "^8.16.0 || ^10.6.0 || >=11.0.0"
3279 | 			}
3280 | 		},
3281 | 		"node_modules/function-bind": {
3282 | 			"version": "1.1.2",
3283 | 			"resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
3284 | 			"integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
3285 | 			"license": "MIT",
3286 | 			"funding": {
3287 | 				"url": "https://github.com/sponsors/ljharb"
3288 | 			}
3289 | 		},
3290 | 		"node_modules/get-intrinsic": {
3291 | 			"version": "1.3.0",
3292 | 			"resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
3293 | 			"integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
3294 | 			"license": "MIT",
3295 | 			"dependencies": {
3296 | 				"call-bind-apply-helpers": "^1.0.2",
3297 | 				"es-define-property": "^1.0.1",
3298 | 				"es-errors": "^1.3.0",
3299 | 				"es-object-atoms": "^1.1.1",
3300 | 				"function-bind": "^1.1.2",
3301 | 				"get-proto": "^1.0.1",
3302 | 				"gopd": "^1.2.0",
3303 | 				"has-symbols": "^1.1.0",
3304 | 				"hasown": "^2.0.2",
3305 | 				"math-intrinsics": "^1.1.0"
3306 | 			},
3307 | 			"engines": {
3308 | 				"node": ">= 0.4"
3309 | 			},
3310 | 			"funding": {
3311 | 				"url": "https://github.com/sponsors/ljharb"
3312 | 			}
3313 | 		},
3314 | 		"node_modules/get-proto": {
3315 | 			"version": "1.0.1",
3316 | 			"resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
3317 | 			"integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
3318 | 			"license": "MIT",
3319 | 			"dependencies": {
3320 | 				"dunder-proto": "^1.0.1",
3321 | 				"es-object-atoms": "^1.0.0"
3322 | 			},
3323 | 			"engines": {
3324 | 				"node": ">= 0.4"
3325 | 			}
3326 | 		},
3327 | 		"node_modules/get-tsconfig": {
3328 | 			"version": "4.10.1",
3329 | 			"resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.10.1.tgz",
3330 | 			"integrity": "sha512-auHyJ4AgMz7vgS8Hp3N6HXSmlMdUyhSUrfBF16w153rxtLIEOE+HGqaBppczZvnHLqQJfiHotCYpNhl0lUROFQ==",
3331 | 			"devOptional": true,
3332 | 			"license": "MIT",
3333 | 			"dependencies": {
3334 | 				"resolve-pkg-maps": "^1.0.0"
3335 | 			},
3336 | 			"funding": {
3337 | 				"url": "https://github.com/privatenumber/get-tsconfig?sponsor=1"
3338 | 			}
3339 | 		},
3340 | 		"node_modules/glob": {
3341 | 			"version": "10.4.5",
3342 | 			"resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
3343 | 			"integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
3344 | 			"license": "ISC",
3345 | 			"dependencies": {
3346 | 				"foreground-child": "^3.1.0",
3347 | 				"jackspeak": "^3.1.2",
3348 | 				"minimatch": "^9.0.4",
3349 | 				"minipass": "^7.1.2",
3350 | 				"package-json-from-dist": "^1.0.0",
3351 | 				"path-scurry": "^1.11.1"
3352 | 			},
3353 | 			"bin": {
3354 | 				"glob": "dist/esm/bin.mjs"
3355 | 			},
3356 | 			"funding": {
3357 | 				"url": "https://github.com/sponsors/isaacs"
3358 | 			}
3359 | 		},
3360 | 		"node_modules/glob-parent": {
3361 | 			"version": "6.0.2",
3362 | 			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
3363 | 			"integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
3364 | 			"license": "ISC",
3365 | 			"dependencies": {
3366 | 				"is-glob": "^4.0.3"
3367 | 			},
3368 | 			"engines": {
3369 | 				"node": ">=10.13.0"
3370 | 			}
3371 | 		},
3372 | 		"node_modules/gopd": {
3373 | 			"version": "1.2.0",
3374 | 			"resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
3375 | 			"integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
3376 | 			"license": "MIT",
3377 | 			"engines": {
3378 | 				"node": ">= 0.4"
3379 | 			},
3380 | 			"funding": {
3381 | 				"url": "https://github.com/sponsors/ljharb"
3382 | 			}
3383 | 		},
3384 | 		"node_modules/has-symbols": {
3385 | 			"version": "1.1.0",
3386 | 			"resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
3387 | 			"integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
3388 | 			"license": "MIT",
3389 | 			"engines": {
3390 | 				"node": ">= 0.4"
3391 | 			},
3392 | 			"funding": {
3393 | 				"url": "https://github.com/sponsors/ljharb"
3394 | 			}
3395 | 		},
3396 | 		"node_modules/has-tostringtag": {
3397 | 			"version": "1.0.2",
3398 | 			"resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
3399 | 			"integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
3400 | 			"license": "MIT",
3401 | 			"dependencies": {
3402 | 				"has-symbols": "^1.0.3"
3403 | 			},
3404 | 			"engines": {
3405 | 				"node": ">= 0.4"
3406 | 			},
3407 | 			"funding": {
3408 | 				"url": "https://github.com/sponsors/ljharb"
3409 | 			}
3410 | 		},
3411 | 		"node_modules/hash.js": {
3412 | 			"version": "1.1.7",
3413 | 			"resolved": "https://registry.npmjs.org/hash.js/-/hash.js-1.1.7.tgz",
3414 | 			"integrity": "sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==",
3415 | 			"license": "MIT",
3416 | 			"dependencies": {
3417 | 				"inherits": "^2.0.3",
3418 | 				"minimalistic-assert": "^1.0.1"
3419 | 			}
3420 | 		},
3421 | 		"node_modules/hasown": {
3422 | 			"version": "2.0.2",
3423 | 			"resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
3424 | 			"integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
3425 | 			"license": "MIT",
3426 | 			"dependencies": {
3427 | 				"function-bind": "^1.1.2"
3428 | 			},
3429 | 			"engines": {
3430 | 				"node": ">= 0.4"
3431 | 			}
3432 | 		},
3433 | 		"node_modules/hmac-drbg": {
3434 | 			"version": "1.0.1",
3435 | 			"resolved": "https://registry.npmjs.org/hmac-drbg/-/hmac-drbg-1.0.1.tgz",
3436 | 			"integrity": "sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==",
3437 | 			"license": "MIT",
3438 | 			"dependencies": {
3439 | 				"hash.js": "^1.0.3",
3440 | 				"minimalistic-assert": "^1.0.0",
3441 | 				"minimalistic-crypto-utils": "^1.0.1"
3442 | 			}
3443 | 		},
3444 | 		"node_modules/htmlparser2": {
3445 | 			"version": "10.0.0",
3446 | 			"resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-10.0.0.tgz",
3447 | 			"integrity": "sha512-TwAZM+zE5Tq3lrEHvOlvwgj1XLWQCtaaibSN11Q+gGBAS7Y1uZSWwXXRe4iF6OXnaq1riyQAPFOBtYc77Mxq0g==",
3448 | 			"funding": [
3449 | 				"https://github.com/fb55/htmlparser2?sponsor=1",
3450 | 				{
3451 | 					"type": "github",
3452 | 					"url": "https://github.com/sponsors/fb55"
3453 | 				}
3454 | 			],
3455 | 			"license": "MIT",
3456 | 			"dependencies": {
3457 | 				"domelementtype": "^2.3.0",
3458 | 				"domhandler": "^5.0.3",
3459 | 				"domutils": "^3.2.1",
3460 | 				"entities": "^6.0.0"
3461 | 			}
3462 | 		},
3463 | 		"node_modules/htmlparser2/node_modules/entities": {
3464 | 			"version": "6.0.1",
3465 | 			"resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
3466 | 			"integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
3467 | 			"license": "BSD-2-Clause",
3468 | 			"engines": {
3469 | 				"node": ">=0.12"
3470 | 			},
3471 | 			"funding": {
3472 | 				"url": "https://github.com/fb55/entities?sponsor=1"
3473 | 			}
3474 | 		},
3475 | 		"node_modules/humanize-ms": {
3476 | 			"version": "1.2.1",
3477 | 			"resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
3478 | 			"integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
3479 | 			"license": "MIT",
3480 | 			"dependencies": {
3481 | 				"ms": "^2.0.0"
3482 | 			}
3483 | 		},
3484 | 		"node_modules/iconv-lite": {
3485 | 			"version": "0.6.3",
3486 | 			"resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
3487 | 			"integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
3488 | 			"license": "MIT",
3489 | 			"dependencies": {
3490 | 				"safer-buffer": ">= 2.1.2 < 3.0.0"
3491 | 			},
3492 | 			"engines": {
3493 | 				"node": ">=0.10.0"
3494 | 			}
3495 | 		},
3496 | 		"node_modules/ieee754": {
3497 | 			"version": "1.2.1",
3498 | 			"resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
3499 | 			"integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
3500 | 			"funding": [
3501 | 				{
3502 | 					"type": "github",
3503 | 					"url": "https://github.com/sponsors/feross"
3504 | 				},
3505 | 				{
3506 | 					"type": "patreon",
3507 | 					"url": "https://www.patreon.com/feross"
3508 | 				},
3509 | 				{
3510 | 					"type": "consulting",
3511 | 					"url": "https://feross.org/support"
3512 | 				}
3513 | 			],
3514 | 			"license": "BSD-3-Clause"
3515 | 		},
3516 | 		"node_modules/inherits": {
3517 | 			"version": "2.0.4",
3518 | 			"resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
3519 | 			"integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
3520 | 			"license": "ISC"
3521 | 		},
3522 | 		"node_modules/ioredis": {
3523 | 			"version": "5.7.0",
3524 | 			"resolved": "https://registry.npmjs.org/ioredis/-/ioredis-5.7.0.tgz",
3525 | 			"integrity": "sha512-NUcA93i1lukyXU+riqEyPtSEkyFq8tX90uL659J+qpCZ3rEdViB/APC58oAhIh3+bJln2hzdlZbBZsGNrlsR8g==",
3526 | 			"license": "MIT",
3527 | 			"dependencies": {
3528 | 				"@ioredis/commands": "^1.3.0",
3529 | 				"cluster-key-slot": "^1.1.0",
3530 | 				"debug": "^4.3.4",
3531 | 				"denque": "^2.1.0",
3532 | 				"lodash.defaults": "^4.2.0",
3533 | 				"lodash.isarguments": "^3.1.0",
3534 | 				"redis-errors": "^1.2.0",
3535 | 				"redis-parser": "^3.0.0",
3536 | 				"standard-as-callback": "^2.1.0"
3537 | 			},
3538 | 			"engines": {
3539 | 				"node": ">=12.22.0"
3540 | 			},
3541 | 			"funding": {
3542 | 				"type": "opencollective",
3543 | 				"url": "https://opencollective.com/ioredis"
3544 | 			}
3545 | 		},
3546 | 		"node_modules/is-binary-path": {
3547 | 			"version": "2.1.0",
3548 | 			"resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
3549 | 			"integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
3550 | 			"license": "MIT",
3551 | 			"dependencies": {
3552 | 				"binary-extensions": "^2.0.0"
3553 | 			},
3554 | 			"engines": {
3555 | 				"node": ">=8"
3556 | 			}
3557 | 		},
3558 | 		"node_modules/is-core-module": {
3559 | 			"version": "2.16.1",
3560 | 			"resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
3561 | 			"integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
3562 | 			"license": "MIT",
3563 | 			"dependencies": {
3564 | 				"hasown": "^2.0.2"
3565 | 			},
3566 | 			"engines": {
3567 | 				"node": ">= 0.4"
3568 | 			},
3569 | 			"funding": {
3570 | 				"url": "https://github.com/sponsors/ljharb"
3571 | 			}
3572 | 		},
3573 | 		"node_modules/is-extglob": {
3574 | 			"version": "2.1.1",
3575 | 			"resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
3576 | 			"integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
3577 | 			"license": "MIT",
3578 | 			"engines": {
3579 | 				"node": ">=0.10.0"
3580 | 			}
3581 | 		},
3582 | 		"node_modules/is-fullwidth-code-point": {
3583 | 			"version": "3.0.0",
3584 | 			"resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
3585 | 			"integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
3586 | 			"license": "MIT",
3587 | 			"engines": {
3588 | 				"node": ">=8"
3589 | 			}
3590 | 		},
3591 | 		"node_modules/is-glob": {
3592 | 			"version": "4.0.3",
3593 | 			"resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
3594 | 			"integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
3595 | 			"license": "MIT",
3596 | 			"dependencies": {
3597 | 				"is-extglob": "^2.1.1"
3598 | 			},
3599 | 			"engines": {
3600 | 				"node": ">=0.10.0"
3601 | 			}
3602 | 		},
3603 | 		"node_modules/is-module": {
3604 | 			"version": "1.0.0",
3605 | 			"resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
3606 | 			"integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
3607 | 			"license": "MIT"
3608 | 		},
3609 | 		"node_modules/is-number": {
3610 | 			"version": "7.0.0",
3611 | 			"resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
3612 | 			"integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
3613 | 			"license": "MIT",
3614 | 			"engines": {
3615 | 				"node": ">=0.12.0"
3616 | 			}
3617 | 		},
3618 | 		"node_modules/is-reference": {
3619 | 			"version": "3.0.3",
3620 | 			"resolved": "https://registry.npmjs.org/is-reference/-/is-reference-3.0.3.tgz",
3621 | 			"integrity": "sha512-ixkJoqQvAP88E6wLydLGGqCJsrFUnqoH6HnaczB8XmDH1oaWU+xxdptvikTgaEhtZ53Ky6YXiBuUI2WXLMCwjw==",
3622 | 			"license": "MIT",
3623 | 			"dependencies": {
3624 | 				"@types/estree": "^1.0.6"
3625 | 			}
3626 | 		},
3627 | 		"node_modules/is-typedarray": {
3628 | 			"version": "1.0.0",
3629 | 			"resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
3630 | 			"integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
3631 | 			"license": "MIT"
3632 | 		},
3633 | 		"node_modules/isexe": {
3634 | 			"version": "2.0.0",
3635 | 			"resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
3636 | 			"integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
3637 | 			"license": "ISC"
3638 | 		},
3639 | 		"node_modules/isomorphic-ws": {
3640 | 			"version": "4.0.1",
3641 | 			"resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
3642 | 			"integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
3643 | 			"license": "MIT",
3644 | 			"peerDependencies": {
3645 | 				"ws": "*"
3646 | 			}
3647 | 		},
3648 | 		"node_modules/isows": {
3649 | 			"version": "1.0.7",
3650 | 			"resolved": "https://registry.npmjs.org/isows/-/isows-1.0.7.tgz",
3651 | 			"integrity": "sha512-I1fSfDCZL5P0v33sVqeTDSpcstAg/N+wF5HS033mogOVIp4B+oHC7oOCsA3axAbBSGTJ8QubbNmnIRN/h8U7hg==",
3652 | 			"funding": [
3653 | 				{
3654 | 					"type": "github",
3655 | 					"url": "https://github.com/sponsors/wevm"
3656 | 				}
3657 | 			],
3658 | 			"license": "MIT",
3659 | 			"peerDependencies": {
3660 | 				"ws": "*"
3661 | 			}
3662 | 		},
3663 | 		"node_modules/jackspeak": {
3664 | 			"version": "3.4.3",
3665 | 			"resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
3666 | 			"integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
3667 | 			"license": "BlueOak-1.0.0",
3668 | 			"dependencies": {
3669 | 				"@isaacs/cliui": "^8.0.2"
3670 | 			},
3671 | 			"funding": {
3672 | 				"url": "https://github.com/sponsors/isaacs"
3673 | 			},
3674 | 			"optionalDependencies": {
3675 | 				"@pkgjs/parseargs": "^0.11.0"
3676 | 			}
3677 | 		},
3678 | 		"node_modules/jayson": {
3679 | 			"version": "4.2.0",
3680 | 			"resolved": "https://registry.npmjs.org/jayson/-/jayson-4.2.0.tgz",
3681 | 			"integrity": "sha512-VfJ9t1YLwacIubLhONk0KFeosUBwstRWQ0IRT1KDjEjnVnSOVHC3uwugyV7L0c7R9lpVyrUGT2XWiBA1UTtpyg==",
3682 | 			"license": "MIT",
3683 | 			"dependencies": {
3684 | 				"@types/connect": "^3.4.33",
3685 | 				"@types/node": "^12.12.54",
3686 | 				"@types/ws": "^7.4.4",
3687 | 				"commander": "^2.20.3",
3688 | 				"delay": "^5.0.0",
3689 | 				"es6-promisify": "^5.0.0",
3690 | 				"eyes": "^0.1.8",
3691 | 				"isomorphic-ws": "^4.0.1",
3692 | 				"json-stringify-safe": "^5.0.1",
3693 | 				"stream-json": "^1.9.1",
3694 | 				"uuid": "^8.3.2",
3695 | 				"ws": "^7.5.10"
3696 | 			},
3697 | 			"bin": {
3698 | 				"jayson": "bin/jayson.js"
3699 | 			},
3700 | 			"engines": {
3701 | 				"node": ">=8"
3702 | 			}
3703 | 		},
3704 | 		"node_modules/jayson/node_modules/@types/node": {
3705 | 			"version": "12.20.55",
3706 | 			"resolved": "https://registry.npmjs.org/@types/node/-/node-12.20.55.tgz",
3707 | 			"integrity": "sha512-J8xLz7q2OFulZ2cyGTLE1TbbZcjpno7FaN6zdJNrgAdrJ+DZzh/uFR6YrTb4C+nXakvud8Q4+rbhoIWlYQbUFQ==",
3708 | 			"license": "MIT"
3709 | 		},
3710 | 		"node_modules/jayson/node_modules/commander": {
3711 | 			"version": "2.20.3",
3712 | 			"resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
3713 | 			"integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
3714 | 			"license": "MIT"
3715 | 		},
3716 | 		"node_modules/jayson/node_modules/ws": {
3717 | 			"version": "7.5.10",
3718 | 			"resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
3719 | 			"integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
3720 | 			"license": "MIT",
3721 | 			"engines": {
3722 | 				"node": ">=8.3.0"
3723 | 			},
3724 | 			"peerDependencies": {
3725 | 				"bufferutil": "^4.0.1",
3726 | 				"utf-8-validate": "^5.0.2"
3727 | 			},
3728 | 			"peerDependenciesMeta": {
3729 | 				"bufferutil": {
3730 | 					"optional": true
3731 | 				},
3732 | 				"utf-8-validate": {
3733 | 					"optional": true
3734 | 				}
3735 | 			}
3736 | 		},
3737 | 		"node_modules/jiti": {
3738 | 			"version": "1.21.7",
3739 | 			"resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
3740 | 			"integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
3741 | 			"license": "MIT",
3742 | 			"bin": {
3743 | 				"jiti": "bin/jiti.js"
3744 | 			}
3745 | 		},
3746 | 		"node_modules/js-sha3": {
3747 | 			"version": "0.8.0",
3748 | 			"resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.8.0.tgz",
3749 | 			"integrity": "sha512-gF1cRrHhIzNfToc802P800N8PpXS+evLLXfsVpowqmAFR9uwbi89WvXg2QspOmXL8QL86J4T1EpFu+yUkwJY3Q==",
3750 | 			"license": "MIT"
3751 | 		},
3752 | 		"node_modules/json-stringify-safe": {
3753 | 			"version": "5.0.1",
3754 | 			"resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
3755 | 			"integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
3756 | 			"license": "ISC"
3757 | 		},
3758 | 		"node_modules/kleur": {
3759 | 			"version": "4.1.5",
3760 | 			"resolved": "https://registry.npmjs.org/kleur/-/kleur-4.1.5.tgz",
3761 | 			"integrity": "sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==",
3762 | 			"license": "MIT",
3763 | 			"engines": {
3764 | 				"node": ">=6"
3765 | 			}
3766 | 		},
3767 | 		"node_modules/lilconfig": {
3768 | 			"version": "3.1.3",
3769 | 			"resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
3770 | 			"integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
3771 | 			"license": "MIT",
3772 | 			"engines": {
3773 | 				"node": ">=14"
3774 | 			},
3775 | 			"funding": {
3776 | 				"url": "https://github.com/sponsors/antonk52"
3777 | 			}
3778 | 		},
3779 | 		"node_modules/lines-and-columns": {
3780 | 			"version": "1.2.4",
3781 | 			"resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
3782 | 			"integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
3783 | 			"license": "MIT"
3784 | 		},
3785 | 		"node_modules/locate-character": {
3786 | 			"version": "3.0.0",
3787 | 			"resolved": "https://registry.npmjs.org/locate-character/-/locate-character-3.0.0.tgz",
3788 | 			"integrity": "sha512-SW13ws7BjaeJ6p7Q6CO2nchbYEc3X3J6WrmTTDto7yMPqVSZTUyY5Tjbid+Ab8gLnATtygYtiDIJGQRRn2ZOiA==",
3789 | 			"license": "MIT"
3790 | 		},
3791 | 		"node_modules/lodash.castarray": {
3792 | 			"version": "4.4.0",
3793 | 			"resolved": "https://registry.npmjs.org/lodash.castarray/-/lodash.castarray-4.4.0.tgz",
3794 | 			"integrity": "sha512-aVx8ztPv7/2ULbArGJ2Y42bG1mEQ5mGjpdvrbJcJFU3TbYybe+QlLS4pst9zV52ymy2in1KpFPiZnAOATxD4+Q==",
3795 | 			"dev": true,
3796 | 			"license": "MIT"
3797 | 		},
3798 | 		"node_modules/lodash.defaults": {
3799 | 			"version": "4.2.0",
3800 | 			"resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
3801 | 			"integrity": "sha512-qjxPLHd3r5DnsdGacqOMU6pb/avJzdh9tFX2ymgoZE27BmjXrNy/y4LoaiTeAb+O3gL8AfpJGtqfX/ae2leYYQ==",
3802 | 			"license": "MIT"
3803 | 		},
3804 | 		"node_modules/lodash.isarguments": {
3805 | 			"version": "3.1.0",
3806 | 			"resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
3807 | 			"integrity": "sha512-chi4NHZlZqZD18a0imDHnZPrDeBbTtVN7GXMwuGdRH9qotxAjYs3aVLKc7zNOG9eddR5Ksd8rvFEBc9SsggPpg==",
3808 | 			"license": "MIT"
3809 | 		},
3810 | 		"node_modules/lodash.isplainobject": {
3811 | 			"version": "4.0.6",
3812 | 			"resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
3813 | 			"integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
3814 | 			"dev": true,
3815 | 			"license": "MIT"
3816 | 		},
3817 | 		"node_modules/lodash.merge": {
3818 | 			"version": "4.6.2",
3819 | 			"resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
3820 | 			"integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
3821 | 			"dev": true,
3822 | 			"license": "MIT"
3823 | 		},
3824 | 		"node_modules/lru-cache": {
3825 | 			"version": "10.4.3",
3826 | 			"resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
3827 | 			"integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
3828 | 			"license": "ISC"
3829 | 		},
3830 | 		"node_modules/magic-string": {
3831 | 			"version": "0.30.18",
3832 | 			"resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.18.tgz",
3833 | 			"integrity": "sha512-yi8swmWbO17qHhwIBNeeZxTceJMeBvWJaId6dyvTSOwTipqeHhMhOrz6513r1sOKnpvQ7zkhlG8tPrpilwTxHQ==",
3834 | 			"license": "MIT",
3835 | 			"dependencies": {
3836 | 				"@jridgewell/sourcemap-codec": "^1.5.5"
3837 | 			}
3838 | 		},
3839 | 		"node_modules/math-intrinsics": {
3840 | 			"version": "1.1.0",
3841 | 			"resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
3842 | 			"integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
3843 | 			"license": "MIT",
3844 | 			"engines": {
3845 | 				"node": ">= 0.4"
3846 | 			}
3847 | 		},
3848 | 		"node_modules/merge2": {
3849 | 			"version": "1.4.1",
3850 | 			"resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
3851 | 			"integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
3852 | 			"license": "MIT",
3853 | 			"engines": {
3854 | 				"node": ">= 8"
3855 | 			}
3856 | 		},
3857 | 		"node_modules/micromatch": {
3858 | 			"version": "4.0.8",
3859 | 			"resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
3860 | 			"integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
3861 | 			"license": "MIT",
3862 | 			"dependencies": {
3863 | 				"braces": "^3.0.3",
3864 | 				"picomatch": "^2.3.1"
3865 | 			},
3866 | 			"engines": {
3867 | 				"node": ">=8.6"
3868 | 			}
3869 | 		},
3870 | 		"node_modules/micromatch/node_modules/picomatch": {
3871 | 			"version": "2.3.1",
3872 | 			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
3873 | 			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
3874 | 			"license": "MIT",
3875 | 			"engines": {
3876 | 				"node": ">=8.6"
3877 | 			},
3878 | 			"funding": {
3879 | 				"url": "https://github.com/sponsors/jonschlinkert"
3880 | 			}
3881 | 		},
3882 | 		"node_modules/mime-db": {
3883 | 			"version": "1.52.0",
3884 | 			"resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
3885 | 			"integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
3886 | 			"license": "MIT",
3887 | 			"engines": {
3888 | 				"node": ">= 0.6"
3889 | 			}
3890 | 		},
3891 | 		"node_modules/mime-types": {
3892 | 			"version": "2.1.35",
3893 | 			"resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
3894 | 			"integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
3895 | 			"license": "MIT",
3896 | 			"dependencies": {
3897 | 				"mime-db": "1.52.0"
3898 | 			},
3899 | 			"engines": {
3900 | 				"node": ">= 0.6"
3901 | 			}
3902 | 		},
3903 | 		"node_modules/minimalistic-assert": {
3904 | 			"version": "1.0.1",
3905 | 			"resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
3906 | 			"integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
3907 | 			"license": "ISC"
3908 | 		},
3909 | 		"node_modules/minimalistic-crypto-utils": {
3910 | 			"version": "1.0.1",
3911 | 			"resolved": "https://registry.npmjs.org/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz",
3912 | 			"integrity": "sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==",
3913 | 			"license": "MIT"
3914 | 		},
3915 | 		"node_modules/minimatch": {
3916 | 			"version": "9.0.5",
3917 | 			"resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
3918 | 			"integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
3919 | 			"license": "ISC",
3920 | 			"dependencies": {
3921 | 				"brace-expansion": "^2.0.1"
3922 | 			},
3923 | 			"engines": {
3924 | 				"node": ">=16 || 14 >=14.17"
3925 | 			},
3926 | 			"funding": {
3927 | 				"url": "https://github.com/sponsors/isaacs"
3928 | 			}
3929 | 		},
3930 | 		"node_modules/minipass": {
3931 | 			"version": "7.1.2",
3932 | 			"resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
3933 | 			"integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
3934 | 			"license": "ISC",
3935 | 			"engines": {
3936 | 				"node": ">=16 || 14 >=14.17"
3937 | 			}
3938 | 		},
3939 | 		"node_modules/mri": {
3940 | 			"version": "1.2.0",
3941 | 			"resolved": "https://registry.npmjs.org/mri/-/mri-1.2.0.tgz",
3942 | 			"integrity": "sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==",
3943 | 			"license": "MIT",
3944 | 			"engines": {
3945 | 				"node": ">=4"
3946 | 			}
3947 | 		},
3948 | 		"node_modules/mrmime": {
3949 | 			"version": "2.0.1",
3950 | 			"resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.1.tgz",
3951 | 			"integrity": "sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==",
3952 | 			"license": "MIT",
3953 | 			"engines": {
3954 | 				"node": ">=10"
3955 | 			}
3956 | 		},
3957 | 		"node_modules/ms": {
3958 | 			"version": "2.1.3",
3959 | 			"resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
3960 | 			"integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
3961 | 			"license": "MIT"
3962 | 		},
3963 | 		"node_modules/mz": {
3964 | 			"version": "2.7.0",
3965 | 			"resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
3966 | 			"integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
3967 | 			"license": "MIT",
3968 | 			"dependencies": {
3969 | 				"any-promise": "^1.0.0",
3970 | 				"object-assign": "^4.0.1",
3971 | 				"thenify-all": "^1.0.0"
3972 | 			}
3973 | 		},
3974 | 		"node_modules/nanoid": {
3975 | 			"version": "3.3.11",
3976 | 			"resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
3977 | 			"integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
3978 | 			"funding": [
3979 | 				{
3980 | 					"type": "github",
3981 | 					"url": "https://github.com/sponsors/ai"
3982 | 				}
3983 | 			],
3984 | 			"license": "MIT",
3985 | 			"bin": {
3986 | 				"nanoid": "bin/nanoid.cjs"
3987 | 			},
3988 | 			"engines": {
3989 | 				"node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
3990 | 			}
3991 | 		},
3992 | 		"node_modules/next-tick": {
3993 | 			"version": "1.1.0",
3994 | 			"resolved": "https://registry.npmjs.org/next-tick/-/next-tick-1.1.0.tgz",
3995 | 			"integrity": "sha512-CXdUiJembsNjuToQvxayPZF9Vqht7hewsvy2sOWafLvi2awflj9mOC6bHIg50orX8IJvWKY9wYQ/zB2kogPslQ==",
3996 | 			"license": "ISC"
3997 | 		},
3998 | 		"node_modules/node-fetch": {
3999 | 			"version": "2.7.0",
4000 | 			"resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
4001 | 			"integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
4002 | 			"license": "MIT",
4003 | 			"dependencies": {
4004 | 				"whatwg-url": "^5.0.0"
4005 | 			},
4006 | 			"engines": {
4007 | 				"node": "4.x || >=6.0.0"
4008 | 			},
4009 | 			"peerDependencies": {
4010 | 				"encoding": "^0.1.0"
4011 | 			},
4012 | 			"peerDependenciesMeta": {
4013 | 				"encoding": {
4014 | 					"optional": true
4015 | 				}
4016 | 			}
4017 | 		},
4018 | 		"node_modules/node-gyp-build": {
4019 | 			"version": "4.8.4",
4020 | 			"resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.4.tgz",
4021 | 			"integrity": "sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==",
4022 | 			"license": "MIT",
4023 | 			"bin": {
4024 | 				"node-gyp-build": "bin.js",
4025 | 				"node-gyp-build-optional": "optional.js",
4026 | 				"node-gyp-build-test": "build-test.js"
4027 | 			}
4028 | 		},
4029 | 		"node_modules/node-releases": {
4030 | 			"version": "2.0.19",
4031 | 			"resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
4032 | 			"integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
4033 | 			"license": "MIT"
4034 | 		},
4035 | 		"node_modules/normalize-path": {
4036 | 			"version": "3.0.0",
4037 | 			"resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
4038 | 			"integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
4039 | 			"license": "MIT",
4040 | 			"engines": {
4041 | 				"node": ">=0.10.0"
4042 | 			}
4043 | 		},
4044 | 		"node_modules/normalize-range": {
4045 | 			"version": "0.1.2",
4046 | 			"resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
4047 | 			"integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
4048 | 			"license": "MIT",
4049 | 			"engines": {
4050 | 				"node": ">=0.10.0"
4051 | 			}
4052 | 		},
4053 | 		"node_modules/nth-check": {
4054 | 			"version": "2.1.1",
4055 | 			"resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
4056 | 			"integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
4057 | 			"license": "BSD-2-Clause",
4058 | 			"dependencies": {
4059 | 				"boolbase": "^1.0.0"
4060 | 			},
4061 | 			"funding": {
4062 | 				"url": "https://github.com/fb55/nth-check?sponsor=1"
4063 | 			}
4064 | 		},
4065 | 		"node_modules/object-assign": {
4066 | 			"version": "4.1.1",
4067 | 			"resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
4068 | 			"integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
4069 | 			"license": "MIT",
4070 | 			"engines": {
4071 | 				"node": ">=0.10.0"
4072 | 			}
4073 | 		},
4074 | 		"node_modules/object-hash": {
4075 | 			"version": "3.0.0",
4076 | 			"resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
4077 | 			"integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
4078 | 			"license": "MIT",
4079 | 			"engines": {
4080 | 				"node": ">= 6"
4081 | 			}
4082 | 		},
4083 | 		"node_modules/ox": {
4084 | 			"version": "0.8.7",
4085 | 			"resolved": "https://registry.npmjs.org/ox/-/ox-0.8.7.tgz",
4086 | 			"integrity": "sha512-W1f0FiMf9NZqtHPEDEAEkyzZDwbIKfmH2qmQx8NNiQ/9JhxrSblmtLJsSfTtQG5YKowLOnBlLVguCyxm/7ztxw==",
4087 | 			"funding": [
4088 | 				{
4089 | 					"type": "github",
4090 | 					"url": "https://github.com/sponsors/wevm"
4091 | 				}
4092 | 			],
4093 | 			"license": "MIT",
4094 | 			"dependencies": {
4095 | 				"@adraffy/ens-normalize": "^1.11.0",
4096 | 				"@noble/ciphers": "^1.3.0",
4097 | 				"@noble/curves": "^1.9.1",
4098 | 				"@noble/hashes": "^1.8.0",
4099 | 				"@scure/bip32": "^1.7.0",
4100 | 				"@scure/bip39": "^1.6.0",
4101 | 				"abitype": "^1.0.8",
4102 | 				"eventemitter3": "5.0.1"
4103 | 			},
4104 | 			"peerDependencies": {
4105 | 				"typescript": ">=5.4.0"
4106 | 			},
4107 | 			"peerDependenciesMeta": {
4108 | 				"typescript": {
4109 | 					"optional": true
4110 | 				}
4111 | 			}
4112 | 		},
4113 | 		"node_modules/package-json-from-dist": {
4114 | 			"version": "1.0.1",
4115 | 			"resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
4116 | 			"integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
4117 | 			"license": "BlueOak-1.0.0"
4118 | 		},
4119 | 		"node_modules/parse5": {
4120 | 			"version": "7.3.0",
4121 | 			"resolved": "https://registry.npmjs.org/parse5/-/parse5-7.3.0.tgz",
4122 | 			"integrity": "sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==",
4123 | 			"license": "MIT",
4124 | 			"dependencies": {
4125 | 				"entities": "^6.0.0"
4126 | 			},
4127 | 			"funding": {
4128 | 				"url": "https://github.com/inikulin/parse5?sponsor=1"
4129 | 			}
4130 | 		},
4131 | 		"node_modules/parse5-htmlparser2-tree-adapter": {
4132 | 			"version": "7.1.0",
4133 | 			"resolved": "https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-7.1.0.tgz",
4134 | 			"integrity": "sha512-ruw5xyKs6lrpo9x9rCZqZZnIUntICjQAd0Wsmp396Ul9lN/h+ifgVV1x1gZHi8euej6wTfpqX8j+BFQxF0NS/g==",
4135 | 			"license": "MIT",
4136 | 			"dependencies": {
4137 | 				"domhandler": "^5.0.3",
4138 | 				"parse5": "^7.0.0"
4139 | 			},
4140 | 			"funding": {
4141 | 				"url": "https://github.com/inikulin/parse5?sponsor=1"
4142 | 			}
4143 | 		},
4144 | 		"node_modules/parse5-parser-stream": {
4145 | 			"version": "7.1.2",
4146 | 			"resolved": "https://registry.npmjs.org/parse5-parser-stream/-/parse5-parser-stream-7.1.2.tgz",
4147 | 			"integrity": "sha512-JyeQc9iwFLn5TbvvqACIF/VXG6abODeB3Fwmv/TGdLk2LfbWkaySGY72at4+Ty7EkPZj854u4CrICqNk2qIbow==",
4148 | 			"license": "MIT",
4149 | 			"dependencies": {
4150 | 				"parse5": "^7.0.0"
4151 | 			},
4152 | 			"funding": {
4153 | 				"url": "https://github.com/inikulin/parse5?sponsor=1"
4154 | 			}
4155 | 		},
4156 | 		"node_modules/parse5/node_modules/entities": {
4157 | 			"version": "6.0.1",
4158 | 			"resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
4159 | 			"integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
4160 | 			"license": "BSD-2-Clause",
4161 | 			"engines": {
4162 | 				"node": ">=0.12"
4163 | 			},
4164 | 			"funding": {
4165 | 				"url": "https://github.com/fb55/entities?sponsor=1"
4166 | 			}
4167 | 		},
4168 | 		"node_modules/path-key": {
4169 | 			"version": "3.1.1",
4170 | 			"resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
4171 | 			"integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
4172 | 			"license": "MIT",
4173 | 			"engines": {
4174 | 				"node": ">=8"
4175 | 			}
4176 | 		},
4177 | 		"node_modules/path-parse": {
4178 | 			"version": "1.0.7",
4179 | 			"resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
4180 | 			"integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
4181 | 			"license": "MIT"
4182 | 		},
4183 | 		"node_modules/path-scurry": {
4184 | 			"version": "1.11.1",
4185 | 			"resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
4186 | 			"integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
4187 | 			"license": "BlueOak-1.0.0",
4188 | 			"dependencies": {
4189 | 				"lru-cache": "^10.2.0",
4190 | 				"minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
4191 | 			},
4192 | 			"engines": {
4193 | 				"node": ">=16 || 14 >=14.18"
4194 | 			},
4195 | 			"funding": {
4196 | 				"url": "https://github.com/sponsors/isaacs"
4197 | 			}
4198 | 		},
4199 | 		"node_modules/picocolors": {
4200 | 			"version": "1.1.1",
4201 | 			"resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
4202 | 			"integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
4203 | 			"license": "ISC"
4204 | 		},
4205 | 		"node_modules/picomatch": {
4206 | 			"version": "4.0.3",
4207 | 			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
4208 | 			"integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
4209 | 			"license": "MIT",
4210 | 			"engines": {
4211 | 				"node": ">=12"
4212 | 			},
4213 | 			"funding": {
4214 | 				"url": "https://github.com/sponsors/jonschlinkert"
4215 | 			}
4216 | 		},
4217 | 		"node_modules/pify": {
4218 | 			"version": "2.3.0",
4219 | 			"resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
4220 | 			"integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
4221 | 			"license": "MIT",
4222 | 			"engines": {
4223 | 				"node": ">=0.10.0"
4224 | 			}
4225 | 		},
4226 | 		"node_modules/pirates": {
4227 | 			"version": "4.0.7",
4228 | 			"resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
4229 | 			"integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
4230 | 			"license": "MIT",
4231 | 			"engines": {
4232 | 				"node": ">= 6"
4233 | 			}
4234 | 		},
4235 | 		"node_modules/postcss": {
4236 | 			"version": "8.5.6",
4237 | 			"resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
4238 | 			"integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
4239 | 			"funding": [
4240 | 				{
4241 | 					"type": "opencollective",
4242 | 					"url": "https://opencollective.com/postcss/"
4243 | 				},
4244 | 				{
4245 | 					"type": "tidelift",
4246 | 					"url": "https://tidelift.com/funding/github/npm/postcss"
4247 | 				},
4248 | 				{
4249 | 					"type": "github",
4250 | 					"url": "https://github.com/sponsors/ai"
4251 | 				}
4252 | 			],
4253 | 			"license": "MIT",
4254 | 			"dependencies": {
4255 | 				"nanoid": "^3.3.11",
4256 | 				"picocolors": "^1.1.1",
4257 | 				"source-map-js": "^1.2.1"
4258 | 			},
4259 | 			"engines": {
4260 | 				"node": "^10 || ^12 || >=14"
4261 | 			}
4262 | 		},
4263 | 		"node_modules/postcss-import": {
4264 | 			"version": "15.1.0",
4265 | 			"resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
4266 | 			"integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
4267 | 			"license": "MIT",
4268 | 			"dependencies": {
4269 | 				"postcss-value-parser": "^4.0.0",
4270 | 				"read-cache": "^1.0.0",
4271 | 				"resolve": "^1.1.7"
4272 | 			},
4273 | 			"engines": {
4274 | 				"node": ">=14.0.0"
4275 | 			},
4276 | 			"peerDependencies": {
4277 | 				"postcss": "^8.0.0"
4278 | 			}
4279 | 		},
4280 | 		"node_modules/postcss-js": {
4281 | 			"version": "4.0.1",
4282 | 			"resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
4283 | 			"integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
4284 | 			"license": "MIT",
4285 | 			"dependencies": {
4286 | 				"camelcase-css": "^2.0.1"
4287 | 			},
4288 | 			"engines": {
4289 | 				"node": "^12 || ^14 || >= 16"
4290 | 			},
4291 | 			"funding": {
4292 | 				"type": "opencollective",
4293 | 				"url": "https://opencollective.com/postcss/"
4294 | 			},
4295 | 			"peerDependencies": {
4296 | 				"postcss": "^8.4.21"
4297 | 			}
4298 | 		},
4299 | 		"node_modules/postcss-load-config": {
4300 | 			"version": "4.0.2",
4301 | 			"resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
4302 | 			"integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
4303 | 			"funding": [
4304 | 				{
4305 | 					"type": "opencollective",
4306 | 					"url": "https://opencollective.com/postcss/"
4307 | 				},
4308 | 				{
4309 | 					"type": "github",
4310 | 					"url": "https://github.com/sponsors/ai"
4311 | 				}
4312 | 			],
4313 | 			"license": "MIT",
4314 | 			"dependencies": {
4315 | 				"lilconfig": "^3.0.0",
4316 | 				"yaml": "^2.3.4"
4317 | 			},
4318 | 			"engines": {
4319 | 				"node": ">= 14"
4320 | 			},
4321 | 			"peerDependencies": {
4322 | 				"postcss": ">=8.0.9",
4323 | 				"ts-node": ">=9.0.0"
4324 | 			},
4325 | 			"peerDependenciesMeta": {
4326 | 				"postcss": {
4327 | 					"optional": true
4328 | 				},
4329 | 				"ts-node": {
4330 | 					"optional": true
4331 | 				}
4332 | 			}
4333 | 		},
4334 | 		"node_modules/postcss-nested": {
4335 | 			"version": "6.2.0",
4336 | 			"resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
4337 | 			"integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
4338 | 			"funding": [
4339 | 				{
4340 | 					"type": "opencollective",
4341 | 					"url": "https://opencollective.com/postcss/"
4342 | 				},
4343 | 				{
4344 | 					"type": "github",
4345 | 					"url": "https://github.com/sponsors/ai"
4346 | 				}
4347 | 			],
4348 | 			"license": "MIT",
4349 | 			"dependencies": {
4350 | 				"postcss-selector-parser": "^6.1.1"
4351 | 			},
4352 | 			"engines": {
4353 | 				"node": ">=12.0"
4354 | 			},
4355 | 			"peerDependencies": {
4356 | 				"postcss": "^8.2.14"
4357 | 			}
4358 | 		},
4359 | 		"node_modules/postcss-nested/node_modules/postcss-selector-parser": {
4360 | 			"version": "6.1.2",
4361 | 			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
4362 | 			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
4363 | 			"license": "MIT",
4364 | 			"dependencies": {
4365 | 				"cssesc": "^3.0.0",
4366 | 				"util-deprecate": "^1.0.2"
4367 | 			},
4368 | 			"engines": {
4369 | 				"node": ">=4"
4370 | 			}
4371 | 		},
4372 | 		"node_modules/postcss-selector-parser": {
4373 | 			"version": "6.0.10",
4374 | 			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
4375 | 			"integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
4376 | 			"dev": true,
4377 | 			"license": "MIT",
4378 | 			"dependencies": {
4379 | 				"cssesc": "^3.0.0",
4380 | 				"util-deprecate": "^1.0.2"
4381 | 			},
4382 | 			"engines": {
4383 | 				"node": ">=4"
4384 | 			}
4385 | 		},
4386 | 		"node_modules/postcss-value-parser": {
4387 | 			"version": "4.2.0",
4388 | 			"resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
4389 | 			"integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
4390 | 			"license": "MIT"
4391 | 		},
4392 | 		"node_modules/prisma": {
4393 | 			"version": "5.22.0",
4394 | 			"resolved": "https://registry.npmjs.org/prisma/-/prisma-5.22.0.tgz",
4395 | 			"integrity": "sha512-vtpjW3XuYCSnMsNVBjLMNkTj6OZbudcPPTPYHqX0CJfpcdWciI1dM8uHETwmDxxiqEwCIE6WvXucWUetJgfu/A==",
4396 | 			"devOptional": true,
4397 | 			"hasInstallScript": true,
4398 | 			"license": "Apache-2.0",
4399 | 			"dependencies": {
4400 | 				"@prisma/engines": "5.22.0"
4401 | 			},
4402 | 			"bin": {
4403 | 				"prisma": "build/index.js"
4404 | 			},
4405 | 			"engines": {
4406 | 				"node": ">=16.13"
4407 | 			},
4408 | 			"optionalDependencies": {
4409 | 				"fsevents": "2.3.3"
4410 | 			}
4411 | 		},
4412 | 		"node_modules/proxy-from-env": {
4413 | 			"version": "1.1.0",
4414 | 			"resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
4415 | 			"integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
4416 | 			"license": "MIT"
4417 | 		},
4418 | 		"node_modules/queue-microtask": {
4419 | 			"version": "1.2.3",
4420 | 			"resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
4421 | 			"integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
4422 | 			"funding": [
4423 | 				{
4424 | 					"type": "github",
4425 | 					"url": "https://github.com/sponsors/feross"
4426 | 				},
4427 | 				{
4428 | 					"type": "patreon",
4429 | 					"url": "https://www.patreon.com/feross"
4430 | 				},
4431 | 				{
4432 | 					"type": "consulting",
4433 | 					"url": "https://feross.org/support"
4434 | 				}
4435 | 			],
4436 | 			"license": "MIT"
4437 | 		},
4438 | 		"node_modules/read-cache": {
4439 | 			"version": "1.0.0",
4440 | 			"resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
4441 | 			"integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
4442 | 			"license": "MIT",
4443 | 			"dependencies": {
4444 | 				"pify": "^2.3.0"
4445 | 			}
4446 | 		},
4447 | 		"node_modules/readdirp": {
4448 | 			"version": "4.1.2",
4449 | 			"resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
4450 | 			"integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
4451 | 			"dev": true,
4452 | 			"license": "MIT",
4453 | 			"engines": {
4454 | 				"node": ">= 14.18.0"
4455 | 			},
4456 | 			"funding": {
4457 | 				"type": "individual",
4458 | 				"url": "https://paulmillr.com/funding/"
4459 | 			}
4460 | 		},
4461 | 		"node_modules/redis-errors": {
4462 | 			"version": "1.2.0",
4463 | 			"resolved": "https://registry.npmjs.org/redis-errors/-/redis-errors-1.2.0.tgz",
4464 | 			"integrity": "sha512-1qny3OExCf0UvUV/5wpYKf2YwPcOqXzkwKKSmKHiE6ZMQs5heeE/c8eXK+PNllPvmjgAbfnsbpkGZWy8cBpn9w==",
4465 | 			"license": "MIT",
4466 | 			"engines": {
4467 | 				"node": ">=4"
4468 | 			}
4469 | 		},
4470 | 		"node_modules/redis-parser": {
4471 | 			"version": "3.0.0",
4472 | 			"resolved": "https://registry.npmjs.org/redis-parser/-/redis-parser-3.0.0.tgz",
4473 | 			"integrity": "sha512-DJnGAeenTdpMEH6uAJRK/uiyEIH9WVsUmoLwzudwGJUwZPp80PDBWPHXSAGNPwNvIXAbe7MSUB1zQFugFml66A==",
4474 | 			"license": "MIT",
4475 | 			"dependencies": {
4476 | 				"redis-errors": "^1.0.0"
4477 | 			},
4478 | 			"engines": {
4479 | 				"node": ">=4"
4480 | 			}
4481 | 		},
4482 | 		"node_modules/resolve": {
4483 | 			"version": "1.22.10",
4484 | 			"resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
4485 | 			"integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
4486 | 			"license": "MIT",
4487 | 			"dependencies": {
4488 | 				"is-core-module": "^2.16.0",
4489 | 				"path-parse": "^1.0.7",
4490 | 				"supports-preserve-symlinks-flag": "^1.0.0"
4491 | 			},
4492 | 			"bin": {
4493 | 				"resolve": "bin/resolve"
4494 | 			},
4495 | 			"engines": {
4496 | 				"node": ">= 0.4"
4497 | 			},
4498 | 			"funding": {
4499 | 				"url": "https://github.com/sponsors/ljharb"
4500 | 			}
4501 | 		},
4502 | 		"node_modules/resolve-pkg-maps": {
4503 | 			"version": "1.0.0",
4504 | 			"resolved": "https://registry.npmjs.org/resolve-pkg-maps/-/resolve-pkg-maps-1.0.0.tgz",
4505 | 			"integrity": "sha512-seS2Tj26TBVOC2NIc2rOe2y2ZO7efxITtLZcGSOnHHNOQ7CkiUBfw0Iw2ck6xkIhPwLhKNLS8BO+hEpngQlqzw==",
4506 | 			"devOptional": true,
4507 | 			"license": "MIT",
4508 | 			"funding": {
4509 | 				"url": "https://github.com/privatenumber/resolve-pkg-maps?sponsor=1"
4510 | 			}
4511 | 		},
4512 | 		"node_modules/reusify": {
4513 | 			"version": "1.1.0",
4514 | 			"resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
4515 | 			"integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
4516 | 			"license": "MIT",
4517 | 			"engines": {
4518 | 				"iojs": ">=1.0.0",
4519 | 				"node": ">=0.10.0"
4520 | 			}
4521 | 		},
4522 | 		"node_modules/rollup": {
4523 | 			"version": "4.48.0",
4524 | 			"resolved": "https://registry.npmjs.org/rollup/-/rollup-4.48.0.tgz",
4525 | 			"integrity": "sha512-BXHRqK1vyt9XVSEHZ9y7xdYtuYbwVod2mLwOMFP7t/Eqoc1pHRlG/WdV2qNeNvZHRQdLedaFycljaYYM96RqJQ==",
4526 | 			"license": "MIT",
4527 | 			"dependencies": {
4528 | 				"@types/estree": "1.0.8"
4529 | 			},
4530 | 			"bin": {
4531 | 				"rollup": "dist/bin/rollup"
4532 | 			},
4533 | 			"engines": {
4534 | 				"node": ">=18.0.0",
4535 | 				"npm": ">=8.0.0"
4536 | 			},
4537 | 			"optionalDependencies": {
4538 | 				"@rollup/rollup-android-arm-eabi": "4.48.0",
4539 | 				"@rollup/rollup-android-arm64": "4.48.0",
4540 | 				"@rollup/rollup-darwin-arm64": "4.48.0",
4541 | 				"@rollup/rollup-darwin-x64": "4.48.0",
4542 | 				"@rollup/rollup-freebsd-arm64": "4.48.0",
4543 | 				"@rollup/rollup-freebsd-x64": "4.48.0",
4544 | 				"@rollup/rollup-linux-arm-gnueabihf": "4.48.0",
4545 | 				"@rollup/rollup-linux-arm-musleabihf": "4.48.0",
4546 | 				"@rollup/rollup-linux-arm64-gnu": "4.48.0",
4547 | 				"@rollup/rollup-linux-arm64-musl": "4.48.0",
4548 | 				"@rollup/rollup-linux-loongarch64-gnu": "4.48.0",
4549 | 				"@rollup/rollup-linux-ppc64-gnu": "4.48.0",
4550 | 				"@rollup/rollup-linux-riscv64-gnu": "4.48.0",
4551 | 				"@rollup/rollup-linux-riscv64-musl": "4.48.0",
4552 | 				"@rollup/rollup-linux-s390x-gnu": "4.48.0",
4553 | 				"@rollup/rollup-linux-x64-gnu": "4.48.0",
4554 | 				"@rollup/rollup-linux-x64-musl": "4.48.0",
4555 | 				"@rollup/rollup-win32-arm64-msvc": "4.48.0",
4556 | 				"@rollup/rollup-win32-ia32-msvc": "4.48.0",
4557 | 				"@rollup/rollup-win32-x64-msvc": "4.48.0",
4558 | 				"fsevents": "~2.3.2"
4559 | 			}
4560 | 		},
4561 | 		"node_modules/rpc-websockets": {
4562 | 			"version": "9.1.3",
4563 | 			"resolved": "https://registry.npmjs.org/rpc-websockets/-/rpc-websockets-9.1.3.tgz",
4564 | 			"integrity": "sha512-I+kNjW0udB4Fetr3vvtRuYZJS0PcSPyyvBcH5sDdoV8DFs5E4W2pTr7aiMlKfPxANTClP9RlqCPolj9dd5MsEA==",
4565 | 			"license": "LGPL-3.0-only",
4566 | 			"dependencies": {
4567 | 				"@swc/helpers": "^0.5.11",
4568 | 				"@types/uuid": "^8.3.4",
4569 | 				"@types/ws": "^8.2.2",
4570 | 				"buffer": "^6.0.3",
4571 | 				"eventemitter3": "^5.0.1",
4572 | 				"uuid": "^8.3.2",
4573 | 				"ws": "^8.5.0"
4574 | 			},
4575 | 			"funding": {
4576 | 				"type": "paypal",
4577 | 				"url": "https://paypal.me/kozjak"
4578 | 			},
4579 | 			"optionalDependencies": {
4580 | 				"bufferutil": "^4.0.1",
4581 | 				"utf-8-validate": "^5.0.2"
4582 | 			}
4583 | 		},
4584 | 		"node_modules/rpc-websockets/node_modules/@types/ws": {
4585 | 			"version": "8.18.1",
4586 | 			"resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
4587 | 			"integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
4588 | 			"license": "MIT",
4589 | 			"dependencies": {
4590 | 				"@types/node": "*"
4591 | 			}
4592 | 		},
4593 | 		"node_modules/run-parallel": {
4594 | 			"version": "1.2.0",
4595 | 			"resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
4596 | 			"integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
4597 | 			"funding": [
4598 | 				{
4599 | 					"type": "github",
4600 | 					"url": "https://github.com/sponsors/feross"
4601 | 				},
4602 | 				{
4603 | 					"type": "patreon",
4604 | 					"url": "https://www.patreon.com/feross"
4605 | 				},
4606 | 				{
4607 | 					"type": "consulting",
4608 | 					"url": "https://feross.org/support"
4609 | 				}
4610 | 			],
4611 | 			"license": "MIT",
4612 | 			"dependencies": {
4613 | 				"queue-microtask": "^1.2.2"
4614 | 			}
4615 | 		},
4616 | 		"node_modules/sade": {
4617 | 			"version": "1.8.1",
4618 | 			"resolved": "https://registry.npmjs.org/sade/-/sade-1.8.1.tgz",
4619 | 			"integrity": "sha512-xal3CZX1Xlo/k4ApwCFrHVACi9fBqJ7V+mwhBsuf/1IOKbBy098Fex+Wa/5QMubw09pSZ/u8EY8PWgevJsXp1A==",
4620 | 			"license": "MIT",
4621 | 			"dependencies": {
4622 | 				"mri": "^1.1.0"
4623 | 			},
4624 | 			"engines": {
4625 | 				"node": ">=6"
4626 | 			}
4627 | 		},
4628 | 		"node_modules/safe-buffer": {
4629 | 			"version": "5.2.1",
4630 | 			"resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
4631 | 			"integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
4632 | 			"funding": [
4633 | 				{
4634 | 					"type": "github",
4635 | 					"url": "https://github.com/sponsors/feross"
4636 | 				},
4637 | 				{
4638 | 					"type": "patreon",
4639 | 					"url": "https://www.patreon.com/feross"
4640 | 				},
4641 | 				{
4642 | 					"type": "consulting",
4643 | 					"url": "https://feross.org/support"
4644 | 				}
4645 | 			],
4646 | 			"license": "MIT"
4647 | 		},
4648 | 		"node_modules/safer-buffer": {
4649 | 			"version": "2.1.2",
4650 | 			"resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
4651 | 			"integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
4652 | 			"license": "MIT"
4653 | 		},
4654 | 		"node_modules/scrypt-js": {
4655 | 			"version": "3.0.1",
4656 | 			"resolved": "https://registry.npmjs.org/scrypt-js/-/scrypt-js-3.0.1.tgz",
4657 | 			"integrity": "sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA==",
4658 | 			"license": "MIT"
4659 | 		},
4660 | 		"node_modules/set-cookie-parser": {
4661 | 			"version": "2.7.1",
4662 | 			"resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
4663 | 			"integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
4664 | 			"license": "MIT"
4665 | 		},
4666 | 		"node_modules/shebang-command": {
4667 | 			"version": "2.0.0",
4668 | 			"resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
4669 | 			"integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
4670 | 			"license": "MIT",
4671 | 			"dependencies": {
4672 | 				"shebang-regex": "^3.0.0"
4673 | 			},
4674 | 			"engines": {
4675 | 				"node": ">=8"
4676 | 			}
4677 | 		},
4678 | 		"node_modules/shebang-regex": {
4679 | 			"version": "3.0.0",
4680 | 			"resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
4681 | 			"integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
4682 | 			"license": "MIT",
4683 | 			"engines": {
4684 | 				"node": ">=8"
4685 | 			}
4686 | 		},
4687 | 		"node_modules/signal-exit": {
4688 | 			"version": "4.1.0",
4689 | 			"resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
4690 | 			"integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
4691 | 			"license": "ISC",
4692 | 			"engines": {
4693 | 				"node": ">=14"
4694 | 			},
4695 | 			"funding": {
4696 | 				"url": "https://github.com/sponsors/isaacs"
4697 | 			}
4698 | 		},
4699 | 		"node_modules/sirv": {
4700 | 			"version": "3.0.1",
4701 | 			"resolved": "https://registry.npmjs.org/sirv/-/sirv-3.0.1.tgz",
4702 | 			"integrity": "sha512-FoqMu0NCGBLCcAkS1qA+XJIQTR6/JHfQXl+uGteNCQ76T91DMUjPa9xfmeqMY3z80nLSg9yQmNjK0Px6RWsH/A==",
4703 | 			"license": "MIT",
4704 | 			"dependencies": {
4705 | 				"@polka/url": "^1.0.0-next.24",
4706 | 				"mrmime": "^2.0.0",
4707 | 				"totalist": "^3.0.0"
4708 | 			},
4709 | 			"engines": {
4710 | 				"node": ">=18"
4711 | 			}
4712 | 		},
4713 | 		"node_modules/source-map-js": {
4714 | 			"version": "1.2.1",
4715 | 			"resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
4716 | 			"integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
4717 | 			"license": "BSD-3-Clause",
4718 | 			"engines": {
4719 | 				"node": ">=0.10.0"
4720 | 			}
4721 | 		},
4722 | 		"node_modules/standard-as-callback": {
4723 | 			"version": "2.1.0",
4724 | 			"resolved": "https://registry.npmjs.org/standard-as-callback/-/standard-as-callback-2.1.0.tgz",
4725 | 			"integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==",
4726 | 			"license": "MIT"
4727 | 		},
4728 | 		"node_modules/stream-chain": {
4729 | 			"version": "2.2.5",
4730 | 			"resolved": "https://registry.npmjs.org/stream-chain/-/stream-chain-2.2.5.tgz",
4731 | 			"integrity": "sha512-1TJmBx6aSWqZ4tx7aTpBDXK0/e2hhcNSTV8+CbFJtDjbb+I1mZ8lHit0Grw9GRT+6JbIrrDd8esncgBi8aBXGA==",
4732 | 			"license": "BSD-3-Clause"
4733 | 		},
4734 | 		"node_modules/stream-json": {
4735 | 			"version": "1.9.1",
4736 | 			"resolved": "https://registry.npmjs.org/stream-json/-/stream-json-1.9.1.tgz",
4737 | 			"integrity": "sha512-uWkjJ+2Nt/LO9Z/JyKZbMusL8Dkh97uUBTv3AJQ74y07lVahLY4eEFsPsE97pxYBwr8nnjMAIch5eqI0gPShyw==",
4738 | 			"license": "BSD-3-Clause",
4739 | 			"dependencies": {
4740 | 				"stream-chain": "^2.2.5"
4741 | 			}
4742 | 		},
4743 | 		"node_modules/string-width": {
4744 | 			"version": "5.1.2",
4745 | 			"resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
4746 | 			"integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
4747 | 			"license": "MIT",
4748 | 			"dependencies": {
4749 | 				"eastasianwidth": "^0.2.0",
4750 | 				"emoji-regex": "^9.2.2",
4751 | 				"strip-ansi": "^7.0.1"
4752 | 			},
4753 | 			"engines": {
4754 | 				"node": ">=12"
4755 | 			},
4756 | 			"funding": {
4757 | 				"url": "https://github.com/sponsors/sindresorhus"
4758 | 			}
4759 | 		},
4760 | 		"node_modules/string-width-cjs": {
4761 | 			"name": "string-width",
4762 | 			"version": "4.2.3",
4763 | 			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
4764 | 			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
4765 | 			"license": "MIT",
4766 | 			"dependencies": {
4767 | 				"emoji-regex": "^8.0.0",
4768 | 				"is-fullwidth-code-point": "^3.0.0",
4769 | 				"strip-ansi": "^6.0.1"
4770 | 			},
4771 | 			"engines": {
4772 | 				"node": ">=8"
4773 | 			}
4774 | 		},
4775 | 		"node_modules/string-width-cjs/node_modules/ansi-regex": {
4776 | 			"version": "5.0.1",
4777 | 			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
4778 | 			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
4779 | 			"license": "MIT",
4780 | 			"engines": {
4781 | 				"node": ">=8"
4782 | 			}
4783 | 		},
4784 | 		"node_modules/string-width-cjs/node_modules/emoji-regex": {
4785 | 			"version": "8.0.0",
4786 | 			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
4787 | 			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
4788 | 			"license": "MIT"
4789 | 		},
4790 | 		"node_modules/string-width-cjs/node_modules/strip-ansi": {
4791 | 			"version": "6.0.1",
4792 | 			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
4793 | 			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
4794 | 			"license": "MIT",
4795 | 			"dependencies": {
4796 | 				"ansi-regex": "^5.0.1"
4797 | 			},
4798 | 			"engines": {
4799 | 				"node": ">=8"
4800 | 			}
4801 | 		},
4802 | 		"node_modules/strip-ansi": {
4803 | 			"version": "7.1.0",
4804 | 			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
4805 | 			"integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
4806 | 			"license": "MIT",
4807 | 			"dependencies": {
4808 | 				"ansi-regex": "^6.0.1"
4809 | 			},
4810 | 			"engines": {
4811 | 				"node": ">=12"
4812 | 			},
4813 | 			"funding": {
4814 | 				"url": "https://github.com/chalk/strip-ansi?sponsor=1"
4815 | 			}
4816 | 		},
4817 | 		"node_modules/strip-ansi-cjs": {
4818 | 			"name": "strip-ansi",
4819 | 			"version": "6.0.1",
4820 | 			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
4821 | 			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
4822 | 			"license": "MIT",
4823 | 			"dependencies": {
4824 | 				"ansi-regex": "^5.0.1"
4825 | 			},
4826 | 			"engines": {
4827 | 				"node": ">=8"
4828 | 			}
4829 | 		},
4830 | 		"node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
4831 | 			"version": "5.0.1",
4832 | 			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
4833 | 			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
4834 | 			"license": "MIT",
4835 | 			"engines": {
4836 | 				"node": ">=8"
4837 | 			}
4838 | 		},
4839 | 		"node_modules/sturdy-websocket": {
4840 | 			"version": "0.2.1",
4841 | 			"resolved": "https://registry.npmjs.org/sturdy-websocket/-/sturdy-websocket-0.2.1.tgz",
4842 | 			"integrity": "sha512-NnzSOEKyv4I83qbuKw9ROtJrrT6Z/Xt7I0HiP/e6H6GnpeTDvzwGIGeJ8slai+VwODSHQDooW2CAilJwT9SpRg==",
4843 | 			"license": "MIT"
4844 | 		},
4845 | 		"node_modules/sucrase": {
4846 | 			"version": "3.35.0",
4847 | 			"resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
4848 | 			"integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
4849 | 			"license": "MIT",
4850 | 			"dependencies": {
4851 | 				"@jridgewell/gen-mapping": "^0.3.2",
4852 | 				"commander": "^4.0.0",
4853 | 				"glob": "^10.3.10",
4854 | 				"lines-and-columns": "^1.1.6",
4855 | 				"mz": "^2.7.0",
4856 | 				"pirates": "^4.0.1",
4857 | 				"ts-interface-checker": "^0.1.9"
4858 | 			},
4859 | 			"bin": {
4860 | 				"sucrase": "bin/sucrase",
4861 | 				"sucrase-node": "bin/sucrase-node"
4862 | 			},
4863 | 			"engines": {
4864 | 				"node": ">=16 || 14 >=14.17"
4865 | 			}
4866 | 		},
4867 | 		"node_modules/superstruct": {
4868 | 			"version": "2.0.2",
4869 | 			"resolved": "https://registry.npmjs.org/superstruct/-/superstruct-2.0.2.tgz",
4870 | 			"integrity": "sha512-uV+TFRZdXsqXTL2pRvujROjdZQ4RAlBUS5BTh9IGm+jTqQntYThciG/qu57Gs69yjnVUSqdxF9YLmSnpupBW9A==",
4871 | 			"license": "MIT",
4872 | 			"engines": {
4873 | 				"node": ">=14.0.0"
4874 | 			}
4875 | 		},
4876 | 		"node_modules/supports-preserve-symlinks-flag": {
4877 | 			"version": "1.0.0",
4878 | 			"resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
4879 | 			"integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
4880 | 			"license": "MIT",
4881 | 			"engines": {
4882 | 				"node": ">= 0.4"
4883 | 			},
4884 | 			"funding": {
4885 | 				"url": "https://github.com/sponsors/ljharb"
4886 | 			}
4887 | 		},
4888 | 		"node_modules/svelte": {
4889 | 			"version": "5.38.2",
4890 | 			"resolved": "https://registry.npmjs.org/svelte/-/svelte-5.38.2.tgz",
4891 | 			"integrity": "sha512-iAcp/oFAWauVSGILdD67n7DiwgLHXZzWZIdzl7araRxu72jUr7PFAo2Iie7gXt0IbnlYvhxCb9GT3ZJUquO3PA==",
4892 | 			"license": "MIT",
4893 | 			"dependencies": {
4894 | 				"@jridgewell/remapping": "^2.3.4",
4895 | 				"@jridgewell/sourcemap-codec": "^1.5.0",
4896 | 				"@sveltejs/acorn-typescript": "^1.0.5",
4897 | 				"@types/estree": "^1.0.5",
4898 | 				"acorn": "^8.12.1",
4899 | 				"aria-query": "^5.3.1",
4900 | 				"axobject-query": "^4.1.0",
4901 | 				"clsx": "^2.1.1",
4902 | 				"esm-env": "^1.2.1",
4903 | 				"esrap": "^2.1.0",
4904 | 				"is-reference": "^3.0.3",
4905 | 				"locate-character": "^3.0.0",
4906 | 				"magic-string": "^0.30.11",
4907 | 				"zimmerframe": "^1.1.2"
4908 | 			},
4909 | 			"engines": {
4910 | 				"node": ">=18"
4911 | 			}
4912 | 		},
4913 | 		"node_modules/svelte-check": {
4914 | 			"version": "4.3.1",
4915 | 			"resolved": "https://registry.npmjs.org/svelte-check/-/svelte-check-4.3.1.tgz",
4916 | 			"integrity": "sha512-lkh8gff5gpHLjxIV+IaApMxQhTGnir2pNUAqcNgeKkvK5bT/30Ey/nzBxNLDlkztCH4dP7PixkMt9SWEKFPBWg==",
4917 | 			"dev": true,
4918 | 			"license": "MIT",
4919 | 			"dependencies": {
4920 | 				"@jridgewell/trace-mapping": "^0.3.25",
4921 | 				"chokidar": "^4.0.1",
4922 | 				"fdir": "^6.2.0",
4923 | 				"picocolors": "^1.0.0",
4924 | 				"sade": "^1.7.4"
4925 | 			},
4926 | 			"bin": {
4927 | 				"svelte-check": "bin/svelte-check"
4928 | 			},
4929 | 			"engines": {
4930 | 				"node": ">= 18.0.0"
4931 | 			},
4932 | 			"peerDependencies": {
4933 | 				"svelte": "^4.0.0 || ^5.0.0-next.0",
4934 | 				"typescript": ">=5.0.0"
4935 | 			}
4936 | 		},
4937 | 		"node_modules/tailwindcss": {
4938 | 			"version": "3.4.17",
4939 | 			"resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
4940 | 			"integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
4941 | 			"license": "MIT",
4942 | 			"dependencies": {
4943 | 				"@alloc/quick-lru": "^5.2.0",
4944 | 				"arg": "^5.0.2",
4945 | 				"chokidar": "^3.6.0",
4946 | 				"didyoumean": "^1.2.2",
4947 | 				"dlv": "^1.1.3",
4948 | 				"fast-glob": "^3.3.2",
4949 | 				"glob-parent": "^6.0.2",
4950 | 				"is-glob": "^4.0.3",
4951 | 				"jiti": "^1.21.6",
4952 | 				"lilconfig": "^3.1.3",
4953 | 				"micromatch": "^4.0.8",
4954 | 				"normalize-path": "^3.0.0",
4955 | 				"object-hash": "^3.0.0",
4956 | 				"picocolors": "^1.1.1",
4957 | 				"postcss": "^8.4.47",
4958 | 				"postcss-import": "^15.1.0",
4959 | 				"postcss-js": "^4.0.1",
4960 | 				"postcss-load-config": "^4.0.2",
4961 | 				"postcss-nested": "^6.2.0",
4962 | 				"postcss-selector-parser": "^6.1.2",
4963 | 				"resolve": "^1.22.8",
4964 | 				"sucrase": "^3.35.0"
4965 | 			},
4966 | 			"bin": {
4967 | 				"tailwind": "lib/cli.js",
4968 | 				"tailwindcss": "lib/cli.js"
4969 | 			},
4970 | 			"engines": {
4971 | 				"node": ">=14.0.0"
4972 | 			}
4973 | 		},
4974 | 		"node_modules/tailwindcss/node_modules/chokidar": {
4975 | 			"version": "3.6.0",
4976 | 			"resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
4977 | 			"integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
4978 | 			"license": "MIT",
4979 | 			"dependencies": {
4980 | 				"anymatch": "~3.1.2",
4981 | 				"braces": "~3.0.2",
4982 | 				"glob-parent": "~5.1.2",
4983 | 				"is-binary-path": "~2.1.0",
4984 | 				"is-glob": "~4.0.1",
4985 | 				"normalize-path": "~3.0.0",
4986 | 				"readdirp": "~3.6.0"
4987 | 			},
4988 | 			"engines": {
4989 | 				"node": ">= 8.10.0"
4990 | 			},
4991 | 			"funding": {
4992 | 				"url": "https://paulmillr.com/funding/"
4993 | 			},
4994 | 			"optionalDependencies": {
4995 | 				"fsevents": "~2.3.2"
4996 | 			}
4997 | 		},
4998 | 		"node_modules/tailwindcss/node_modules/chokidar/node_modules/glob-parent": {
4999 | 			"version": "5.1.2",
5000 | 			"resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
5001 | 			"integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
5002 | 			"license": "ISC",
5003 | 			"dependencies": {
5004 | 				"is-glob": "^4.0.1"
5005 | 			},
5006 | 			"engines": {
5007 | 				"node": ">= 6"
5008 | 			}
5009 | 		},
5010 | 		"node_modules/tailwindcss/node_modules/picomatch": {
5011 | 			"version": "2.3.1",
5012 | 			"resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
5013 | 			"integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
5014 | 			"license": "MIT",
5015 | 			"engines": {
5016 | 				"node": ">=8.6"
5017 | 			},
5018 | 			"funding": {
5019 | 				"url": "https://github.com/sponsors/jonschlinkert"
5020 | 			}
5021 | 		},
5022 | 		"node_modules/tailwindcss/node_modules/postcss-selector-parser": {
5023 | 			"version": "6.1.2",
5024 | 			"resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
5025 | 			"integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
5026 | 			"license": "MIT",
5027 | 			"dependencies": {
5028 | 				"cssesc": "^3.0.0",
5029 | 				"util-deprecate": "^1.0.2"
5030 | 			},
5031 | 			"engines": {
5032 | 				"node": ">=4"
5033 | 			}
5034 | 		},
5035 | 		"node_modules/tailwindcss/node_modules/readdirp": {
5036 | 			"version": "3.6.0",
5037 | 			"resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
5038 | 			"integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
5039 | 			"license": "MIT",
5040 | 			"dependencies": {
5041 | 				"picomatch": "^2.2.1"
5042 | 			},
5043 | 			"engines": {
5044 | 				"node": ">=8.10.0"
5045 | 			}
5046 | 		},
5047 | 		"node_modules/text-encoding-utf-8": {
5048 | 			"version": "1.0.2",
5049 | 			"resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
5050 | 			"integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
5051 | 		},
5052 | 		"node_modules/thenify": {
5053 | 			"version": "3.3.1",
5054 | 			"resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
5055 | 			"integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
5056 | 			"license": "MIT",
5057 | 			"dependencies": {
5058 | 				"any-promise": "^1.0.0"
5059 | 			}
5060 | 		},
5061 | 		"node_modules/thenify-all": {
5062 | 			"version": "1.6.0",
5063 | 			"resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
5064 | 			"integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
5065 | 			"license": "MIT",
5066 | 			"dependencies": {
5067 | 				"thenify": ">= 3.1.0 < 4"
5068 | 			},
5069 | 			"engines": {
5070 | 				"node": ">=0.8"
5071 | 			}
5072 | 		},
5073 | 		"node_modules/tinyglobby": {
5074 | 			"version": "0.2.14",
5075 | 			"resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
5076 | 			"integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
5077 | 			"license": "MIT",
5078 | 			"dependencies": {
5079 | 				"fdir": "^6.4.4",
5080 | 				"picomatch": "^4.0.2"
5081 | 			},
5082 | 			"engines": {
5083 | 				"node": ">=12.0.0"
5084 | 			},
5085 | 			"funding": {
5086 | 				"url": "https://github.com/sponsors/SuperchupuDev"
5087 | 			}
5088 | 		},
5089 | 		"node_modules/to-regex-range": {
5090 | 			"version": "5.0.1",
5091 | 			"resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
5092 | 			"integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
5093 | 			"license": "MIT",
5094 | 			"dependencies": {
5095 | 				"is-number": "^7.0.0"
5096 | 			},
5097 | 			"engines": {
5098 | 				"node": ">=8.0"
5099 | 			}
5100 | 		},
5101 | 		"node_modules/totalist": {
5102 | 			"version": "3.0.1",
5103 | 			"resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
5104 | 			"integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
5105 | 			"license": "MIT",
5106 | 			"engines": {
5107 | 				"node": ">=6"
5108 | 			}
5109 | 		},
5110 | 		"node_modules/tr46": {
5111 | 			"version": "0.0.3",
5112 | 			"resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
5113 | 			"integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
5114 | 			"license": "MIT"
5115 | 		},
5116 | 		"node_modules/ts-interface-checker": {
5117 | 			"version": "0.1.13",
5118 | 			"resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
5119 | 			"integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
5120 | 			"license": "Apache-2.0"
5121 | 		},
5122 | 		"node_modules/tslib": {
5123 | 			"version": "2.8.1",
5124 | 			"resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
5125 | 			"integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
5126 | 			"license": "0BSD"
5127 | 		},
5128 | 		"node_modules/tsx": {
5129 | 			"version": "4.20.5",
5130 | 			"resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.5.tgz",
5131 | 			"integrity": "sha512-+wKjMNU9w/EaQayHXb7WA7ZaHY6hN8WgfvHNQ3t1PnU91/7O8TcTnIhCDYTZwnt8JsO9IBqZ30Ln1r7pPF52Aw==",
5132 | 			"devOptional": true,
5133 | 			"license": "MIT",
5134 | 			"dependencies": {
5135 | 				"esbuild": "~0.25.0",
5136 | 				"get-tsconfig": "^4.7.5"
5137 | 			},
5138 | 			"bin": {
5139 | 				"tsx": "dist/cli.mjs"
5140 | 			},
5141 | 			"engines": {
5142 | 				"node": ">=18.0.0"
5143 | 			},
5144 | 			"optionalDependencies": {
5145 | 				"fsevents": "~2.3.3"
5146 | 			}
5147 | 		},
5148 | 		"node_modules/type": {
5149 | 			"version": "2.7.3",
5150 | 			"resolved": "https://registry.npmjs.org/type/-/type-2.7.3.tgz",
5151 | 			"integrity": "sha512-8j+1QmAbPvLZow5Qpi6NCaN8FB60p/6x8/vfNqOk/hC+HuvFZhL4+WfekuhQLiqFZXOgQdrs3B+XxEmCc6b3FQ==",
5152 | 			"license": "ISC"
5153 | 		},
5154 | 		"node_modules/typedarray-to-buffer": {
5155 | 			"version": "3.1.5",
5156 | 			"resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
5157 | 			"integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
5158 | 			"license": "MIT",
5159 | 			"dependencies": {
5160 | 				"is-typedarray": "^1.0.0"
5161 | 			}
5162 | 		},
5163 | 		"node_modules/typescript": {
5164 | 			"version": "5.9.2",
5165 | 			"resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
5166 | 			"integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
5167 | 			"license": "Apache-2.0",
5168 | 			"bin": {
5169 | 				"tsc": "bin/tsc",
5170 | 				"tsserver": "bin/tsserver"
5171 | 			},
5172 | 			"engines": {
5173 | 				"node": ">=14.17"
5174 | 			}
5175 | 		},
5176 | 		"node_modules/undici": {
5177 | 			"version": "7.15.0",
5178 | 			"resolved": "https://registry.npmjs.org/undici/-/undici-7.15.0.tgz",
5179 | 			"integrity": "sha512-7oZJCPvvMvTd0OlqWsIxTuItTpJBpU1tcbVl24FMn3xt3+VSunwUasmfPJRE57oNO1KsZ4PgA1xTdAX4hq8NyQ==",
5180 | 			"license": "MIT",
5181 | 			"engines": {
5182 | 				"node": ">=20.18.1"
5183 | 			}
5184 | 		},
5185 | 		"node_modules/undici-types": {
5186 | 			"version": "7.10.0",
5187 | 			"resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.10.0.tgz",
5188 | 			"integrity": "sha512-t5Fy/nfn+14LuOc2KNYg75vZqClpAiqscVvMygNnlsHBFpSXdJaYtXMcdNLpl/Qvc3P2cB3s6lOV51nqsFq4ag==",
5189 | 			"license": "MIT"
5190 | 		},
5191 | 		"node_modules/update-browserslist-db": {
5192 | 			"version": "1.1.3",
5193 | 			"resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
5194 | 			"integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
5195 | 			"funding": [
5196 | 				{
5197 | 					"type": "opencollective",
5198 | 					"url": "https://opencollective.com/browserslist"
5199 | 				},
5200 | 				{
5201 | 					"type": "tidelift",
5202 | 					"url": "https://tidelift.com/funding/github/npm/browserslist"
5203 | 				},
5204 | 				{
5205 | 					"type": "github",
5206 | 					"url": "https://github.com/sponsors/ai"
5207 | 				}
5208 | 			],
5209 | 			"license": "MIT",
5210 | 			"dependencies": {
5211 | 				"escalade": "^3.2.0",
5212 | 				"picocolors": "^1.1.1"
5213 | 			},
5214 | 			"bin": {
5215 | 				"update-browserslist-db": "cli.js"
5216 | 			},
5217 | 			"peerDependencies": {
5218 | 				"browserslist": ">= 4.21.0"
5219 | 			}
5220 | 		},
5221 | 		"node_modules/utf-8-validate": {
5222 | 			"version": "5.0.10",
5223 | 			"resolved": "https://registry.npmjs.org/utf-8-validate/-/utf-8-validate-5.0.10.tgz",
5224 | 			"integrity": "sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==",
5225 | 			"hasInstallScript": true,
5226 | 			"license": "MIT",
5227 | 			"dependencies": {
5228 | 				"node-gyp-build": "^4.3.0"
5229 | 			},
5230 | 			"engines": {
5231 | 				"node": ">=6.14.2"
5232 | 			}
5233 | 		},
5234 | 		"node_modules/util-deprecate": {
5235 | 			"version": "1.0.2",
5236 | 			"resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
5237 | 			"integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
5238 | 			"license": "MIT"
5239 | 		},
5240 | 		"node_modules/uuid": {
5241 | 			"version": "8.3.2",
5242 | 			"resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
5243 | 			"integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
5244 | 			"license": "MIT",
5245 | 			"bin": {
5246 | 				"uuid": "dist/bin/uuid"
5247 | 			}
5248 | 		},
5249 | 		"node_modules/viem": {
5250 | 			"version": "2.34.0",
5251 | 			"resolved": "https://registry.npmjs.org/viem/-/viem-2.34.0.tgz",
5252 | 			"integrity": "sha512-HJZG9Wt0DLX042MG0PK17tpataxtdAEhpta9/Q44FqKwy3xZMI5Lx4jF+zZPuXFuYjZ68R0PXqRwlswHs6r4gA==",
5253 | 			"funding": [
5254 | 				{
5255 | 					"type": "github",
5256 | 					"url": "https://github.com/sponsors/wevm"
5257 | 				}
5258 | 			],
5259 | 			"license": "MIT",
5260 | 			"dependencies": {
5261 | 				"@noble/curves": "1.9.6",
5262 | 				"@noble/hashes": "1.8.0",
5263 | 				"@scure/bip32": "1.7.0",
5264 | 				"@scure/bip39": "1.6.0",
5265 | 				"abitype": "1.0.8",
5266 | 				"isows": "1.0.7",
5267 | 				"ox": "0.8.7",
5268 | 				"ws": "8.18.3"
5269 | 			},
5270 | 			"peerDependencies": {
5271 | 				"typescript": ">=5.0.4"
5272 | 			},
5273 | 			"peerDependenciesMeta": {
5274 | 				"typescript": {
5275 | 					"optional": true
5276 | 				}
5277 | 			}
5278 | 		},
5279 | 		"node_modules/viem/node_modules/@noble/curves": {
5280 | 			"version": "1.9.6",
5281 | 			"resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.9.6.tgz",
5282 | 			"integrity": "sha512-GIKz/j99FRthB8icyJQA51E8Uk5hXmdyThjgQXRKiv9h0zeRlzSCLIzFw6K1LotZ3XuB7yzlf76qk7uBmTdFqA==",
5283 | 			"license": "MIT",
5284 | 			"dependencies": {
5285 | 				"@noble/hashes": "1.8.0"
5286 | 			},
5287 | 			"engines": {
5288 | 				"node": "^14.21.3 || >=16"
5289 | 			},
5290 | 			"funding": {
5291 | 				"url": "https://paulmillr.com/funding/"
5292 | 			}
5293 | 		},
5294 | 		"node_modules/viem/node_modules/ws": {
5295 | 			"version": "8.18.3",
5296 | 			"resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
5297 | 			"integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
5298 | 			"license": "MIT",
5299 | 			"engines": {
5300 | 				"node": ">=10.0.0"
5301 | 			},
5302 | 			"peerDependencies": {
5303 | 				"bufferutil": "^4.0.1",
5304 | 				"utf-8-validate": ">=5.0.2"
5305 | 			},
5306 | 			"peerDependenciesMeta": {
5307 | 				"bufferutil": {
5308 | 					"optional": true
5309 | 				},
5310 | 				"utf-8-validate": {
5311 | 					"optional": true
5312 | 				}
5313 | 			}
5314 | 		},
5315 | 		"node_modules/vite": {
5316 | 			"version": "7.1.3",
5317 | 			"resolved": "https://registry.npmjs.org/vite/-/vite-7.1.3.tgz",
5318 | 			"integrity": "sha512-OOUi5zjkDxYrKhTV3V7iKsoS37VUM7v40+HuwEmcrsf11Cdx9y3DIr2Px6liIcZFwt3XSRpQvFpL3WVy7ApkGw==",
5319 | 			"license": "MIT",
5320 | 			"dependencies": {
5321 | 				"esbuild": "^0.25.0",
5322 | 				"fdir": "^6.5.0",
5323 | 				"picomatch": "^4.0.3",
5324 | 				"postcss": "^8.5.6",
5325 | 				"rollup": "^4.43.0",
5326 | 				"tinyglobby": "^0.2.14"
5327 | 			},
5328 | 			"bin": {
5329 | 				"vite": "bin/vite.js"
5330 | 			},
5331 | 			"engines": {
5332 | 				"node": "^20.19.0 || >=22.12.0"
5333 | 			},
5334 | 			"funding": {
5335 | 				"url": "https://github.com/vitejs/vite?sponsor=1"
5336 | 			},
5337 | 			"optionalDependencies": {
5338 | 				"fsevents": "~2.3.3"
5339 | 			},
5340 | 			"peerDependencies": {
5341 | 				"@types/node": "^20.19.0 || >=22.12.0",
5342 | 				"jiti": ">=1.21.0",
5343 | 				"less": "^4.0.0",
5344 | 				"lightningcss": "^1.21.0",
5345 | 				"sass": "^1.70.0",
5346 | 				"sass-embedded": "^1.70.0",
5347 | 				"stylus": ">=0.54.8",
5348 | 				"sugarss": "^5.0.0",
5349 | 				"terser": "^5.16.0",
5350 | 				"tsx": "^4.8.1",
5351 | 				"yaml": "^2.4.2"
5352 | 			},
5353 | 			"peerDependenciesMeta": {
5354 | 				"@types/node": {
5355 | 					"optional": true
5356 | 				},
5357 | 				"jiti": {
5358 | 					"optional": true
5359 | 				},
5360 | 				"less": {
5361 | 					"optional": true
5362 | 				},
5363 | 				"lightningcss": {
5364 | 					"optional": true
5365 | 				},
5366 | 				"sass": {
5367 | 					"optional": true
5368 | 				},
5369 | 				"sass-embedded": {
5370 | 					"optional": true
5371 | 				},
5372 | 				"stylus": {
5373 | 					"optional": true
5374 | 				},
5375 | 				"sugarss": {
5376 | 					"optional": true
5377 | 				},
5378 | 				"terser": {
5379 | 					"optional": true
5380 | 				},
5381 | 				"tsx": {
5382 | 					"optional": true
5383 | 				},
5384 | 				"yaml": {
5385 | 					"optional": true
5386 | 				}
5387 | 			}
5388 | 		},
5389 | 		"node_modules/vitefu": {
5390 | 			"version": "1.1.1",
5391 | 			"resolved": "https://registry.npmjs.org/vitefu/-/vitefu-1.1.1.tgz",
5392 | 			"integrity": "sha512-B/Fegf3i8zh0yFbpzZ21amWzHmuNlLlmJT6n7bu5e+pCHUKQIfXSYokrqOBGEMMe9UG2sostKQF9mml/vYaWJQ==",
5393 | 			"license": "MIT",
5394 | 			"workspaces": [
5395 | 				"tests/deps/*",
5396 | 				"tests/projects/*",
5397 | 				"tests/projects/workspace/packages/*"
5398 | 			],
5399 | 			"peerDependencies": {
5400 | 				"vite": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
5401 | 			},
5402 | 			"peerDependenciesMeta": {
5403 | 				"vite": {
5404 | 					"optional": true
5405 | 				}
5406 | 			}
5407 | 		},
5408 | 		"node_modules/webidl-conversions": {
5409 | 			"version": "3.0.1",
5410 | 			"resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
5411 | 			"integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
5412 | 			"license": "BSD-2-Clause"
5413 | 		},
5414 | 		"node_modules/websocket": {
5415 | 			"version": "1.0.35",
5416 | 			"resolved": "https://registry.npmjs.org/websocket/-/websocket-1.0.35.tgz",
5417 | 			"integrity": "sha512-/REy6amwPZl44DDzvRCkaI1q1bIiQB0mEFQLUrhz3z2EK91cp3n72rAjUlrTP0zV22HJIUOVHQGPxhFRjxjt+Q==",
5418 | 			"license": "Apache-2.0",
5419 | 			"dependencies": {
5420 | 				"bufferutil": "^4.0.1",
5421 | 				"debug": "^2.2.0",
5422 | 				"es5-ext": "^0.10.63",
5423 | 				"typedarray-to-buffer": "^3.1.5",
5424 | 				"utf-8-validate": "^5.0.2",
5425 | 				"yaeti": "^0.0.6"
5426 | 			},
5427 | 			"engines": {
5428 | 				"node": ">=4.0.0"
5429 | 			}
5430 | 		},
5431 | 		"node_modules/websocket/node_modules/debug": {
5432 | 			"version": "2.6.9",
5433 | 			"resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
5434 | 			"integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
5435 | 			"license": "MIT",
5436 | 			"dependencies": {
5437 | 				"ms": "2.0.0"
5438 | 			}
5439 | 		},
5440 | 		"node_modules/websocket/node_modules/ms": {
5441 | 			"version": "2.0.0",
5442 | 			"resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
5443 | 			"integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
5444 | 			"license": "MIT"
5445 | 		},
5446 | 		"node_modules/whatwg-encoding": {
5447 | 			"version": "3.1.1",
5448 | 			"resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
5449 | 			"integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
5450 | 			"license": "MIT",
5451 | 			"dependencies": {
5452 | 				"iconv-lite": "0.6.3"
5453 | 			},
5454 | 			"engines": {
5455 | 				"node": ">=18"
5456 | 			}
5457 | 		},
5458 | 		"node_modules/whatwg-mimetype": {
5459 | 			"version": "4.0.0",
5460 | 			"resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
5461 | 			"integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
5462 | 			"license": "MIT",
5463 | 			"engines": {
5464 | 				"node": ">=18"
5465 | 			}
5466 | 		},
5467 | 		"node_modules/whatwg-url": {
5468 | 			"version": "5.0.0",
5469 | 			"resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
5470 | 			"integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
5471 | 			"license": "MIT",
5472 | 			"dependencies": {
5473 | 				"tr46": "~0.0.3",
5474 | 				"webidl-conversions": "^3.0.0"
5475 | 			}
5476 | 		},
5477 | 		"node_modules/which": {
5478 | 			"version": "2.0.2",
5479 | 			"resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
5480 | 			"integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
5481 | 			"license": "ISC",
5482 | 			"dependencies": {
5483 | 				"isexe": "^2.0.0"
5484 | 			},
5485 | 			"bin": {
5486 | 				"node-which": "bin/node-which"
5487 | 			},
5488 | 			"engines": {
5489 | 				"node": ">= 8"
5490 | 			}
5491 | 		},
5492 | 		"node_modules/wrap-ansi": {
5493 | 			"version": "8.1.0",
5494 | 			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
5495 | 			"integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
5496 | 			"license": "MIT",
5497 | 			"dependencies": {
5498 | 				"ansi-styles": "^6.1.0",
5499 | 				"string-width": "^5.0.1",
5500 | 				"strip-ansi": "^7.0.1"
5501 | 			},
5502 | 			"engines": {
5503 | 				"node": ">=12"
5504 | 			},
5505 | 			"funding": {
5506 | 				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
5507 | 			}
5508 | 		},
5509 | 		"node_modules/wrap-ansi-cjs": {
5510 | 			"name": "wrap-ansi",
5511 | 			"version": "7.0.0",
5512 | 			"resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
5513 | 			"integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
5514 | 			"license": "MIT",
5515 | 			"dependencies": {
5516 | 				"ansi-styles": "^4.0.0",
5517 | 				"string-width": "^4.1.0",
5518 | 				"strip-ansi": "^6.0.0"
5519 | 			},
5520 | 			"engines": {
5521 | 				"node": ">=10"
5522 | 			},
5523 | 			"funding": {
5524 | 				"url": "https://github.com/chalk/wrap-ansi?sponsor=1"
5525 | 			}
5526 | 		},
5527 | 		"node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
5528 | 			"version": "5.0.1",
5529 | 			"resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
5530 | 			"integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
5531 | 			"license": "MIT",
5532 | 			"engines": {
5533 | 				"node": ">=8"
5534 | 			}
5535 | 		},
5536 | 		"node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
5537 | 			"version": "4.3.0",
5538 | 			"resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
5539 | 			"integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
5540 | 			"license": "MIT",
5541 | 			"dependencies": {
5542 | 				"color-convert": "^2.0.1"
5543 | 			},
5544 | 			"engines": {
5545 | 				"node": ">=8"
5546 | 			},
5547 | 			"funding": {
5548 | 				"url": "https://github.com/chalk/ansi-styles?sponsor=1"
5549 | 			}
5550 | 		},
5551 | 		"node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
5552 | 			"version": "8.0.0",
5553 | 			"resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
5554 | 			"integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
5555 | 			"license": "MIT"
5556 | 		},
5557 | 		"node_modules/wrap-ansi-cjs/node_modules/string-width": {
5558 | 			"version": "4.2.3",
5559 | 			"resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
5560 | 			"integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
5561 | 			"license": "MIT",
5562 | 			"dependencies": {
5563 | 				"emoji-regex": "^8.0.0",
5564 | 				"is-fullwidth-code-point": "^3.0.0",
5565 | 				"strip-ansi": "^6.0.1"
5566 | 			},
5567 | 			"engines": {
5568 | 				"node": ">=8"
5569 | 			}
5570 | 		},
5571 | 		"node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
5572 | 			"version": "6.0.1",
5573 | 			"resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
5574 | 			"integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
5575 | 			"license": "MIT",
5576 | 			"dependencies": {
5577 | 				"ansi-regex": "^5.0.1"
5578 | 			},
5579 | 			"engines": {
5580 | 				"node": ">=8"
5581 | 			}
5582 | 		},
5583 | 		"node_modules/ws": {
5584 | 			"version": "8.18.0",
5585 | 			"resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
5586 | 			"integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
5587 | 			"license": "MIT",
5588 | 			"engines": {
5589 | 				"node": ">=10.0.0"
5590 | 			},
5591 | 			"peerDependencies": {
5592 | 				"bufferutil": "^4.0.1",
5593 | 				"utf-8-validate": ">=5.0.2"
5594 | 			},
5595 | 			"peerDependenciesMeta": {
5596 | 				"bufferutil": {
5597 | 					"optional": true
5598 | 				},
5599 | 				"utf-8-validate": {
5600 | 					"optional": true
5601 | 				}
5602 | 			}
5603 | 		},
5604 | 		"node_modules/yaeti": {
5605 | 			"version": "0.0.6",
5606 | 			"resolved": "https://registry.npmjs.org/yaeti/-/yaeti-0.0.6.tgz",
5607 | 			"integrity": "sha512-MvQa//+KcZCUkBTIC9blM+CU9J2GzuTytsOUwf2lidtvkx/6gnEp1QvJv34t9vdjhFmha/mUiNDbN0D0mJWdug==",
5608 | 			"deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
5609 | 			"license": "MIT",
5610 | 			"engines": {
5611 | 				"node": ">=0.10.32"
5612 | 			}
5613 | 		},
5614 | 		"node_modules/yaml": {
5615 | 			"version": "2.8.1",
5616 | 			"resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.1.tgz",
5617 | 			"integrity": "sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==",
5618 | 			"license": "ISC",
5619 | 			"bin": {
5620 | 				"yaml": "bin.mjs"
5621 | 			},
5622 | 			"engines": {
5623 | 				"node": ">= 14.6"
5624 | 			}
5625 | 		},
5626 | 		"node_modules/zimmerframe": {
5627 | 			"version": "1.1.2",
5628 | 			"resolved": "https://registry.npmjs.org/zimmerframe/-/zimmerframe-1.1.2.tgz",
5629 | 			"integrity": "sha512-rAbqEGa8ovJy4pyBxZM70hg4pE6gDgaQ0Sl9M3enG3I0d6H4XSAM3GeNGLKnsBpuijUow064sf7ww1nutC5/3w==",
5630 | 			"license": "MIT"
5631 | 		}
5632 | 	}
5633 | }
5634 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 | 	"name": "rip-fun-data-extractor",
 3 | 	"private": true,
 4 | 	"version": "0.0.1",
 5 | 	"type": "module",
 6 | 	"scripts": {
 7 | 		"dev": "vite dev",
 8 | 		"dev:redis": "docker-compose up -d redis && npm run dev",
 9 | 		"build": "prisma generate && vite build",
10 | 		"preview": "vite preview",
11 | 		"start": "node build",
12 | 		"prepare": "svelte-kit sync || echo ''",
13 | 		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
14 | 		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
15 | 		"postinstall": "prisma generate",
16 | 		"redis:start": "docker-compose up -d redis",
17 | 		"redis:stop": "docker-compose down redis",
18 | 		"redis:logs": "docker-compose logs -f redis",
19 | 		"cache:warm": "tsx scripts/warm-cache.ts",
20 | 		"deploy:prepare": "npm run cache:warm"
21 | 	},
22 | 	"dependencies": {
23 | 		"@prisma/client": "^5.22.0",
24 | 		"@sveltejs/adapter-node": "^5.3.1",
25 | 		"alchemy-sdk": "^3.6.3",
26 | 		"autoprefixer": "^10.4.16",
27 | 		"cheerio": "^1.0.0",
28 | 		"ioredis": "^5.7.0",
29 | 		"postcss": "^8.4.31",
30 | 		"tailwindcss": "^3.4.0",
31 | 		"viem": "^2.34.0"
32 | 	},
33 | 	"devDependencies": {
34 | 		"@sveltejs/adapter-auto": "^6.0.0",
35 | 		"@sveltejs/kit": "^2.22.0",
36 | 		"@sveltejs/vite-plugin-svelte": "^6.0.0",
37 | 		"@tailwindcss/typography": "^0.5.10",
38 | 		"@types/node": "^24.3.0",
39 | 		"prisma": "^5.22.0",
40 | 		"svelte": "^5.0.0",
41 | 		"svelte-check": "^4.0.0",
42 | 		"tsx": "^4.20.5",
43 | 		"typescript": "^5.0.0",
44 | 		"vite": "^7.0.4"
45 | 	}
46 | }
47 | 


--------------------------------------------------------------------------------
/postcss.config.js:
--------------------------------------------------------------------------------
1 | export default {
2 |   plugins: {
3 |     tailwindcss: {},
4 |     autoprefixer: {},
5 |   },
6 | }


--------------------------------------------------------------------------------
/prisma/dev.db:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/cryptondee/ripexplorer/redis/prisma/dev.db


--------------------------------------------------------------------------------
/prisma/schema.postgresql.prisma:
--------------------------------------------------------------------------------
 1 | generator client {
 2 |   provider = "prisma-client-js"
 3 | }
 4 | 
 5 | datasource db {
 6 |   provider = "postgresql"
 7 |   url      = env("DATABASE_URL")
 8 | }
 9 | 
10 | model Profile {
11 |   id          String   @id @default(cuid())
12 |   name        String
13 |   bio         String?
14 |   website     String?
15 |   twitter     String?
16 |   github      String?
17 |   linkedin    String?
18 |   wallet      String?
19 |   email       String?
20 |   location    String?
21 |   avatar      String?
22 |   createdAt   DateTime @default(now())
23 |   updatedAt   DateTime @updatedAt
24 |   
25 |   comparisons Comparison[]
26 |   
27 |   @@map("profiles")
28 | }
29 | 
30 | model Comparison {
31 |   id          String   @id @default(cuid())
32 |   profileId   String
33 |   targetUrl   String
34 |   extractedData String @db.Text
35 |   differences   String @db.Text
36 |   createdAt     DateTime @default(now())
37 |   
38 |   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
39 |   
40 |   @@map("comparisons")
41 | }
42 | 
43 | model RipUser {
44 |   id                    Int      @id // rip.fun user ID
45 |   username              String   @unique // rip.fun username
46 |   smartWalletAddress    String?  // smart_wallet_address from API
47 |   ownerWalletAddress    String?  // owner_wallet_address from API  
48 |   avatar                String?  // avatar URL
49 |   banner                String?  // banner URL
50 |   type                  String?  // user type
51 |   createdAt             DateTime @default(now())
52 |   updatedAt             DateTime @updatedAt
53 |   
54 |   addresses RipUserAddress[]
55 |   
56 |   @@map("rip_users")
57 | }
58 | 
59 | model RipUserAddress {
60 |   id              String   @id @default(cuid())
61 |   address         String   // blockchain address
62 |   ripUserId       Int      // foreign key to RipUser
63 |   discoveredAt    DateTime @default(now()) // when this address was discovered
64 |   blockNumber     BigInt?  // block number where this was discovered
65 |   
66 |   ripUser RipUser @relation(fields: [ripUserId], references: [id], onDelete: Cascade)
67 |   
68 |   @@unique([address, ripUserId])
69 |   @@map("rip_user_addresses")
70 | }
71 | 
72 | model SyncStatus {
73 |   id            String   @id @default(cuid())
74 |   syncType      String   @unique // "blockchain_users"
75 |   lastBlockNumber BigInt? // last synced block number
76 |   lastSyncAt    DateTime @default(now())
77 |   status        String   @default("pending") // pending, running, completed, error
78 |   errorMessage  String?  @db.Text
79 |   
80 |   @@map("sync_status")
81 | }


--------------------------------------------------------------------------------
/prisma/schema.prisma:
--------------------------------------------------------------------------------
 1 | generator client {
 2 |   provider = "prisma-client-js"
 3 | }
 4 | 
 5 | datasource db {
 6 |   provider = "sqlite"
 7 |   url      = "file:./dev.db"
 8 | }
 9 | 
10 | model Profile {
11 |   id          String   @id @default(cuid())
12 |   name        String
13 |   bio         String?
14 |   website     String?
15 |   twitter     String?
16 |   github      String?
17 |   linkedin    String?
18 |   wallet      String?
19 |   email       String?
20 |   location    String?
21 |   avatar      String?
22 |   createdAt   DateTime @default(now())
23 |   updatedAt   DateTime @updatedAt
24 |   
25 |   comparisons Comparison[]
26 |   
27 |   @@map("profiles")
28 | }
29 | 
30 | model Comparison {
31 |   id          String   @id @default(cuid())
32 |   profileId   String
33 |   targetUrl   String
34 |   extractedData String
35 |   differences   String
36 |   createdAt     DateTime @default(now())
37 |   
38 |   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
39 |   
40 |   @@map("comparisons")
41 | }
42 | 
43 | model RipUser {
44 |   id                    Int      @id // rip.fun user ID
45 |   username              String   @unique // rip.fun username
46 |   smartWalletAddress    String?  // smart_wallet_address from API
47 |   ownerWalletAddress    String?  // owner_wallet_address from API  
48 |   avatar                String?  // avatar URL
49 |   banner                String?  // banner URL
50 |   type                  String?  // user type
51 |   createdAt             DateTime @default(now())
52 |   updatedAt             DateTime @updatedAt
53 |   
54 |   addresses RipUserAddress[]
55 |   
56 |   @@map("rip_users")
57 | }
58 | 
59 | model RipUserAddress {
60 |   id              String   @id @default(cuid())
61 |   address         String   // blockchain address
62 |   ripUserId       Int      // foreign key to RipUser
63 |   discoveredAt    DateTime @default(now()) // when this address was discovered
64 |   blockNumber     BigInt?  // block number where this was discovered
65 |   
66 |   ripUser RipUser @relation(fields: [ripUserId], references: [id], onDelete: Cascade)
67 |   
68 |   @@unique([address, ripUserId])
69 |   @@map("rip_user_addresses")
70 | }
71 | 
72 | model SyncStatus {
73 |   id            String   @id @default(cuid())
74 |   syncType      String   @unique // "blockchain_users"
75 |   lastBlockNumber BigInt? // last synced block number
76 |   lastSyncAt    DateTime @default(now())
77 |   status        String   @default("pending") // pending, running, completed, error
78 |   errorMessage  String?
79 |   
80 |   @@map("sync_status")
81 | }


--------------------------------------------------------------------------------
/railway.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "$schema": "https://railway.app/railway.schema.json",
 3 |   "build": {
 4 |     "builder": "NIXPACKS",
 5 |     "buildCommand": "npm ci && npx prisma generate && npm run build"
 6 |   },
 7 |   "deploy": {
 8 |     "startCommand": "npm run start",
 9 |     "restartPolicyType": "ON_FAILURE",
10 |     "restartPolicyMaxRetries": 10
11 |   },
12 |   "environments": {
13 |     "production": {
14 |       "build": {
15 |         "buildCommand": "npm ci && npx prisma generate && npm run build"
16 |       }
17 |     }
18 |   }
19 | }


--------------------------------------------------------------------------------
/railway.toml:
--------------------------------------------------------------------------------
 1 | [build]
 2 | builder = "nixpacks"
 3 | 
 4 | [deploy]
 5 | startCommand = "npm start"
 6 | healthcheckPath = "/"
 7 | healthcheckTimeout = 300
 8 | restartPolicyType = "on_failure"
 9 | 
10 | # Redis plugin for all environments
11 | [environments.production]
12 | plugins = ["redis"]
13 | 
14 | [environments.staging]  
15 | plugins = ["redis"]


--------------------------------------------------------------------------------
/scripts/warm-cache-standalone.ts:
--------------------------------------------------------------------------------
  1 | #!/usr/bin/env tsx
  2 | /**
  3 |  * Standalone Cache Warming Script for Pre-Deployment
  4 |  * 
  5 |  * This script pre-populates Redis with commonly used Pokemon TCG set data
  6 |  * to ensure instant loading on first user visit.
  7 |  * 
  8 |  * Run during deployment or as a scheduled job to keep cache warm.
  9 |  */
 10 | 
 11 | // Simple mock Redis for testing
 12 | class MockRedis {
 13 |   private store: Map<string, any> = new Map();
 14 |   private ttls: Map<string, number> = new Map();
 15 |   
 16 |   async ping(): Promise<boolean> {
 17 |     return true;
 18 |   }
 19 |   
 20 |   async get(key: string): Promise<any> {
 21 |     const now = Date.now();
 22 |     const ttl = this.ttls.get(key);
 23 |     
 24 |     if (ttl && now > ttl) {
 25 |       this.store.delete(key);
 26 |       this.ttls.delete(key);
 27 |       return null;
 28 |     }
 29 |     
 30 |     return this.store.get(key) || null;
 31 |   }
 32 |   
 33 |   async set(key: string, value: any, ttlSeconds?: number): Promise<boolean> {
 34 |     this.store.set(key, value);
 35 |     
 36 |     if (ttlSeconds) {
 37 |       this.ttls.set(key, Date.now() + (ttlSeconds * 1000));
 38 |     }
 39 |     
 40 |     return true;
 41 |   }
 42 |   
 43 |   async exists(key: string): Promise<boolean> {
 44 |     const value = await this.get(key);
 45 |     return value !== null;
 46 |   }
 47 |   
 48 |   async del(key: string): Promise<number> {
 49 |     const existed = this.store.has(key);
 50 |     this.store.delete(key);
 51 |     this.ttls.delete(key);
 52 |     return existed ? 1 : 0;
 53 |   }
 54 | }
 55 | 
 56 | // Cache client
 57 | const redisCache = new MockRedis();
 58 | 
 59 | // Pokemon TCG sets that should always be cached
 60 | // Based on real user data (tk_'s collection) + popular classic sets
 61 | const POPULAR_SETS = [
 62 |   // From tk_'s actual collection (user 1229)
 63 |   'rsv10pt5',   // Stellar Crown (from tk_)
 64 |   'sm115',      // Hidden Fates (from tk_)
 65 |   'sm3',        // Burning Shadows (from tk_)
 66 |   'sv1',        // Scarlet & Violet Base (from tk_)
 67 |   'sv10',       // Temporal Forces (from tk_)
 68 |   'sv3',        // Obsidian Flames (from tk_)
 69 |   'sv3pt5',     // Pokemon 151 (from tk_)
 70 |   'sv6pt5',     // Twilight Masquerade (from tk_)
 71 |   'sv7',        // Stellar Crown (from tk_)
 72 |   'sv8pt5',     // Surging Sparks (from tk_)
 73 |   'swsh12pt5',  // Crown Zenith (from tk_)
 74 |   'swsh7',      // Evolving Skies (from tk_)
 75 |   'swsh8',      // Fusion Strike (from tk_)
 76 |   'zsv10pt5',   // Temporal Forces alt (from tk_)
 77 |   
 78 |   // Additional popular/classic sets
 79 |   'sv4',        // Paradox Rift
 80 |   'sv5',        // Temporal Forces
 81 |   'sv6',        // Twilight Masquerade
 82 |   'sv8',        // Surging Sparks
 83 |   'sv09',       // Prismatic Evolutions
 84 |   'swsh9',      // Brilliant Stars
 85 |   'swsh10',     // Astral Radiance
 86 |   'swsh11',     // Lost Origin
 87 |   'cel25',      // Celebrations
 88 |   'base1',      // Base Set
 89 |   'base2',      // Jungle
 90 |   'base3',      // Fossil
 91 |   'neo1',       // Neo Genesis
 92 | ];
 93 | 
 94 | async function fetchSetData(setId: string) {
 95 |   try {
 96 |     console.log(`📦 Fetching set data for: ${setId}`);
 97 |     
 98 |     const response = await fetch(
 99 |       `https://www.rip.fun/api/set/${setId}/cards?page=1&limit=1000&sort=number-asc&all=true`,
100 |       {
101 |         headers: {
102 |           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
103 |           'Accept': 'application/json',
104 |           'Referer': 'https://www.rip.fun/'
105 |         }
106 |       }
107 |     );
108 | 
109 |     if (!response.ok) {
110 |       throw new Error(`API returned ${response.status}: ${response.statusText}`);
111 |     }
112 | 
113 |     const data = await response.json();
114 |     
115 |     // Remove clip_embedding data to reduce payload
116 |     if (data.cards && Array.isArray(data.cards)) {
117 |       data.cards = data.cards.map((card: any) => {
118 |         const cleanCard = { ...card };
119 |         delete cleanCard.clip_embedding;
120 |         if (cleanCard.card) {
121 |           delete cleanCard.card.clip_embedding;
122 |         }
123 |         return cleanCard;
124 |       });
125 |     }
126 |     
127 |     return data;
128 |   } catch (error) {
129 |     console.error(`❌ Failed to fetch set ${setId}:`, error);
130 |     throw error;
131 |   }
132 | }
133 | 
134 | async function warmCache() {
135 |   console.log('🔥 Starting cache warming process...');
136 |   console.log(`📊 Will cache ${POPULAR_SETS.length} sets (including tk_'s collection)`);
137 |   
138 |   let successCount = 0;
139 |   let failCount = 0;
140 |   const errors: string[] = [];
141 |   
142 |   // Check Redis connection
143 |   const isHealthy = await redisCache.ping();
144 |   if (!isHealthy) {
145 |     console.error('❌ Redis is not available. Using mock Redis for testing.');
146 |   } else {
147 |     console.log('✅ Redis connection verified');
148 |   }
149 |   
150 |   // Process sets in batches to avoid overwhelming the API
151 |   const BATCH_SIZE = 3;
152 |   for (let i = 0; i < POPULAR_SETS.length; i += BATCH_SIZE) {
153 |     const batch = POPULAR_SETS.slice(i, i + BATCH_SIZE);
154 |     
155 |     console.log(`\n📋 Processing batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(POPULAR_SETS.length / BATCH_SIZE)}`);
156 |     
157 |     await Promise.all(
158 |       batch.map(async (setId) => {
159 |         try {
160 |           // Check if already cached
161 |           const cacheKey = `rip:set:${setId}`;
162 |           const exists = await redisCache.exists(cacheKey);
163 |           
164 |           if (exists) {
165 |             console.log(`⏭️  Skipping ${setId} (already cached)`);
166 |             successCount++;
167 |             return;
168 |           }
169 |           
170 |           // Fetch and cache the data
171 |           const data = await fetchSetData(setId);
172 |           
173 |           // Store permanently (no TTL)
174 |           const stored = await redisCache.set(cacheKey, data);
175 |           
176 |           if (stored) {
177 |             console.log(`✅ Cached set: ${setId} (${data.cards?.length || 0} cards)`);
178 |             successCount++;
179 |           } else {
180 |             throw new Error('Failed to store in cache');
181 |           }
182 |         } catch (error) {
183 |           console.error(`❌ Failed to cache ${setId}:`, error);
184 |           errors.push(`${setId}: ${error}`);
185 |           failCount++;
186 |         }
187 |       })
188 |     );
189 |     
190 |     // Small delay between batches to be respectful to the API
191 |     if (i + BATCH_SIZE < POPULAR_SETS.length) {
192 |       console.log('⏳ Waiting before next batch...');
193 |       await new Promise(resolve => setTimeout(resolve, 2000));
194 |     }
195 |   }
196 |   
197 |   // Summary
198 |   console.log('\n' + '='.repeat(50));
199 |   console.log('📊 Cache Warming Complete!');
200 |   console.log('='.repeat(50));
201 |   console.log(`✅ Success: ${successCount} sets cached`);
202 |   console.log(`❌ Failed: ${failCount} sets`);
203 |   console.log(`📈 From tk_'s collection: 14 sets`);
204 |   console.log(`📈 Popular/classic sets: ${POPULAR_SETS.length - 14} sets`);
205 |   
206 |   if (errors.length > 0) {
207 |     console.log('\n⚠️  Errors encountered:');
208 |     errors.forEach(err => console.log(`  - ${err}`));
209 |   }
210 |   
211 |   // Get cache stats
212 |   try {
213 |     console.log('\n📈 Cache Statistics:');
214 |     const testKey = 'test:redis:connection';
215 |     await redisCache.set(testKey, { test: true }, 1);
216 |     const testResult = await redisCache.get(testKey);
217 |     console.log(`  - Redis operational: ${testResult ? 'Yes' : 'No'}`);
218 |     console.log(`  - Sets cached: ${successCount}`);
219 |     console.log(`  - Total sets available: ${POPULAR_SETS.length}`);
220 |     console.log(`  - Cache coverage: ${Math.round((successCount / POPULAR_SETS.length) * 100)}%`);
221 |     console.log(`  - tk_'s sets included: ${POPULAR_SETS.filter(s => POPULAR_SETS.indexOf(s) < 14).length}`);
222 |   } catch (error) {
223 |     console.error('Failed to get cache stats:', error);
224 |   }
225 |   
226 |   process.exit(failCount > 0 ? 1 : 0);
227 | }
228 | 
229 | // Run the script
230 | warmCache().catch(error => {
231 |   console.error('Fatal error during cache warming:', error);
232 |   process.exit(1);
233 | });


--------------------------------------------------------------------------------
/scripts/warm-cache.ts:
--------------------------------------------------------------------------------
  1 | #!/usr/bin/env tsx
  2 | /**
  3 |  * Cache Warming Script for Pre-Deployment
  4 |  * 
  5 |  * This script pre-populates Redis with commonly used Pokemon TCG set data
  6 |  * to ensure instant loading on first user visit.
  7 |  * 
  8 |  * Run during deployment or as a scheduled job to keep cache warm.
  9 |  */
 10 | 
 11 | import { redisCache } from '../src/lib/server/redis/client.js';
 12 | import { optimizeExtractedData } from '../src/lib/server/services/normalizer.js';
 13 | 
 14 | // Pokemon TCG sets that should always be cached
 15 | // Based on real user data (tk_'s collection) + popular classic sets
 16 | const POPULAR_SETS = [
 17 |   // From tk_'s actual collection (user 1229)
 18 |   'rsv10pt5',   // Stellar Crown (from tk_)
 19 |   'sm115',      // Hidden Fates (from tk_)
 20 |   'sm3',        // Burning Shadows (from tk_)
 21 |   'sv1',        // Scarlet & Violet Base (from tk_)
 22 |   'sv10',       // Temporal Forces (from tk_)
 23 |   'sv3',        // Obsidian Flames (from tk_)
 24 |   'sv3pt5',     // Pokemon 151 (from tk_)
 25 |   'sv6pt5',     // Twilight Masquerade (from tk_)
 26 |   'sv7',        // Stellar Crown (from tk_)
 27 |   'sv8pt5',     // Surging Sparks (from tk_)
 28 |   'swsh12pt5',  // Crown Zenith (from tk_)
 29 |   'swsh7',      // Evolving Skies (from tk_)
 30 |   'swsh8',      // Fusion Strike (from tk_)
 31 |   'zsv10pt5',   // Temporal Forces alt (from tk_)
 32 |   
 33 |   // Additional popular/classic sets
 34 |   'sv4',        // Paradox Rift
 35 |   'sv5',        // Temporal Forces
 36 |   'sv6',        // Twilight Masquerade
 37 |   'sv8',        // Surging Sparks
 38 |   'sv09',       // Prismatic Evolutions
 39 |   'swsh9',      // Brilliant Stars
 40 |   'swsh10',     // Astral Radiance
 41 |   'swsh11',     // Lost Origin
 42 |   'cel25',      // Celebrations
 43 |   'base1',      // Base Set
 44 |   'base2',      // Jungle
 45 |   'base3',      // Fossil
 46 |   'neo1',       // Neo Genesis
 47 | ];
 48 | 
 49 | async function fetchSetData(setId: string) {
 50 |   try {
 51 |     console.log(`📦 Fetching set data for: ${setId}`);
 52 |     
 53 |     const response = await fetch(
 54 |       `https://www.rip.fun/api/set/${setId}/cards?page=1&limit=1000&sort=number-asc&all=true`,
 55 |       {
 56 |         headers: {
 57 |           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
 58 |           'Accept': 'application/json',
 59 |           'Referer': 'https://www.rip.fun/'
 60 |         }
 61 |       }
 62 |     );
 63 | 
 64 |     if (!response.ok) {
 65 |       throw new Error(`API returned ${response.status}: ${response.statusText}`);
 66 |     }
 67 | 
 68 |     const data = await response.json();
 69 |     
 70 |     // Apply optimizations to reduce payload size
 71 |     const optimizedData = optimizeExtractedData(data);
 72 |     
 73 |     // Remove clip_embedding data
 74 |     if (optimizedData.cards && Array.isArray(optimizedData.cards)) {
 75 |       optimizedData.cards = optimizedData.cards.map((card: any) => {
 76 |         const cleanCard = { ...card };
 77 |         delete cleanCard.clip_embedding;
 78 |         if (cleanCard.card) {
 79 |           delete cleanCard.card.clip_embedding;
 80 |         }
 81 |         return cleanCard;
 82 |       });
 83 |     }
 84 |     
 85 |     return optimizedData;
 86 |   } catch (error) {
 87 |     console.error(`❌ Failed to fetch set ${setId}:`, error);
 88 |     throw error;
 89 |   }
 90 | }
 91 | 
 92 | async function warmCache() {
 93 |   console.log('🔥 Starting cache warming process...');
 94 |   console.log(`📊 Will cache ${POPULAR_SETS.length} popular sets`);
 95 |   
 96 |   let successCount = 0;
 97 |   let failCount = 0;
 98 |   const errors: string[] = [];
 99 |   
100 |   // Check Redis connection
101 |   const isHealthy = await redisCache.ping();
102 |   if (!isHealthy) {
103 |     console.error('❌ Redis is not available. Cache warming aborted.');
104 |     process.exit(1);
105 |   }
106 |   
107 |   console.log('✅ Redis connection verified');
108 |   
109 |   // Process sets in batches to avoid overwhelming the API
110 |   const BATCH_SIZE = 3;
111 |   for (let i = 0; i < POPULAR_SETS.length; i += BATCH_SIZE) {
112 |     const batch = POPULAR_SETS.slice(i, i + BATCH_SIZE);
113 |     
114 |     console.log(`\n📋 Processing batch ${Math.floor(i / BATCH_SIZE) + 1}/${Math.ceil(POPULAR_SETS.length / BATCH_SIZE)}`);
115 |     
116 |     await Promise.all(
117 |       batch.map(async (setId) => {
118 |         try {
119 |           // Check if already cached
120 |           const cacheKey = `rip:set:${setId}`;
121 |           const exists = await redisCache.exists(cacheKey);
122 |           
123 |           if (exists) {
124 |             console.log(`⏭️  Skipping ${setId} (already cached)`);
125 |             successCount++;
126 |             return;
127 |           }
128 |           
129 |           // Fetch and cache the data
130 |           const data = await fetchSetData(setId);
131 |           
132 |           // Store permanently (no TTL)
133 |           const stored = await redisCache.set(cacheKey, data);
134 |           
135 |           if (stored) {
136 |             console.log(`✅ Cached set: ${setId} (${data.cards?.length || 0} cards)`);
137 |             successCount++;
138 |           } else {
139 |             throw new Error('Failed to store in cache');
140 |           }
141 |         } catch (error) {
142 |           console.error(`❌ Failed to cache ${setId}:`, error);
143 |           errors.push(`${setId}: ${error}`);
144 |           failCount++;
145 |         }
146 |       })
147 |     );
148 |     
149 |     // Small delay between batches to be respectful to the API
150 |     if (i + BATCH_SIZE < POPULAR_SETS.length) {
151 |       console.log('⏳ Waiting before next batch...');
152 |       await new Promise(resolve => setTimeout(resolve, 2000));
153 |     }
154 |   }
155 |   
156 |   // Summary
157 |   console.log('\n' + '='.repeat(50));
158 |   console.log('📊 Cache Warming Complete!');
159 |   console.log('='.repeat(50));
160 |   console.log(`✅ Success: ${successCount} sets cached`);
161 |   console.log(`❌ Failed: ${failCount} sets`);
162 |   
163 |   if (errors.length > 0) {
164 |     console.log('\n⚠️  Errors encountered:');
165 |     errors.forEach(err => console.log(`  - ${err}`));
166 |   }
167 |   
168 |   // Get cache stats
169 |   try {
170 |     console.log('\n📈 Cache Statistics:');
171 |     const testKey = 'test:redis:connection';
172 |     await redisCache.set(testKey, { test: true }, 1);
173 |     const testResult = await redisCache.get(testKey);
174 |     console.log(`  - Redis operational: ${testResult ? 'Yes' : 'No'}`);
175 |     console.log(`  - Sets cached: ${successCount}`);
176 |     console.log(`  - Total sets available: ${POPULAR_SETS.length}`);
177 |     console.log(`  - Cache coverage: ${Math.round((successCount / POPULAR_SETS.length) * 100)}%`);
178 |   } catch (error) {
179 |     console.error('Failed to get cache stats:', error);
180 |   }
181 |   
182 |   process.exit(failCount > 0 ? 1 : 0);
183 | }
184 | 
185 | // Run the script
186 | warmCache().catch(error => {
187 |   console.error('Fatal error during cache warming:', error);
188 |   process.exit(1);
189 | });


--------------------------------------------------------------------------------
/src/app.css:
--------------------------------------------------------------------------------
1 | @tailwind base;
2 | @tailwind components;
3 | @tailwind utilities;


--------------------------------------------------------------------------------
/src/app.d.ts:
--------------------------------------------------------------------------------
 1 | // See https://svelte.dev/docs/kit/types#app.d.ts
 2 | // for information about these interfaces
 3 | declare global {
 4 | 	namespace App {
 5 | 		// interface Error {}
 6 | 		// interface Locals {}
 7 | 		// interface PageData {}
 8 | 		// interface PageState {}
 9 | 		// interface Platform {}
10 | 	}
11 | }
12 | 
13 | export {};
14 | 


--------------------------------------------------------------------------------
/src/app.html:
--------------------------------------------------------------------------------
 1 | <!doctype html>
 2 | <html lang="en">
 3 | 	<head>
 4 | 		<meta charset="utf-8" />
 5 | 		<meta name="viewport" content="width=device-width, initial-scale=1" />
 6 | 		%sveltekit.head%
 7 | 	</head>
 8 | 	<body data-sveltekit-preload-data="hover">
 9 | 		<div style="display: contents">%sveltekit.body%</div>
10 | 	</body>
11 | </html>
12 | 


--------------------------------------------------------------------------------
/src/lib/assets/favicon.svg:
--------------------------------------------------------------------------------
1 | <svg xmlns="http://www.w3.org/2000/svg" width="107" height="128" viewBox="0 0 107 128"><title>svelte-logo</title><path d="M94.157 22.819c-10.4-14.885-30.94-19.297-45.792-9.835L22.282 29.608A29.92 29.92 0 0 0 8.764 49.65a31.5 31.5 0 0 0 3.108 20.231 30 30 0 0 0-4.477 11.183 31.9 31.9 0 0 0 5.448 24.116c10.402 14.887 30.942 19.297 45.791 9.835l26.083-16.624A29.92 29.92 0 0 0 98.235 78.35a31.53 31.53 0 0 0-3.105-20.232 30 30 0 0 0 4.474-11.182 31.88 31.88 0 0 0-5.447-24.116" style="fill:#ff3e00"/><path d="M45.817 106.582a20.72 20.72 0 0 1-22.237-8.243 19.17 19.17 0 0 1-3.277-14.503 18 18 0 0 1 .624-2.435l.49-1.498 1.337.981a33.6 33.6 0 0 0 10.203 5.098l.97.294-.09.968a5.85 5.85 0 0 0 1.052 3.878 6.24 6.24 0 0 0 6.695 2.485 5.8 5.8 0 0 0 1.603-.704L69.27 76.28a5.43 5.43 0 0 0 2.45-3.631 5.8 5.8 0 0 0-.987-4.371 6.24 6.24 0 0 0-6.698-2.487 5.7 5.7 0 0 0-1.6.704l-9.953 6.345a19 19 0 0 1-5.296 2.326 20.72 20.72 0 0 1-22.237-8.243 19.17 19.17 0 0 1-3.277-14.502 17.99 17.99 0 0 1 8.13-12.052l26.081-16.623a19 19 0 0 1 5.3-2.329 20.72 20.72 0 0 1 22.237 8.243 19.17 19.17 0 0 1 3.277 14.503 18 18 0 0 1-.624 2.435l-.49 1.498-1.337-.98a33.6 33.6 0 0 0-10.203-5.1l-.97-.294.09-.968a5.86 5.86 0 0 0-1.052-3.878 6.24 6.24 0 0 0-6.696-2.485 5.8 5.8 0 0 0-1.602.704L37.73 51.72a5.42 5.42 0 0 0-2.449 3.63 5.79 5.79 0 0 0 .986 4.372 6.24 6.24 0 0 0 6.698 2.486 5.8 5.8 0 0 0 1.602-.704l9.952-6.342a19 19 0 0 1 5.295-2.328 20.72 20.72 0 0 1 22.237 8.242 19.17 19.17 0 0 1 3.277 14.503 18 18 0 0 1-8.13 12.053l-26.081 16.622a19 19 0 0 1-5.3 2.328" style="fill:#fff"/></svg>


--------------------------------------------------------------------------------
/src/lib/components/CLAUDE.md:
--------------------------------------------------------------------------------
  1 | # Components Directory
  2 | 
  3 | This directory contains **reusable Svelte components** created during the major 2025 refactoring that eliminated 1,000+ lines of duplicate code from the application.
  4 | 
  5 | ## 🎯 Component Architecture Overview
  6 | 
  7 | Each component follows established patterns:
  8 | - **Event-driven communication** with parent components
  9 | - **TypeScript interfaces** for props and events
 10 | - **Tailwind CSS** for consistent styling
 11 | - **Reusable across multiple pages**
 12 | - **Proper error handling** and loading states
 13 | 
 14 | ## 📦 Components
 15 | 
 16 | ### CardFilters.svelte (248 lines)
 17 | **Purpose**: Complete filtering interface for card management with advanced options
 18 | 
 19 | **Key Features:**
 20 | - Set-based filtering with dropdown showing available Pokemon TCG sets
 21 | - Rarity filtering with dynamic options
 22 | - View mode toggle (Grid/Table)
 23 | - Missing cards management (Show Missing, Only Missing, Available Only)
 24 | - Page size control with dynamic limits
 25 | - Real-time search with instant filtering
 26 | - Loading states and error handling for async operations
 27 | 
 28 | **Events Dispatched:**
 29 | ```typescript
 30 | {
 31 |   searchChange: string;
 32 |   setChange: string;
 33 |   rarityChange: string;
 34 |   viewModeChange: 'grid' | 'table';
 35 |   missingCardsToggle: boolean;
 36 |   onlyMissingToggle: boolean;
 37 |   availableOnlyToggle: boolean;
 38 |   pageSizeChange: number;
 39 | }
 40 | ```
 41 | 
 42 | **Usage:**
 43 | ```svelte
 44 | <CardFilters
 45 |   bind:selectedSet
 46 |   bind:selectedRarity
 47 |   bind:viewMode
 48 |   bind:showMissingCards
 49 |   bind:onlyMissingCards
 50 |   bind:availableOnly
 51 |   bind:searchTerm
 52 |   bind:pageSize
 53 |   {cardsBySet}
 54 |   {allRarities}
 55 |   {fetchingAllSets}
 56 |   {loadingSetData}
 57 |   on:searchChange={handleSearch}
 58 |   on:setChange={handleSetChange}
 59 |   on:rarityChange={handleRarityChange}
 60 | />
 61 | ```
 62 | 
 63 | ### CardGrid.svelte (230 lines)
 64 | **Purpose**: Visual grid display for cards with missing card indicators and marketplace integration
 65 | 
 66 | **Key Features:**
 67 | - Responsive grid layout (1-3 columns based on screen size)
 68 | - Set grouping with expandable sections for "All Sets" view
 69 | - Individual card view with details for single set selection  
 70 | - Missing card indicators with red styling
 71 | - Marketplace integration (Buy Now/Make Offer buttons)
 72 | - Card status badges (Listed/Owned/Missing)
 73 | - Click handling for card detail modals
 74 | 
 75 | **Events Dispatched:**
 76 | ```typescript
 77 | {
 78 |   cardClick: any; // Card object clicked
 79 | }
 80 | ```
 81 | 
 82 | **Props Interface:**
 83 | ```typescript
 84 | {
 85 |   selectedSet: string;
 86 |   cardsBySet: any;
 87 |   paginatedCards: any[];
 88 | }
 89 | ```
 90 | 
 91 | ### CardTable.svelte (349 lines)
 92 | **Purpose**: Comprehensive sortable data table with marketplace integration
 93 | 
 94 | **Key Features:**
 95 | - Sortable columns (Card, Set, Rarity, Type, Value, Listed Price, etc.)
 96 | - Marketplace data integration with real-time pricing
 97 | - Buy Now/Make Offer action buttons for missing cards
 98 | - Availability indicators (✅/❌ icons)
 99 | - Status badges (Listed/Owned/Missing)
100 | - Responsive table with proper mobile handling
101 | - Card image thumbnails with fallback icons
102 | - Click-to-sort headers with visual indicators
103 | 
104 | **Events Dispatched:**
105 | ```typescript
106 | {
107 |   cardClick: any; // Card object clicked
108 |   sort: { column: string; direction: 'asc' | 'desc' };
109 | }
110 | ```
111 | 
112 | **Columns:**
113 | - Card (with image and details)
114 | - Set (Pokemon TCG set name)
115 | - Rarity (with badge styling)
116 | - Type (Pokemon card types)
117 | - Value (current market value)
118 | - Listed Price (marketplace pricing)
119 | - Available (availability status)
120 | - Action (Buy Now/Make Offer buttons)
121 | - Status (Listed/Owned/Missing badges)
122 | 
123 | ### PackManager.svelte (202 lines)
124 | **Purpose**: Intelligent pack grouping and management with expandable details
125 | 
126 | **Key Features:**
127 | - Automatic pack grouping by name (e.g., "Black Bolt", "151", "Prismatic Evolutions")
128 | - Status analysis and summaries (opened, sealed, pending open counts)
129 | - Expandable pack groups with detailed individual pack tables
130 | - Pack value calculations and total statistics
131 | - Sample image display for each pack group
132 | - Click-to-expand/collapse functionality with smooth transitions
133 | - Individual pack details with ID and status columns
134 | 
135 | **Props Interface:**
136 | ```typescript
137 | {
138 |   digitalProducts: any[]; // Raw pack data from API
139 | }
140 | ```
141 | 
142 | **Pack Status Analysis:**
143 | - **Opened**: `open_status` contains "opened"
144 | - **Sealed**: `open_status` contains "sealed", "unopened", or default for owned
145 | - **Pending Open**: `open_status` contains "pending" or "opening"
146 | 
147 | ### TradeTable.svelte (127 lines)
148 | **Purpose**: Reusable trade analysis table with dynamic highlighting
149 | 
150 | **Key Features:**
151 | - Dynamic row highlighting based on trade availability
152 | - Color-coded indicators (orange for single card, green for multiple cards)
153 | - Trade type handling (give/receive/perfect matches)
154 | - User count badges and card availability indicators
155 | - Click handling for detailed trade information
156 | - Reused across trade-finder and trade-compare pages
157 | 
158 | **Events Dispatched:**
159 | ```typescript
160 | {
161 |   tradeClick: any; // Trade object clicked
162 | }
163 | ```
164 | 
165 | **Props Interface:**
166 | ```typescript
167 | {
168 |   trades: any[];
169 |   title: string;
170 |   userCountField: 'userACount' | 'userBCount';
171 | }
172 | ```
173 | 
174 | ### UserSearchInput.svelte (112 lines)
175 | **Purpose**: Intelligent username search with blockchain integration and autocomplete
176 | 
177 | **Key Features:**
178 | - Real-time username search with autocomplete suggestions
179 | - Blockchain integration for username resolution
180 | - Loading states during search operations
181 | - Input validation and error handling
182 | - Support for both username and numeric ID input
183 | - Debounced search to prevent excessive API calls
184 | 
185 | **Events Dispatched:**
186 | ```typescript
187 | {
188 |   userSelected: { username: string; userId: string };
189 |   searchChange: string;
190 | }
191 | ```
192 | 
193 | **Props Interface:**
194 | ```typescript
195 | {
196 |   placeholder?: string;
197 |   disabled?: boolean;
198 |   initialValue?: string;
199 | }
200 | ```
201 | 
202 | ## 🔧 Development Patterns
203 | 
204 | ### Component Communication
205 | All components use Svelte's event dispatcher pattern:
206 | ```typescript
207 | import { createEventDispatcher } from 'svelte';
208 | 
209 | const dispatch = createEventDispatcher<{
210 |   eventName: EventPayloadType;
211 | }>();
212 | 
213 | function handleAction() {
214 |   dispatch('eventName', payload);
215 | }
216 | ```
217 | 
218 | ### TypeScript Integration
219 | Components include proper TypeScript support:
220 | ```typescript
221 | // Props interface
222 | export let propName: PropType = defaultValue;
223 | 
224 | // Event typing
225 | const dispatch = createEventDispatcher<{
226 |   eventName: PayloadType;
227 | }>();
228 | ```
229 | 
230 | ### Styling Consistency
231 | All components follow Tailwind CSS patterns:
232 | - Consistent color scheme (indigo for primary, gray for neutral)
233 | - Responsive design with mobile-first approach
234 | - Hover states and transitions
235 | - Consistent spacing and typography
236 | 
237 | ### Error Handling
238 | Components include proper error states:
239 | - Loading indicators during async operations
240 | - Error messages with user-friendly explanations
241 | - Graceful fallbacks for missing data
242 | - Disabled states during processing
243 | 
244 | ## 🎯 Usage Guidelines
245 | 
246 | 1. **Import components** from `$lib/components/ComponentName.svelte`
247 | 2. **Pass required props** using TypeScript interfaces
248 | 3. **Handle events** with proper event listeners
249 | 4. **Follow established styling** patterns in Tailwind CSS
250 | 5. **Include error handling** for async operations
251 | 6. **Test component reusability** across different pages
252 | 
253 | ## 📈 Performance Benefits
254 | 
255 | The component architecture provides:
256 | - **Reduced bundle size** through code elimination
257 | - **Improved caching** of component code
258 | - **Better tree-shaking** for unused features
259 | - **Modular loading** for better performance
260 | - **Reusable logic** across multiple pages


--------------------------------------------------------------------------------
/src/lib/components/CardFilters.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { createEventDispatcher } from 'svelte';
  3 | 
  4 |   // Props
  5 |   export let selectedSet: string = 'all';
  6 |   export let selectedRarity: string = 'all';
  7 |   export let viewMode: 'grid' | 'table' = 'grid';
  8 |   export let showMissingCards: boolean = false;
  9 |   export let onlyMissingCards: boolean = false;
 10 |   export let availableOnly: boolean = false;
 11 |   export let searchTerm: string = '';
 12 |   export let pageSize: number = 50;
 13 |   export let maxPageSize: number = 500;
 14 | 
 15 |   // Data props
 16 |   export let cardsBySet: any = {};
 17 |   export let allRarities: string[] = [];
 18 |   export let fetchingAllSets: boolean = false;
 19 |   export let loadingSetData: any = {};
 20 |   export let setDataErrors: any = {};
 21 |   export let bulkFetchErrors: any[] = [];
 22 | 
 23 |   // Event dispatcher
 24 |   const dispatch = createEventDispatcher<{
 25 |     searchChange: string;
 26 |     setChange: string;
 27 |     rarityChange: string;
 28 |     viewModeChange: 'grid' | 'table';
 29 |     missingCardsToggle: boolean;
 30 |     onlyMissingToggle: boolean;
 31 |     availableOnlyToggle: boolean;
 32 |     pageSizeChange: number;
 33 |   }>();
 34 | 
 35 |   function handleSearchInput(event: Event) {
 36 |     const target = event.target as HTMLInputElement;
 37 |     searchTerm = target.value;
 38 |     dispatch('searchChange', searchTerm);
 39 |   }
 40 | 
 41 |   function handleSetChange() {
 42 |     dispatch('setChange', selectedSet);
 43 |   }
 44 | 
 45 |   function handleRarityChange() {
 46 |     dispatch('rarityChange', selectedRarity);
 47 |   }
 48 | 
 49 |   function handleViewModeChange(mode: 'grid' | 'table') {
 50 |     viewMode = mode;
 51 |     dispatch('viewModeChange', viewMode);
 52 |   }
 53 | 
 54 |   function handleMissingCardsChange() {
 55 |     if (showMissingCards) onlyMissingCards = false;
 56 |     dispatch('missingCardsToggle', showMissingCards);
 57 |   }
 58 | 
 59 |   function handleOnlyMissingChange() {
 60 |     if (onlyMissingCards) showMissingCards = false;
 61 |     dispatch('onlyMissingToggle', onlyMissingCards);
 62 |   }
 63 | 
 64 |   function handleAvailableOnlyChange() {
 65 |     dispatch('availableOnlyToggle', availableOnly);
 66 |   }
 67 | 
 68 |   function handlePageSizeChange() {
 69 |     dispatch('pageSizeChange', pageSize);
 70 |   }
 71 | 
 72 |   // Helper to check if set-specific features should be shown
 73 |   $: showSetSpecificFeatures = selectedSet !== 'all';
 74 |   $: currentSetId = showSetSpecificFeatures ? cardsBySet[selectedSet]?.cards[0]?.card?.set_id : null;
 75 |   $: isLoadingCurrentSet = currentSetId ? loadingSetData[currentSetId] : false;
 76 |   $: currentSetError = currentSetId ? setDataErrors[currentSetId] : null;
 77 | </script>
 78 | 
 79 | <div class="bg-white rounded-lg shadow-md p-6 mb-8">
 80 |   <h3 class="text-lg font-semibold text-gray-900 mb-4">🔍 Filter & Display Options</h3>
 81 |   
 82 |   <div class="space-y-6">
 83 |     <!-- Search and Basic Filters Row -->
 84 |     <div class="flex flex-col lg:flex-row gap-4">
 85 |       <!-- Search Bar -->
 86 |       <div class="flex-1">
 87 |         <label for="cardSearch" class="block text-sm font-medium text-gray-700 mb-1">
 88 |           Search Cards
 89 |         </label>
 90 |         <input
 91 |           type="text"
 92 |           id="cardSearch"
 93 |           bind:value={searchTerm}
 94 |           on:input={handleSearchInput}
 95 |           placeholder="Search by card name..."
 96 |           class="w-full rounded-md border-gray-300 text-sm focus:border-indigo-500 focus:ring-indigo-500"
 97 |         />
 98 |       </div>
 99 |       
100 |       <!-- Set Filter -->
101 |       <div class="flex-1">
102 |         <label for="setFilter" class="block text-sm font-medium text-gray-700 mb-1">
103 |           Filter by Set
104 |         </label>
105 |         <select 
106 |           id="setFilter"
107 |           bind:value={selectedSet}
108 |           on:change={handleSetChange}
109 |           class="w-full rounded-md border-gray-300 text-sm focus:border-indigo-500 focus:ring-indigo-500"
110 |         >
111 |           <option value="all">All Sets ({Object.keys(cardsBySet).length} sets)</option>
112 |           {#each Object.entries(cardsBySet) as [setName, setData]}
113 |             <option value={setName}>{setName} ({setData.cards.length})</option>
114 |           {/each}
115 |         </select>
116 |       </div>
117 |       
118 |       <!-- Rarity Filter -->
119 |       <div class="flex-1">
120 |         <label for="rarityFilter" class="block text-sm font-medium text-gray-700 mb-1">
121 |           Filter by Rarity
122 |         </label>
123 |         <select 
124 |           id="rarityFilter"
125 |           bind:value={selectedRarity}
126 |           on:change={handleRarityChange}
127 |           class="w-full rounded-md border-gray-300 text-sm focus:border-indigo-500 focus:ring-indigo-500"
128 |         >
129 |           <option value="all">All Rarities</option>
130 |           {#each allRarities as rarity}
131 |             <option value={rarity}>{rarity}</option>
132 |           {/each}
133 |         </select>
134 |       </div>
135 |     </div>
136 | 
137 |     <!-- Display Options Row -->
138 |     <div class="flex flex-col lg:flex-row gap-4 items-start">
139 |       <!-- View Mode Toggle -->
140 |       <div>
141 |         <label class="block text-sm font-medium text-gray-700 mb-1">
142 |           View Mode
143 |         </label>
144 |         <div class="flex rounded-lg border border-gray-300 overflow-hidden">
145 |           <button
146 |             type="button"
147 |             on:click={() => handleViewModeChange('grid')}
148 |             class="px-3 py-2 text-sm font-medium {viewMode === 'grid' ? 'bg-indigo-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}"
149 |           >
150 |             Grid
151 |           </button>
152 |           <button
153 |             type="button"
154 |             on:click={() => handleViewModeChange('table')}
155 |             class="px-3 py-2 text-sm font-medium border-l border-gray-300 {viewMode === 'table' ? 'bg-indigo-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}"
156 |           >
157 |             Table
158 |           </button>
159 |         </div>
160 |       </div>
161 |       
162 |       <!-- Missing Cards Options (only show for specific sets) -->
163 |       {#if showSetSpecificFeatures}
164 |         <div class="flex flex-col gap-2">
165 |           <!-- Missing Cards Toggle -->
166 |           <div>
167 |             <label class="flex items-center">
168 |               <input
169 |                 type="checkbox"
170 |                 bind:checked={showMissingCards}
171 |                 on:change={handleMissingCardsChange}
172 |                 class="rounded border-gray-300 text-indigo-600 focus:border-indigo-500 focus:ring-indigo-500"
173 |                 disabled={fetchingAllSets || isLoadingCurrentSet}
174 |               />
175 |               <span class="ml-2 text-sm text-gray-700">Show missing cards</span>
176 |               {#if fetchingAllSets || isLoadingCurrentSet}
177 |                 <svg class="ml-2 w-4 h-4 animate-spin text-indigo-600" fill="none" viewBox="0 0 24 24">
178 |                   <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
179 |                   <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
180 |                 </svg>
181 |               {/if}
182 |             </label>
183 |           </div>
184 | 
185 |           <!-- Only Missing Cards Toggle -->
186 |           <div>
187 |             <label class="flex items-center">
188 |               <input
189 |                 type="checkbox"
190 |                 bind:checked={onlyMissingCards}
191 |                 on:change={handleOnlyMissingChange}
192 |                 class="rounded border-gray-300 text-indigo-600 focus:border-indigo-500 focus:ring-indigo-500"
193 |                 disabled={fetchingAllSets || isLoadingCurrentSet}
194 |               />
195 |               <span class="ml-2 text-sm text-gray-700">Only show missing cards</span>
196 |             </label>
197 |           </div>
198 | 
199 |           <!-- Available Only Toggle -->
200 |           <div>
201 |             <label class="flex items-center">
202 |               <input
203 |                 type="checkbox"
204 |                 bind:checked={availableOnly}
205 |                 on:change={handleAvailableOnlyChange}
206 |                 class="rounded border-gray-300 text-indigo-600 focus:border-indigo-500 focus:ring-indigo-500"
207 |                 disabled={fetchingAllSets || isLoadingCurrentSet}
208 |               />
209 |               <span class="ml-2 text-sm text-gray-700">Available only</span>
210 |             </label>
211 |           </div>
212 |         </div>
213 |       {/if}
214 |       
215 |       <!-- Page Size Selector -->
216 |       <div>
217 |         <label for="pageSize" class="block text-sm font-medium text-gray-700 mb-1">
218 |           Cards per page
219 |         </label>
220 |         <select 
221 |           id="pageSize"
222 |           bind:value={pageSize}
223 |           on:change={handlePageSizeChange}
224 |           class="rounded-md border-gray-300 text-sm focus:border-indigo-500 focus:ring-indigo-500"
225 |         >
226 |           <option value={25}>25</option>
227 |           <option value={50}>50</option>
228 |           <option value={100}>100</option>
229 |           <option value={200}>200</option>
230 |           <option value={maxPageSize}>All ({maxPageSize})</option>
231 |         </select>
232 |       </div>
233 |     </div>
234 | 
235 |     <!-- Error Messages -->
236 |     {#if currentSetError}
237 |       <div class="text-xs text-red-600 bg-red-50 p-2 rounded">
238 |         Error loading set data: {currentSetError}
239 |       </div>
240 |     {/if}
241 |     
242 |     {#if bulkFetchErrors.length > 0}
243 |       <div class="text-xs text-yellow-600 bg-yellow-50 p-2 rounded">
244 |         Some set data failed to load ({bulkFetchErrors.length} errors)
245 |       </div>
246 |     {/if}
247 |   </div>
248 | </div>


--------------------------------------------------------------------------------
/src/lib/components/CardGrid.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { createEventDispatcher } from 'svelte';
  3 |   import { buildRipCardUrl } from '$lib/utils/url';
  4 | 
  5 |   // Props
  6 |   export let selectedSet: string = 'all';
  7 |   export let cardsBySet: any = {};
  8 |   export let paginatedCards: any[] = [];
  9 | 
 10 |   // Event dispatcher
 11 |   const dispatch = createEventDispatcher<{
 12 |     cardClick: any;
 13 |   }>();
 14 | 
 15 |   function handleCardClick(card: any) {
 16 |     dispatch('cardClick', card);
 17 |   }
 18 | 
 19 |   // Helper function to deduplicate cards by ID
 20 |   function deduplicateCards(cards: any[]): any[] {
 21 |     return Object.values(cards.reduce((unique: any, card: any) => {
 22 |       const cardId = card.card?.id;
 23 |       if (!unique[cardId] || unique[cardId].listing) {
 24 |         unique[cardId] = card;
 25 |       }
 26 |       return unique;
 27 |     }, {}));
 28 |   }
 29 | 
 30 |   // Helper function to format card status
 31 |   function getCardStatus(card: any): { text: string; class: string } {
 32 |     if (card.isMissing) {
 33 |       return { text: 'Missing', class: 'text-red-600' };
 34 |     } else if (card.is_listed) {
 35 |       return { text: 'Listed', class: 'text-green-600' };
 36 |     } else {
 37 |       return { text: 'Owned', class: 'text-gray-600' };
 38 |     }
 39 |   }
 40 | 
 41 |   // Helper function to get card container styling
 42 |   function getCardContainerClass(card: any): string {
 43 |     return `border rounded-lg p-3 relative cursor-pointer hover:shadow-md transition-shadow ${
 44 |       card.isMissing 
 45 |         ? 'border-red-300 bg-red-50 hover:bg-red-100' 
 46 |         : 'border-gray-200 bg-gray-50 hover:bg-gray-100'
 47 |     }`;
 48 |   }
 49 | </script>
 50 | 
 51 | <!-- Grid View -->
 52 | {#if selectedSet === 'all'}
 53 |   <!-- All Sets - Grouped Display -->
 54 |   {#each Object.entries(cardsBySet) as [setName, setData]}
 55 |     {@const set = setData as any}
 56 |     {@const setCards = deduplicateCards(set.cards)}
 57 |     
 58 |     <div class="mb-6 border rounded-lg p-4">
 59 |       <div class="flex justify-between items-center mb-3">
 60 |         <h3 class="font-medium text-gray-900">
 61 |           {setName}
 62 |           <span class="text-sm text-gray-500">({setCards.length} cards)</span>
 63 |         </h3>
 64 |         {#if set.releaseDate}
 65 |           <div class="text-sm text-gray-500">
 66 |             Release: {new Date(set.releaseDate).toLocaleDateString()}
 67 |           </div>
 68 |         {/if}
 69 |       </div>
 70 |       
 71 |       <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
 72 |         {#each setCards as card}
 73 |           <div 
 74 |             class={getCardContainerClass(card)}
 75 |             on:click={() => handleCardClick(card)}
 76 |             role="button"
 77 |             tabindex="0"
 78 |             on:keydown={(e) => e.key === 'Enter' && handleCardClick(card)}
 79 |           >
 80 |             <div class="flex items-start justify-between mb-2">
 81 |               <div class="flex-1">
 82 |                 <h4 class="font-medium text-sm text-gray-900">
 83 |                   {card.card?.name || 'Unknown Card'}
 84 |                   {#if card.card?.card_number}
 85 |                     <span class="text-gray-500">#{card.card.card_number}</span>
 86 |                   {/if}
 87 |                 </h4>
 88 |                 <p class="text-xs text-gray-600 mt-1">
 89 |                   {card.card?.rarity || 'Unknown Rarity'}
 90 |                   {#if card.card?.types}
 91 |                     • {card.card.types.join(', ')}
 92 |                   {/if}
 93 |                 </p>
 94 |               </div>
 95 |               <div class="w-10 h-14 bg-gradient-to-br from-blue-100 to-indigo-100 rounded border ml-2 flex items-center justify-center">
 96 |                 <svg class="w-4 h-4 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 97 |                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
 98 |                 </svg>
 99 |               </div>
100 |             </div>
101 |             
102 |             <div class="space-y-1 text-xs">
103 |               {#if card.card?.hp}
104 |                 <div class="flex justify-between">
105 |                   <span class="text-gray-500">HP:</span>
106 |                   <span class="text-gray-900">{card.card.hp}</span>
107 |                 </div>
108 |               {/if}
109 |               {#if card.listing}
110 |                 <div class="flex justify-between">
111 |                   <span class="text-gray-500">Listed:</span>
112 |                   <span class="text-green-600 font-medium">${card.listing.usd_price}</span>
113 |                 </div>
114 |               {:else if card.card?.raw_price}
115 |                 <div class="flex justify-between">
116 |                   <span class="text-gray-500">Value:</span>
117 |                   <span class="text-gray-900">${card.card.raw_price}</span>
118 |                 </div>
119 |               {/if}
120 |               <div class="flex justify-between">
121 |                 <span class="text-gray-500">Status:</span>
122 |                 <span class={getCardStatus(card).class}>{getCardStatus(card).text}</span>
123 |               </div>
124 |             </div>
125 |           </div>
126 |         {/each}
127 |       </div>
128 |     </div>
129 |   {/each}
130 | {:else}
131 |   <!-- Single Set - Grid Display -->
132 |   <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
133 |     {#each paginatedCards as card}
134 |       <div 
135 |         class={getCardContainerClass(card)}
136 |         on:click={() => handleCardClick(card)}
137 |         role="button"
138 |         tabindex="0"
139 |         on:keydown={(e) => e.key === 'Enter' && handleCardClick(card)}
140 |       >
141 |         <div class="flex items-start justify-between mb-2">
142 |           <div class="flex-1">
143 |             <h4 class="font-medium text-sm text-gray-900">
144 |               {card.card?.name || 'Unknown Card'}
145 |               {#if card.card?.card_number}
146 |                 <span class="text-gray-500">#{card.card.card_number}</span>
147 |               {/if}
148 |             </h4>
149 |             <p class="text-xs text-gray-600 mt-1">
150 |               {card.card?.rarity || 'Unknown Rarity'}
151 |               {#if card.card?.types}
152 |                 • {card.card.types.join(', ')}
153 |               {/if}
154 |             </p>
155 |           </div>
156 |           <div class="w-10 h-14 bg-gradient-to-br from-blue-100 to-indigo-100 rounded border ml-2 flex items-center justify-center">
157 |             <svg class="w-4 h-4 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
158 |               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
159 |             </svg>
160 |           </div>
161 |         </div>
162 |         
163 |         <div class="space-y-1 text-xs">
164 |           {#if card.card?.hp}
165 |             <div class="flex justify-between">
166 |               <span class="text-gray-500">HP:</span>
167 |               <span class="text-gray-900">{card.card.hp}</span>
168 |             </div>
169 |           {/if}
170 |           {#if card.listing}
171 |             <div class="flex justify-between">
172 |               <span class="text-gray-500">Listed:</span>
173 |               <span class="text-green-600 font-medium">${card.listing.usd_price}</span>
174 |             </div>
175 |           {:else if card.card?.raw_price}
176 |             <div class="flex justify-between">
177 |               <span class="text-gray-500">Value:</span>
178 |               <span class="text-gray-900">${card.card.raw_price}</span>
179 |             </div>
180 |           {/if}
181 |           <div class="flex justify-between">
182 |             <span class="text-gray-500">Status:</span>
183 |             <span class={getCardStatus(card).class}>{getCardStatus(card).text}</span>
184 |           </div>
185 | 
186 |           <!-- Missing Card Actions -->
187 |           {#if card.isMissing && card.marketplaceData}
188 |             <div class="mt-2 pt-2 border-t border-red-200">
189 |               {#if card.marketplaceData.lowestPrice}
190 |                 <div class="flex justify-between mb-1">
191 |                   <span class="text-xs text-gray-500">Listed:</span>
192 |                   <span class="text-xs font-medium text-green-600">${card.marketplaceData.lowestPrice}</span>
193 |                 </div>
194 |               {/if}
195 |               <div class="flex gap-1">
196 |                 {#if card.marketplaceData.hasListings}
197 |                   <a 
198 |                     href={buildRipCardUrl(card.card || card)}
199 |                     target="_blank"
200 |                     rel="noopener noreferrer"
201 |                     class="flex-1 px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 text-center"
202 |                   >
203 |                     Buy Now
204 |                   </a>
205 |                 {:else}
206 |                   <a 
207 |                     href={buildRipCardUrl(card.card || card)}
208 |                     target="_blank"
209 |                     rel="noopener noreferrer"
210 |                     class="flex-1 px-2 py-1 bg-gray-400 text-white text-xs rounded hover:bg-gray-500 text-center"
211 |                   >
212 |                     Make Offer
213 |                   </a>
214 |                 {/if}
215 |               </div>
216 |             </div>
217 |           {/if}
218 |         </div>
219 |       </div>
220 |     {/each}
221 |   </div>
222 | {/if}
223 | 
224 | {#if paginatedCards.length === 0 && selectedSet !== 'all'}
225 |   <div class="text-center py-12">
226 |     <div class="text-4xl mb-4">🔍</div>
227 |     <h3 class="text-lg font-medium text-gray-900 mb-2">No cards found</h3>
228 |     <p class="text-gray-600">Try adjusting your filters or search term.</p>
229 |   </div>
230 | {/if}


--------------------------------------------------------------------------------
/src/lib/components/CardTable.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { createEventDispatcher } from 'svelte';
  3 |   import { buildRipCardUrl } from '$lib/utils/url';
  4 |   import { getSetNameFromCard } from '$lib/utils/card';
  5 | 
  6 |   // Props
  7 |   export let paginatedCards: any[] = [];
  8 |   export let sortColumn: string = '';
  9 |   export let sortDirection: 'asc' | 'desc' = 'asc';
 10 |   export let setNameById: Record<string, string> = {};
 11 |   export let resolveSetName: (card: any) => string;
 12 | 
 13 |   // Event dispatcher
 14 |   const dispatch = createEventDispatcher<{
 15 |     cardClick: any;
 16 |     sort: { column: string; direction: 'asc' | 'desc' };
 17 |   }>();
 18 | 
 19 |   function handleCardClick(card: any) {
 20 |     dispatch('cardClick', card);
 21 |   }
 22 | 
 23 |   function handleSort(column: string) {
 24 |     const newDirection = sortColumn === column && sortDirection === 'asc' ? 'desc' : 'asc';
 25 |     dispatch('sort', { column, direction: newDirection });
 26 |   }
 27 | 
 28 |   // Local fallback resolver used only if parent didn't provide one
 29 |   function localResolveSetName(card: any): string {
 30 |     const numericOnly = (s: any) => typeof s === 'string' && /^\d+$/.test(s.trim());
 31 |     const primary = getSetNameFromCard(card);
 32 |     const setId = card?.set?.id || card?.card?.set_id || card?.set_id;
 33 |     if (primary && !numericOnly(primary) && primary !== setId) return primary;
 34 |     if (setId && setNameById[setId]) return setNameById[setId];
 35 |     return primary && !numericOnly(primary) ? primary : (setId || primary || 'Unknown Set');
 36 |   }
 37 | 
 38 |   function getRowClass(card: any): string {
 39 |     return card.isMissing 
 40 |       ? 'bg-red-50 hover:bg-red-100 cursor-pointer border-l-4 border-red-400' 
 41 |       : 'hover:bg-gray-50 cursor-pointer';
 42 |   }
 43 | 
 44 |   function getActionButtonClass(card: any): string {
 45 |     return card.is_listed 
 46 |       ? 'bg-blue-600 hover:bg-blue-700 text-white' 
 47 |       : 'bg-gray-500 hover:bg-gray-600 text-white';
 48 |   }
 49 | 
 50 |   function getBuyNowUrl(card: any): string {
 51 |     return buildRipCardUrl(card.card || card);
 52 |   }
 53 | 
 54 |   function formatPrice(price: any): string {
 55 |     if (typeof price === 'number') {
 56 |       return price.toFixed(2);
 57 |     }
 58 |     return price || '—';
 59 |   }
 60 | 
 61 |   function getSortIcon(column: string): string {
 62 |     if (sortColumn === column) {
 63 |       return sortDirection === 'asc' ? '↑' : '↓';
 64 |     }
 65 |     return '';
 66 |   }
 67 | </script>
 68 | 
 69 | <div class="mb-2">
 70 |   <p class="text-sm text-gray-600">
 71 |     💡 Click on any row to view detailed card information and high-resolution images
 72 |   </p>
 73 | </div>
 74 | 
 75 | <div class="overflow-x-auto">
 76 |   <table class="min-w-full divide-y divide-gray-200">
 77 |     <thead class="bg-gray-50">
 78 |       <tr>
 79 |         <!-- Card Column -->
 80 |         <th 
 81 |           scope="col" 
 82 |           class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
 83 |           on:click={() => handleSort('name')}
 84 |           role="button"
 85 |           tabindex="0"
 86 |           on:keydown={(e) => e.key === 'Enter' && handleSort('name')}
 87 |         >
 88 |           <div class="flex items-center space-x-1">
 89 |             <span>Card</span>
 90 |             {#if sortColumn === 'name'}
 91 |               <span class="text-indigo-600">{getSortIcon('name')}</span>
 92 |             {/if}
 93 |           </div>
 94 |         </th>
 95 | 
 96 |         <!-- Set Column -->
 97 |         <th 
 98 |           scope="col" 
 99 |           class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
100 |           on:click={() => handleSort('set')}
101 |           role="button"
102 |           tabindex="0"
103 |           on:keydown={(e) => e.key === 'Enter' && handleSort('set')}
104 |         >
105 |           <div class="flex items-center space-x-1">
106 |             <span>Set</span>
107 |             {#if sortColumn === 'set'}
108 |               <span class="text-indigo-600">{getSortIcon('set')}</span>
109 |             {/if}
110 |           </div>
111 |         </th>
112 | 
113 |         <!-- Rarity Column -->
114 |         <th 
115 |           scope="col" 
116 |           class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
117 |           on:click={() => handleSort('rarity')}
118 |           role="button"
119 |           tabindex="0"
120 |           on:keydown={(e) => e.key === 'Enter' && handleSort('rarity')}
121 |         >
122 |           <div class="flex items-center space-x-1">
123 |             <span>Rarity</span>
124 |             {#if sortColumn === 'rarity'}
125 |               <span class="text-indigo-600">{getSortIcon('rarity')}</span>
126 |             {/if}
127 |           </div>
128 |         </th>
129 | 
130 |         <!-- Type Column -->
131 |         <th 
132 |           scope="col" 
133 |           class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
134 |           on:click={() => handleSort('type')}
135 |           role="button"
136 |           tabindex="0"
137 |           on:keydown={(e) => e.key === 'Enter' && handleSort('type')}
138 |         >
139 |           <div class="flex items-center space-x-1">
140 |             <span>Type</span>
141 |             {#if sortColumn === 'type'}
142 |               <span class="text-indigo-600">{getSortIcon('type')}</span>
143 |             {/if}
144 |           </div>
145 |         </th>
146 | 
147 |         <!-- Value Column -->
148 |         <th 
149 |           scope="col" 
150 |           class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
151 |           on:click={() => handleSort('value')}
152 |           role="button"
153 |           tabindex="0"
154 |           on:keydown={(e) => e.key === 'Enter' && handleSort('value')}
155 |         >
156 |           <div class="flex items-center space-x-1">
157 |             <span>Value</span>
158 |             {#if sortColumn === 'value'}
159 |               <span class="text-indigo-600">{getSortIcon('value')}</span>
160 |             {/if}
161 |           </div>
162 |         </th>
163 | 
164 |         <!-- Listed Price Column -->
165 |         <th 
166 |           scope="col" 
167 |           class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
168 |           on:click={() => handleSort('listedPrice')}
169 |           role="button"
170 |           tabindex="0"
171 |           on:keydown={(e) => e.key === 'Enter' && handleSort('listedPrice')}
172 |         >
173 |           <div class="flex items-center space-x-1">
174 |             <span>Listed Price</span>
175 |             {#if sortColumn === 'listedPrice'}
176 |               <span class="text-indigo-600">{getSortIcon('listedPrice')}</span>
177 |             {/if}
178 |           </div>
179 |         </th>
180 | 
181 |         <!-- Available Column -->
182 |         <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
183 |           Available
184 |         </th>
185 | 
186 |         <!-- Action Column -->
187 |         <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
188 |           Action
189 |         </th>
190 | 
191 |         <!-- Status Column -->
192 |         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
193 |           Status
194 |         </th>
195 |       </tr>
196 |     </thead>
197 |     <tbody class="bg-white divide-y divide-gray-200">
198 |       {#each paginatedCards as card}
199 |         <tr 
200 |           class={getRowClass(card)}
201 |           on:click={() => handleCardClick(card)}
202 |           role="button"
203 |           tabindex="0"
204 |           on:keydown={(e) => e.key === 'Enter' && handleCardClick(card)}
205 |         >
206 |           <!-- Card Column -->
207 |           <td class="px-6 py-4 whitespace-nowrap">
208 |             <div class="flex items-center">
209 |               <div class="w-8 h-11 rounded border mr-3 flex items-center justify-center overflow-hidden bg-gray-100">
210 |                 {#if card.card?.small_image_url}
211 |                   <img 
212 |                     src={card.card.small_image_url} 
213 |                     alt={card.card?.name || 'Card'} 
214 |                     class="w-full h-full object-cover rounded"
215 |                     loading="lazy"
216 |                   />
217 |                 {:else}
218 |                   <svg class="w-4 h-4 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
219 |                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
220 |                   </svg>
221 |                 {/if}
222 |               </div>
223 |               <div>
224 |                 <div class="text-sm font-medium text-gray-900">
225 |                   {card.card?.name || 'Unknown Card'}
226 |                 </div>
227 |                 {#if card.card?.card_number}
228 |                   <div class="text-sm text-gray-500">#{card.card.card_number}</div>
229 |                 {/if}
230 |               </div>
231 |             </div>
232 |           </td>
233 | 
234 |           <!-- Set Column -->
235 |           <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
236 |             {resolveSetName(card)}
237 |           </td>
238 | 
239 |           <!-- Rarity Column -->
240 |           <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
241 |             <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
242 |               {card.card?.rarity || 'Unknown'}
243 |             </span>
244 |           </td>
245 | 
246 |           <!-- Type Column -->
247 |           <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
248 |             {card.card?.types?.join(', ') || 'Unknown'}
249 |           </td>
250 | 
251 |           <!-- Value Column -->
252 |           <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
253 |             {#if card.isMissing}
254 |               {#if card.marketValue}
255 |                 ${formatPrice(card.marketValue)}
256 |               {:else if card.card?.raw_price}
257 |                 ${formatPrice(card.card.raw_price)}
258 |               {:else}
259 |                 —
260 |               {/if}
261 |             {:else}
262 |               {#if card.card?.raw_price}
263 |                 ${formatPrice(card.card.raw_price)}
264 |               {:else}
265 |                 —
266 |               {/if}
267 |             {/if}
268 |           </td>
269 | 
270 |           <!-- Listed Price Column -->
271 |           <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
272 |             {#if card.isMissing}
273 |               {#if card.is_listed && card.lowestPrice}
274 |                 <span class="text-green-600 font-medium">${formatPrice(card.lowestPrice)}</span>
275 |               {:else}
276 |                 <span class="text-gray-400">Not listed</span>
277 |               {/if}
278 |             {:else}
279 |               {#if card.listing?.usd_price}
280 |                 <span class="text-green-600 font-medium">${formatPrice(card.listing.usd_price)}</span>
281 |               {:else}
282 |                 <span class="text-gray-400">Not listed</span>
283 |               {/if}
284 |             {/if}
285 |           </td>
286 | 
287 |           <!-- Available Column -->
288 |           <td class="px-6 py-4 whitespace-nowrap text-center">
289 |             {#if card.isMissing}
290 |               {#if card.is_listed}
291 |                 <svg class="w-5 h-5 text-green-600 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
292 |                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
293 |                 </svg>
294 |               {:else}
295 |                 <svg class="w-5 h-5 text-red-600 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
296 |                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
297 |                 </svg>
298 |               {/if}
299 |             {:else}
300 |               <span class="text-gray-400 text-sm">N/A</span>
301 |             {/if}
302 |           </td>
303 | 
304 |           <!-- Action Column -->
305 |           <td class="px-6 py-4 whitespace-nowrap text-center">
306 |             {#if card.isMissing}
307 |               <a 
308 |                 href={getBuyNowUrl(card)} 
309 |                 target="_blank" 
310 |                 rel="noopener noreferrer"
311 |                 class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium {getActionButtonClass(card)}"
312 |                 on:click|stopPropagation
313 |               >
314 |                 {card.is_listed ? 'Buy Now' : 'Make Offer'}
315 |               </a>
316 |             {:else}
317 |               <span class="text-gray-400 text-sm">N/A</span>
318 |             {/if}
319 |           </td>
320 | 
321 |           <!-- Status Column -->
322 |           <td class="px-6 py-4 whitespace-nowrap">
323 |             {#if card.isMissing}
324 |               <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
325 |                 Missing
326 |               </span>
327 |             {:else if card.is_listed}
328 |               <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
329 |                 Listed
330 |               </span>
331 |             {:else}
332 |               <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
333 |                 Owned
334 |               </span>
335 |             {/if}
336 |           </td>
337 |         </tr>
338 |       {/each}
339 |     </tbody>
340 |   </table>
341 | </div>
342 | 
343 | {#if paginatedCards.length === 0}
344 |   <div class="text-center py-12">
345 |     <div class="text-4xl mb-4">🔍</div>
346 |     <h3 class="text-lg font-medium text-gray-900 mb-2">No cards found</h3>
347 |     <p class="text-gray-600">Try adjusting your filters or search term.</p>
348 |   </div>
349 | {/if}


--------------------------------------------------------------------------------
/src/lib/components/PackManager.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { onMount } from 'svelte';
  3 | 
  4 |   // Props
  5 |   export let digitalProducts: any[] = [];
  6 | 
  7 |   // Reactive computed groups
  8 |   $: groupedPacks = digitalProducts.reduce((groups: any, product: any) => {
  9 |     const packName = product.name || 'Unknown Pack';
 10 |     if (!groups[packName]) {
 11 |       groups[packName] = {
 12 |         name: packName,
 13 |         items: [],
 14 |         totalValue: 0,
 15 |         listedCount: 0,
 16 |         ownedCount: 0,
 17 |         openedCount: 0,
 18 |         sealedCount: 0,
 19 |         pendingOpenCount: 0,
 20 |         sampleImage: null
 21 |       };
 22 |     }
 23 |     
 24 |     groups[packName].items.push(product);
 25 |     groups[packName].totalValue += parseFloat(product.product?.current_value || '0');
 26 |     
 27 |     if (product.is_listed) {
 28 |       groups[packName].listedCount++;
 29 |     } else {
 30 |       groups[packName].ownedCount++;
 31 |     }
 32 |     
 33 |     // Count pack statuses based on open_status
 34 |     const status = product.open_status?.toLowerCase() || 'unknown';
 35 |     if (status.includes('opened') || status === 'opened') {
 36 |       groups[packName].openedCount++;
 37 |     } else if (status.includes('sealed') || status === 'sealed' || status === 'unopened') {
 38 |       groups[packName].sealedCount++;
 39 |     } else if (status.includes('pending') || status.includes('opening')) {
 40 |       groups[packName].pendingOpenCount++;
 41 |     } else if (!product.is_listed) {
 42 |       // If no specific status but owned, assume sealed
 43 |       groups[packName].sealedCount++;
 44 |     }
 45 |     
 46 |     if (!groups[packName].sampleImage && product.front_image_url) {
 47 |       groups[packName].sampleImage = product.front_image_url;
 48 |     }
 49 |     
 50 |     return groups;
 51 |   }, {});
 52 | 
 53 |   function togglePackGroup(groupId: string) {
 54 |     const details = document.getElementById(`details-${groupId}`);
 55 |     const icon = document.getElementById(`icon-${groupId}`);
 56 |     if (details && icon) {
 57 |       details.classList.toggle('hidden');
 58 |       icon.classList.toggle('rotate-180');
 59 |     }
 60 |   }
 61 | 
 62 |   function getStatusBadgeClass(product: any): string {
 63 |     return product.is_listed 
 64 |       ? 'bg-green-100 text-green-800' 
 65 |       : 'bg-gray-100 text-gray-800';
 66 |   }
 67 | 
 68 |   function getStatusText(product: any): string {
 69 |     return product.is_listed ? 'Listed' : (product.open_status || 'Owned');
 70 |   }
 71 | </script>
 72 | 
 73 | {#if digitalProducts.length > 0}
 74 |   <div class="bg-white shadow rounded-lg p-6">
 75 |     <div class="flex justify-between items-center mb-6">
 76 |       <h2 class="text-lg font-medium text-gray-900">Digital Products ({digitalProducts.length})</h2>
 77 |       <div class="text-sm text-gray-500">
 78 |         {Object.keys(groupedPacks).length} unique pack types
 79 |       </div>
 80 |     </div>
 81 | 
 82 |     <!-- Grouped Pack Display -->
 83 |     <div class="space-y-6">
 84 |       {#each Object.values(groupedPacks) as packGroup, index}
 85 |         {@const group = packGroup as any}
 86 |         {@const groupId = `group-${index}`}
 87 |         
 88 |         <div class="border border-gray-200 rounded-lg overflow-hidden">
 89 |           <!-- Pack Group Header -->
 90 |           <button
 91 |             class="w-full px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 hover:from-gray-100 hover:to-gray-200 border-b border-gray-200 flex items-center justify-between transition-colors"
 92 |             on:click={() => togglePackGroup(groupId)}
 93 |             type="button"
 94 |           >
 95 |             <div class="flex items-center space-x-4">
 96 |               {#if group.sampleImage}
 97 |                 <img 
 98 |                   src={group.sampleImage} 
 99 |                   alt={group.name} 
100 |                   class="w-12 h-16 object-cover rounded border"
101 |                   loading="lazy"
102 |                 />
103 |               {/if}
104 |               <div class="text-left">
105 |                 <h3 class="text-lg font-semibold text-gray-900">{group.name}</h3>
106 |                 <p class="text-sm text-gray-600">
107 |                   {group.items.length} packs • 
108 |                   <span class="text-green-600 font-medium">{group.openedCount} opened</span> • 
109 |                   <span class="text-blue-600 font-medium">{group.sealedCount} sealed</span>
110 |                   {#if group.pendingOpenCount > 0}
111 |                     • <span class="text-orange-600 font-medium">{group.pendingOpenCount} pending</span>
112 |                   {/if}
113 |                   {#if group.totalValue > 0}
114 |                     • ${group.totalValue.toFixed(2)} value
115 |                   {/if}
116 |                 </p>
117 |               </div>
118 |             </div>
119 |             
120 |             <div class="flex items-center space-x-2">
121 |               <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
122 |                 {group.items.length}
123 |               </span>
124 |               <svg 
125 |                 id="icon-{groupId}"
126 |                 class="h-5 w-5 text-gray-500 transition-transform transform rotate-0"
127 |                 fill="none" 
128 |                 viewBox="0 0 24 24" 
129 |                 stroke="currentColor"
130 |               >
131 |                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
132 |               </svg>
133 |             </div>
134 |           </button>
135 | 
136 |           <!-- Expandable Pack Details -->
137 |           <div id="details-{groupId}" class="hidden bg-white">
138 |             <!-- Summary Section -->
139 |             <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-blue-200">
140 |               <h4 class="text-sm font-semibold text-gray-900 mb-3">{group.name} Summary</h4>
141 |               <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
142 |                 <div class="text-center">
143 |                   <div class="text-2xl font-bold text-green-600">{group.openedCount}</div>
144 |                   <div class="text-xs text-gray-600 uppercase tracking-wide">Opened</div>
145 |                 </div>
146 |                 <div class="text-center">
147 |                   <div class="text-2xl font-bold text-blue-600">{group.sealedCount}</div>
148 |                   <div class="text-xs text-gray-600 uppercase tracking-wide">Sealed</div>
149 |                 </div>
150 |                 <div class="text-center">
151 |                   <div class="text-2xl font-bold text-orange-600">{group.pendingOpenCount}</div>
152 |                   <div class="text-xs text-gray-600 uppercase tracking-wide">Pending Open</div>
153 |                 </div>
154 |                 <div class="text-center">
155 |                   <div class="text-2xl font-bold text-gray-800">{group.items.length}</div>
156 |                   <div class="text-xs text-gray-600 uppercase tracking-wide">Total Packs</div>
157 |                 </div>
158 |               </div>
159 |               {#if group.totalValue > 0}
160 |                 <div class="mt-3 text-center">
161 |                   <div class="text-lg font-semibold text-gray-900">
162 |                     Total Value: ${group.totalValue.toFixed(2)}
163 |                   </div>
164 |                 </div>
165 |               {/if}
166 |             </div>
167 |             
168 |             <!-- Pack Details Table -->
169 |             <div class="overflow-x-auto">
170 |               <table class="min-w-full divide-y divide-gray-200">
171 |                 <thead class="bg-gray-50">
172 |                   <tr>
173 |                     <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
174 |                       ID
175 |                     </th>
176 |                     <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
177 |                       Status
178 |                     </th>
179 |                   </tr>
180 |                 </thead>
181 |                 <tbody class="bg-white divide-y divide-gray-200">
182 |                   {#each group.items as product}
183 |                     <tr class="hover:bg-gray-50">
184 |                       <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
185 |                         #{product.id}
186 |                       </td>
187 |                       <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
188 |                         <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {getStatusBadgeClass(product)}">
189 |                           {getStatusText(product)}
190 |                         </span>
191 |                       </td>
192 |                     </tr>
193 |                   {/each}
194 |                 </tbody>
195 |               </table>
196 |             </div>
197 |           </div>
198 |         </div>
199 |       {/each}
200 |     </div>
201 |   </div>
202 | {/if}


--------------------------------------------------------------------------------
/src/lib/components/ProfileForm.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   interface ProfileData {
  3 |     name: string;
  4 |     bio?: string;
  5 |     website?: string;
  6 |     twitter?: string;
  7 |     github?: string;
  8 |     linkedin?: string;
  9 |     wallet?: string;
 10 |     email?: string;
 11 |     location?: string;
 12 |     avatar?: string;
 13 |   }
 14 | 
 15 |   let { profile = {}, onSubmit, loading = false }: {
 16 |     profile?: Partial<ProfileData>;
 17 |     onSubmit: (data: ProfileData) => Promise<void>;
 18 |     loading?: boolean;
 19 |   } = $props();
 20 | 
 21 |   let formData = $state({
 22 |     name: profile.name || '',
 23 |     bio: profile.bio || '',
 24 |     website: profile.website || '',
 25 |     twitter: profile.twitter || '',
 26 |     github: profile.github || '',
 27 |     linkedin: profile.linkedin || '',
 28 |     wallet: profile.wallet || '',
 29 |     email: profile.email || '',
 30 |     location: profile.location || '',
 31 |     avatar: profile.avatar || ''
 32 |   });
 33 | 
 34 |   let errors = $state<Record<string, string>>({});
 35 | 
 36 |   function validateForm(): boolean {
 37 |     errors = {};
 38 |     
 39 |     if (!formData.name.trim()) {
 40 |       errors.name = 'Name is required';
 41 |     }
 42 | 
 43 |     if (formData.email && !isValidEmail(formData.email)) {
 44 |       errors.email = 'Please enter a valid email address';
 45 |     }
 46 | 
 47 |     if (formData.website && !isValidUrl(formData.website)) {
 48 |       errors.website = 'Please enter a valid URL';
 49 |     }
 50 | 
 51 |     return Object.keys(errors).length === 0;
 52 |   }
 53 | 
 54 |   function isValidEmail(email: string): boolean {
 55 |     return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
 56 |   }
 57 | 
 58 |   function isValidUrl(url: string): boolean {
 59 |     try {
 60 |       new URL(url);
 61 |       return true;
 62 |     } catch {
 63 |       return false;
 64 |     }
 65 |   }
 66 | 
 67 |   async function handleSubmit(event: Event) {
 68 |     event.preventDefault();
 69 |     if (!validateForm()) return;
 70 |     
 71 |     const cleanData: ProfileData = {
 72 |       name: formData.name.trim()
 73 |     };
 74 | 
 75 |     Object.entries(formData).forEach(([key, value]) => {
 76 |       if (key !== 'name' && value?.trim()) {
 77 |         (cleanData as any)[key] = value.trim();
 78 |       }
 79 |     });
 80 | 
 81 |     await onSubmit(cleanData);
 82 |   }
 83 | </script>
 84 | 
 85 | <form onsubmit={handleSubmit} class="space-y-6">
 86 |   <div>
 87 |     <label for="name" class="block text-sm font-medium text-gray-700">Name *</label>
 88 |     <input
 89 |       type="text"
 90 |       id="name"
 91 |       bind:value={formData.name}
 92 |       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
 93 |       class:border-red-300={errors.name}
 94 |       placeholder="Enter your full name"
 95 |       required
 96 |     />
 97 |     {#if errors.name}
 98 |       <p class="mt-1 text-sm text-red-600">{errors.name}</p>
 99 |     {/if}
100 |   </div>
101 | 
102 |   <div>
103 |     <label for="bio" class="block text-sm font-medium text-gray-700">Bio</label>
104 |     <textarea
105 |       id="bio"
106 |       bind:value={formData.bio}
107 |       rows="3"
108 |       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
109 |       placeholder="Tell us about yourself..."
110 |     ></textarea>
111 |   </div>
112 | 
113 |   <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
114 |     <div>
115 |       <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
116 |       <input
117 |         type="email"
118 |         id="email"
119 |         bind:value={formData.email}
120 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
121 |         class:border-red-300={errors.email}
122 |         placeholder="your@email.com"
123 |       />
124 |       {#if errors.email}
125 |         <p class="mt-1 text-sm text-red-600">{errors.email}</p>
126 |       {/if}
127 |     </div>
128 | 
129 |     <div>
130 |       <label for="location" class="block text-sm font-medium text-gray-700">Location</label>
131 |       <input
132 |         type="text"
133 |         id="location"
134 |         bind:value={formData.location}
135 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
136 |         placeholder="City, Country"
137 |       />
138 |     </div>
139 |   </div>
140 | 
141 |   <div>
142 |     <label for="website" class="block text-sm font-medium text-gray-700">Website</label>
143 |     <input
144 |       type="url"
145 |       id="website"
146 |       bind:value={formData.website}
147 |       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
148 |       class:border-red-300={errors.website}
149 |       placeholder="https://example.com"
150 |     />
151 |     {#if errors.website}
152 |       <p class="mt-1 text-sm text-red-600">{errors.website}</p>
153 |     {/if}
154 |   </div>
155 | 
156 |   <div class="grid grid-cols-1 gap-6 sm:grid-cols-3">
157 |     <div>
158 |       <label for="twitter" class="block text-sm font-medium text-gray-700">Twitter</label>
159 |       <input
160 |         type="text"
161 |         id="twitter"
162 |         bind:value={formData.twitter}
163 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
164 |         placeholder="username"
165 |       />
166 |     </div>
167 | 
168 |     <div>
169 |       <label for="github" class="block text-sm font-medium text-gray-700">GitHub</label>
170 |       <input
171 |         type="text"
172 |         id="github"
173 |         bind:value={formData.github}
174 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
175 |         placeholder="username"
176 |       />
177 |     </div>
178 | 
179 |     <div>
180 |       <label for="linkedin" class="block text-sm font-medium text-gray-700">LinkedIn</label>
181 |       <input
182 |         type="text"
183 |         id="linkedin"
184 |         bind:value={formData.linkedin}
185 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
186 |         placeholder="username"
187 |       />
188 |     </div>
189 |   </div>
190 | 
191 |   <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
192 |     <div>
193 |       <label for="wallet" class="block text-sm font-medium text-gray-700">Wallet Address</label>
194 |       <input
195 |         type="text"
196 |         id="wallet"
197 |         bind:value={formData.wallet}
198 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
199 |         placeholder="0x..."
200 |       />
201 |     </div>
202 | 
203 |     <div>
204 |       <label for="avatar" class="block text-sm font-medium text-gray-700">Avatar URL</label>
205 |       <input
206 |         type="url"
207 |         id="avatar"
208 |         bind:value={formData.avatar}
209 |         class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
210 |         placeholder="https://example.com/avatar.jpg"
211 |       />
212 |     </div>
213 |   </div>
214 | 
215 |   <div class="flex justify-end space-x-3">
216 |     <a
217 |       href="/profiles"
218 |       class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
219 |     >
220 |       Cancel
221 |     </a>
222 |     <button
223 |       type="submit"
224 |       disabled={loading}
225 |       class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 disabled:opacity-50"
226 |     >
227 |       {#if loading}
228 |         <div class="animate-spin -ml-1 mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
229 |       {/if}
230 |       Save Profile
231 |     </button>
232 |   </div>
233 | </form>


--------------------------------------------------------------------------------
/src/lib/components/TradeTable.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   // Props for the reusable trade table component
  3 |   export let title: string;
  4 |   export let trades: any[];
  5 |   export let userCountField: 'userACount' | 'userBCount';
  6 |   export let titleColor: string = 'text-gray-900';
  7 | 
  8 |   function formatCurrency(amount: number): string {
  9 |     return new Intl.NumberFormat('en-US', {
 10 |       style: 'currency',
 11 |       currency: 'USD',
 12 |       minimumFractionDigits: 2
 13 |     }).format(amount);
 14 |   }
 15 | 
 16 |   function getRowHighlighting(trade: any): string {
 17 |     // Highlight rows based on card count for both give and receive trades
 18 |     const count = userCountField === 'userACount' ? trade.userACount : trade.userBCount;
 19 |     if ((trade.tradeType === 'give' || trade.tradeType === 'receive' || trade.tradeType === 'perfect') && count > 0) {
 20 |       return 'cursor-pointer'; // Will use inline styles for coloring
 21 |     }
 22 |     return 'hover:bg-gray-50 cursor-pointer'; // Default styling
 23 |   }
 24 | 
 25 |   function getRowStyle(trade: any): string {
 26 |     // Highlight rows based on card count for both give and receive trades
 27 |     const count = userCountField === 'userACount' ? trade.userACount : trade.userBCount;
 28 |     if ((trade.tradeType === 'give' || trade.tradeType === 'receive' || trade.tradeType === 'perfect') && count > 0) {
 29 |       if (count === 1) {
 30 |         return 'background-color: #fed7aa; border-left: 4px solid #ea580c;'; // Single card - orange
 31 |       } else {
 32 |         return 'background-color: #bbf7d0; border-left: 4px solid #16a34a;'; // Multiple cards - green
 33 |       }
 34 |     }
 35 |     return ''; // Default styling
 36 |   }
 37 | 
 38 |   function getRarityBadgeClass(rarity: string): string {
 39 |     switch (rarity) {
 40 |       case 'common': return 'bg-gray-100 text-gray-800';
 41 |       case 'uncommon': return 'bg-green-100 text-green-800';
 42 |       case 'rare': return 'bg-blue-100 text-blue-800';
 43 |       case 'mythic': return 'bg-purple-100 text-purple-800';
 44 |       default: return 'bg-yellow-100 text-yellow-800';
 45 |     }
 46 |   }
 47 | </script>
 48 | 
 49 | <div class="bg-white rounded-lg shadow-md p-8">
 50 |   <h3 class="text-lg font-bold mb-4 {titleColor}">
 51 |     {title} ({trades.length})
 52 |   </h3>
 53 |   
 54 |   <div class="overflow-x-auto">
 55 |     <table class="min-w-full divide-y divide-gray-200">
 56 |       <thead class="bg-gray-50">
 57 |         <tr>
 58 |           <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Card</th>
 59 |           <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Set</th>
 60 |           <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rarity</th>
 61 |           <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Count</th>
 62 |           <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Value</th>
 63 |         </tr>
 64 |       </thead>
 65 |       <tbody class="bg-white divide-y divide-gray-200">
 66 |         {#each trades as trade}
 67 |           <tr class="{getRowHighlighting(trade)}" style="{getRowStyle(trade)}">
 68 |             <!-- Card -->
 69 |             <td class="px-4 py-3 whitespace-nowrap">
 70 |               <div class="flex items-center">
 71 |                 <div class="w-8 h-11 rounded border mr-3 flex items-center justify-center overflow-hidden bg-gray-100">
 72 |                   {#if trade.card.small_image_url}
 73 |                     <img 
 74 |                       src={trade.card.small_image_url} 
 75 |                       alt={trade.card.name} 
 76 |                       class="w-full h-full object-cover rounded"
 77 |                       loading="lazy"
 78 |                     />
 79 |                   {:else}
 80 |                     <svg class="w-4 h-4 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 81 |                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2z"></path>
 82 |                     </svg>
 83 |                   {/if}
 84 |                 </div>
 85 |                 <div>
 86 |                   <div class="text-sm font-medium text-gray-900">
 87 |                     {trade.card.name}
 88 |                   </div>
 89 |                   {#if trade.card.card_number}
 90 |                     <div class="text-sm text-gray-500">#{trade.card.card_number}</div>
 91 |                   {/if}
 92 |                 </div>
 93 |               </div>
 94 |             </td>
 95 |             
 96 |             <!-- Set -->
 97 |             <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
 98 |               <div class="max-w-xs">
 99 |                 <p class="truncate text-xs">{trade.card.set_name || trade.card.set_id}</p>
100 |               </div>
101 |             </td>
102 |             
103 |             <!-- Rarity -->
104 |             <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
105 |               <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium {getRarityBadgeClass(trade.card.rarity)}">
106 |                 {trade.card.rarity || 'Unknown'}
107 |               </span>
108 |             </td>
109 |             
110 |             <!-- Count -->
111 |             <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-900">
112 |               <div class="text-center">
113 |                 <span class="font-medium">{trade[userCountField] || 0}</span>
114 |               </div>
115 |             </td>
116 |             
117 |             <!-- Value -->
118 |             <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
119 |               {formatCurrency(trade.estimatedValue || 0)}
120 |             </td>
121 |           </tr>
122 |         {/each}
123 |       </tbody>
124 |     </table>
125 |   </div>
126 | </div>


--------------------------------------------------------------------------------
/src/lib/components/UserSearchInput.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { createEventDispatcher } from 'svelte';
  3 | 
  4 |   // Props
  5 |   export let value: string = '';
  6 |   export let label: string = '';
  7 |   export let placeholder: string = 'Enter username...';
  8 |   export let disabled: boolean = false;
  9 | 
 10 |   // Internal state
 11 |   let searchResults: any[] = [];
 12 |   let showSearch = false;
 13 |   let loading = false;
 14 | 
 15 |   // Event dispatcher for parent communication
 16 |   const dispatch = createEventDispatcher<{
 17 |     change: string;
 18 |     select: any;
 19 |   }>();
 20 | 
 21 |   async function searchUsers(query: string): Promise<void> {
 22 |     if (query.length < 2) {
 23 |       searchResults = [];
 24 |       showSearch = false;
 25 |       return;
 26 |     }
 27 | 
 28 |     loading = true;
 29 | 
 30 |     try {
 31 |       const response = await fetch(`/api/search-users?q=${encodeURIComponent(query)}&limit=5`);
 32 |       if (response.ok) {
 33 |         const data = await response.json();
 34 |         searchResults = data.results;
 35 |         showSearch = true;
 36 |       }
 37 |     } catch (err) {
 38 |       console.warn('User search failed:', err);
 39 |     } finally {
 40 |       loading = false;
 41 |     }
 42 |   }
 43 | 
 44 |   function selectUser(user: any): void {
 45 |     value = user.username;
 46 |     showSearch = false;
 47 |     searchResults = [];
 48 |     dispatch('select', user);
 49 |     dispatch('change', value);
 50 |   }
 51 | 
 52 |   function handleInput(event: Event): void {
 53 |     const target = event.target as HTMLInputElement;
 54 |     value = target.value;
 55 |     dispatch('change', value);
 56 |     searchUsers(value);
 57 |   }
 58 | 
 59 |   // Close search dropdown when clicking outside
 60 |   function handleClickOutside(event: MouseEvent): void {
 61 |     const target = event.target as Element;
 62 |     if (!target.closest('.user-search-container')) {
 63 |       showSearch = false;
 64 |     }
 65 |   }
 66 | 
 67 |   // Bind event listener for outside clicks
 68 |   if (typeof document !== 'undefined') {
 69 |     document.addEventListener('click', handleClickOutside);
 70 |   }
 71 | </script>
 72 | 
 73 | <div class="user-search-container search-container relative">
 74 |   <label for={label.replace(/\s+/g, '').toLowerCase()} class="block text-sm font-medium text-gray-700 mb-2">
 75 |     {label}
 76 |   </label>
 77 |   <input
 78 |     type="text"
 79 |     id={label.replace(/\s+/g, '').toLowerCase()}
 80 |     bind:value
 81 |     on:input={handleInput}
 82 |     {placeholder}
 83 |     {disabled}
 84 |     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent {disabled ? 'bg-gray-100 cursor-not-allowed' : ''}"
 85 |   />
 86 |   
 87 |   {#if loading}
 88 |     <div class="absolute right-3 top-9">
 89 |       <div class="animate-spin h-4 w-4 border-2 border-blue-500 border-t-transparent rounded-full"></div>
 90 |     </div>
 91 |   {/if}
 92 |   
 93 |   {#if showSearch && searchResults.length > 0}
 94 |     <div class="absolute z-10 w-full bg-white border border-gray-300 rounded-md mt-1 shadow-lg max-h-60 overflow-y-auto">
 95 |       {#each searchResults as user}
 96 |         <button
 97 |           type="button"
 98 |           class="w-full px-4 py-2 text-left hover:bg-gray-100 border-b border-gray-200 last:border-b-0"
 99 |           on:click={() => selectUser(user)}
100 |         >
101 |           <div class="flex items-center space-x-3">
102 |             {#if user.avatar}
103 |               <img src={user.avatar} alt="" class="w-6 h-6 rounded-full" />
104 |             {/if}
105 |             <span class="font-medium">{user.username}</span>
106 |             <span class="text-sm text-gray-500">ID: {user.id}</span>
107 |           </div>
108 |         </button>
109 |       {/each}
110 |     </div>
111 |   {/if}
112 | </div>


--------------------------------------------------------------------------------
/src/lib/components/trade/SetSummaryTable.svelte:
--------------------------------------------------------------------------------
 1 | <script lang="ts">
 2 |   // Generic, reusable summary table component
 3 |   export let title: string = '';
 4 |   export let rows: Array<Record<string, any>> = [];
 5 |   export let columns: Array<{
 6 |     key: string;
 7 |     header: string;
 8 |     align?: 'left' | 'center' | 'right';
 9 |     formatter?: (row: Record<string, any>) => string;
10 |   }> = [];
11 | </script>
12 | 
13 | <div class="w-full">
14 |   {#if title}
15 |     <h3 class="text-base font-semibold text-gray-900 mb-2">{title}</h3>
16 |   {/if}
17 | 
18 |   <div class="overflow-x-auto rounded border border-gray-200">
19 |     <table class="min-w-full divide-y divide-gray-200">
20 |       <thead class="bg-gray-50">
21 |         <tr>
22 |           {#each columns as col}
23 |             <th class="px-4 py-2 text-sm font-medium text-gray-700 whitespace-nowrap {col.align === 'right' ? 'text-right' : col.align === 'center' ? 'text-center' : 'text-left'}">
24 |               {col.header}
25 |             </th>
26 |           {/each}
27 |         </tr>
28 |       </thead>
29 |       <tbody class="divide-y divide-gray-100 bg-white">
30 |         {#if rows && rows.length}
31 |           {#each rows as row}
32 |             <tr class="hover:bg-gray-50">
33 |               {#each columns as col}
34 |                 <td class="px-4 py-2 text-sm text-gray-900 whitespace-nowrap {col.align === 'right' ? 'text-right' : col.align === 'center' ? 'text-center' : 'text-left'}">
35 |                   {#if col.formatter}
36 |                     {col.formatter(row)}
37 |                   {:else}
38 |                     {row[col.key]}
39 |                   {/if}
40 |                 </td>
41 |               {/each}
42 |             </tr>
43 |           {/each}
44 |         {:else}
45 |           <tr>
46 |             <td class="px-4 py-6 text-sm text-gray-500 text-center" colspan={columns.length}>No data</td>
47 |           </tr>
48 |         {/if}
49 |       </tbody>
50 |     </table>
51 |   </div>
52 | </div>
53 | 


--------------------------------------------------------------------------------
/src/lib/index.ts:
--------------------------------------------------------------------------------
1 | // place files you want to import through the `$lib` alias in this folder.
2 | 


--------------------------------------------------------------------------------
/src/lib/server/db/client.ts:
--------------------------------------------------------------------------------
 1 | import { PrismaClient } from '@prisma/client';
 2 | 
 3 | const globalForPrisma = globalThis as unknown as {
 4 |   prisma: PrismaClient | undefined;
 5 | };
 6 | 
 7 | export const prisma =
 8 |   globalForPrisma.prisma ??
 9 |   new PrismaClient({
10 |     log: ['query'],
11 |   });
12 | 
13 | if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;


--------------------------------------------------------------------------------
/src/lib/server/db/profiles.ts:
--------------------------------------------------------------------------------
 1 | import { prisma } from './client.js';
 2 | import type { ProfileData } from '../types.js';
 3 | 
 4 | export async function createProfile(data: ProfileData) {
 5 |   return await prisma.profile.create({
 6 |     data: {
 7 |       name: data.name,
 8 |       bio: data.bio,
 9 |       website: data.website,
10 |       twitter: data.twitter,
11 |       github: data.github,
12 |       linkedin: data.linkedin,
13 |       wallet: data.wallet,
14 |       email: data.email,
15 |       location: data.location,
16 |       avatar: data.avatar,
17 |     },
18 |   });
19 | }
20 | 
21 | export async function getProfile(id: string) {
22 |   return await prisma.profile.findUnique({
23 |     where: { id },
24 |     include: {
25 |       comparisons: {
26 |         orderBy: { createdAt: 'desc' },
27 |         take: 10,
28 |       },
29 |     },
30 |   });
31 | }
32 | 
33 | export async function getAllProfiles() {
34 |   return await prisma.profile.findMany({
35 |     orderBy: { updatedAt: 'desc' },
36 |   });
37 | }
38 | 
39 | export async function updateProfile(id: string, data: Partial<ProfileData>) {
40 |   return await prisma.profile.update({
41 |     where: { id },
42 |     data,
43 |   });
44 | }
45 | 
46 | export async function deleteProfile(id: string) {
47 |   return await prisma.profile.delete({
48 |     where: { id },
49 |   });
50 | }


--------------------------------------------------------------------------------
/src/lib/server/redis/client.ts:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Redis client configuration for multi-environment deployment
  3 |  * Works with Railway Redis plugin, local development, and testing
  4 |  */
  5 | import Redis from 'ioredis';
  6 | import { dev } from '$app/environment';
  7 | 
  8 | // Global Redis instance
  9 | let redisInstance: Redis | null = null;
 10 | 
 11 | /**
 12 |  * Create Redis connection based on environment
 13 |  */
 14 | function createRedisConnection(): Redis {
 15 |   // Railway automatically provides REDIS_URL when Redis plugin is enabled
 16 |   const redisUrl = process.env.REDIS_URL || process.env.REDISCLOUD_URL || process.env.REDIS_PRIVATE_URL;
 17 |   
 18 |   if (redisUrl) {
 19 |     console.log('🔴 Connecting to Redis via URL:', redisUrl.split('@')[0] + '@***');
 20 |     return new Redis(redisUrl, {
 21 |       maxRetriesPerRequest: 3,
 22 |       retryDelayOnFailover: 100,
 23 |       enableReadyCheck: false,
 24 |       lazyConnect: true,
 25 |       // Connection timeout
 26 |       connectTimeout: 10000,
 27 |       // Command timeout  
 28 |       commandTimeout: 5000,
 29 |     });
 30 |   }
 31 | 
 32 |   // Check if local Redis is explicitly requested and available
 33 |   if (dev && process.env.USE_LOCAL_REDIS === 'true') {
 34 |     console.log('🔴 Attempting to connect to local Redis (development)');
 35 |     return new Redis({
 36 |       host: 'localhost',
 37 |       port: 6379,
 38 |       maxRetriesPerRequest: 1, // Fail fast for local development
 39 |       retryDelayOnFailover: 100,
 40 |       lazyConnect: true,
 41 |       // Fail fast if can't connect
 42 |       connectTimeout: 2000,
 43 |     });
 44 |   }
 45 | 
 46 |   // Default: Use mock Redis for development/testing
 47 |   console.log('🔴 Using mock Redis client (no external Redis required)');
 48 |   return createMockRedis();
 49 | }
 50 | 
 51 | /**
 52 |  * Mock Redis client for testing/development without Redis
 53 |  */
 54 | function createMockRedis(): Redis {
 55 |   const mockStorage = new Map<string, { value: string; expiry?: number }>();
 56 |   
 57 |   const mockRedis = {
 58 |     get: async (key: string) => {
 59 |       const item = mockStorage.get(key);
 60 |       if (!item) return null;
 61 |       if (item.expiry && Date.now() > item.expiry) {
 62 |         mockStorage.delete(key);
 63 |         return null;
 64 |       }
 65 |       return item.value;
 66 |     },
 67 |     
 68 |     set: async (key: string, value: string) => {
 69 |       mockStorage.set(key, { value });
 70 |       return 'OK';
 71 |     },
 72 |     
 73 |     setex: async (key: string, ttl: number, value: string) => {
 74 |       mockStorage.set(key, { 
 75 |         value, 
 76 |         expiry: Date.now() + (ttl * 1000) 
 77 |       });
 78 |       return 'OK';
 79 |     },
 80 |     
 81 |     del: async (key: string) => {
 82 |       const existed = mockStorage.has(key);
 83 |       mockStorage.delete(key);
 84 |       return existed ? 1 : 0;
 85 |     },
 86 |     
 87 |     exists: async (key: string) => {
 88 |       return mockStorage.has(key) ? 1 : 0;
 89 |     },
 90 |     
 91 |     incr: async (key: string) => {
 92 |       const current = mockStorage.get(key);
 93 |       const newValue = current ? parseInt(current.value) + 1 : 1;
 94 |       mockStorage.set(key, { value: newValue.toString() });
 95 |       return newValue;
 96 |     },
 97 |     
 98 |     expire: async (key: string, ttl: number) => {
 99 |       const item = mockStorage.get(key);
100 |       if (!item) return 0;
101 |       item.expiry = Date.now() + (ttl * 1000);
102 |       return 1;
103 |     },
104 |     
105 |     // Mock connection methods
106 |     connect: async () => {},
107 |     disconnect: async () => {},
108 |     ping: async () => 'PONG',
109 |     
110 |     // Status
111 |     status: 'ready'
112 |   } as any;
113 | 
114 |   console.log('🔴 Using mock Redis client');
115 |   return mockRedis;
116 | }
117 | 
118 | /**
119 |  * Get Redis client instance (singleton)
120 |  */
121 | export function getRedisClient(): Redis {
122 |   if (!redisInstance) {
123 |     redisInstance = createRedisConnection();
124 |     
125 |     // Handle connection events only for real Redis instances (not mock)
126 |     if (redisInstance.status !== 'ready' && typeof redisInstance.on === 'function') {
127 |       redisInstance.on('connect', () => {
128 |         console.log('🔴 Redis connected successfully');
129 |       });
130 |       
131 |       redisInstance.on('error', (err) => {
132 |         console.warn('🔴 Redis connection error (falling back to mock):', err.message);
133 |         // Replace with mock client on connection failure
134 |         if (redisInstance) {
135 |           redisInstance.removeAllListeners();
136 |         }
137 |         redisInstance = createMockRedis();
138 |       });
139 |       
140 |       redisInstance.on('close', () => {
141 |         console.log('🔴 Redis connection closed (using mock fallback)');
142 |         // Replace with mock client when connection closes
143 |         redisInstance = createMockRedis();
144 |       });
145 |     }
146 |   }
147 |   
148 |   return redisInstance;
149 | }
150 | 
151 | /**
152 |  * Redis utility functions for common operations
153 |  */
154 | export class RedisCache {
155 |   private redis: Redis;
156 |   
157 |   constructor() {
158 |     this.redis = getRedisClient();
159 |   }
160 |   
161 |   /**
162 |    * Get cached value with JSON parsing
163 |    */
164 |   async get<T>(key: string): Promise<T | null> {
165 |     try {
166 |       const value = await this.redis.get(key);
167 |       return value ? JSON.parse(value) : null;
168 |     } catch (error) {
169 |       console.warn(`Redis GET error for key ${key} (using fallback):`, error instanceof Error ? error.message : error);
170 |       // Refresh Redis client on error
171 |       this.redis = getRedisClient();
172 |       return null;
173 |     }
174 |   }
175 |   
176 |   /**
177 |    * Set cached value with JSON stringification
178 |    */
179 |   async set(key: string, value: any, ttlSeconds?: number): Promise<boolean> {
180 |     try {
181 |       const serialized = JSON.stringify(value);
182 |       if (ttlSeconds) {
183 |         await this.redis.setex(key, ttlSeconds, serialized);
184 |       } else {
185 |         await this.redis.set(key, serialized);
186 |       }
187 |       return true;
188 |     } catch (error) {
189 |       console.warn(`Redis SET error for key ${key} (operation continues):`, error instanceof Error ? error.message : error);
190 |       // Refresh Redis client on error
191 |       this.redis = getRedisClient();
192 |       return false;
193 |     }
194 |   }
195 |   
196 |   /**
197 |    * Delete cached value
198 |    */
199 |   async del(key: string): Promise<boolean> {
200 |     try {
201 |       const result = await this.redis.del(key);
202 |       return result > 0;
203 |     } catch (error) {
204 |       console.error(`Redis DEL error for key ${key}:`, error);
205 |       return false;
206 |     }
207 |   }
208 |   
209 |   /**
210 |    * Check if key exists
211 |    */
212 |   async exists(key: string): Promise<boolean> {
213 |     try {
214 |       const result = await this.redis.exists(key);
215 |       return result > 0;
216 |     } catch (error) {
217 |       console.error(`Redis EXISTS error for key ${key}:`, error);
218 |       return false;
219 |     }
220 |   }
221 |   
222 |   /**
223 |    * Increment counter with optional expiry
224 |    */
225 |   async incr(key: string, ttlSeconds?: number): Promise<number> {
226 |     try {
227 |       const result = await this.redis.incr(key);
228 |       if (ttlSeconds && result === 1) {
229 |         await this.redis.expire(key, ttlSeconds);
230 |       }
231 |       return result;
232 |     } catch (error) {
233 |       console.error(`Redis INCR error for key ${key}:`, error);
234 |       return 0;
235 |     }
236 |   }
237 |   
238 |   /**
239 |    * Get multiple keys at once
240 |    */
241 |   async mget<T>(keys: string[]): Promise<(T | null)[]> {
242 |     try {
243 |       const values = await this.redis.mget(...keys);
244 |       return values.map(value => value ? JSON.parse(value) : null);
245 |     } catch (error) {
246 |       console.error(`Redis MGET error for keys ${keys.join(', ')}:`, error);
247 |       return keys.map(() => null);
248 |     }
249 |   }
250 |   
251 |   /**
252 |    * Health check
253 |    */
254 |   async ping(): Promise<boolean> {
255 |     try {
256 |       const result = await this.redis.ping();
257 |       return result === 'PONG';
258 |     } catch (error) {
259 |       console.error('Redis PING error:', error);
260 |       return false;
261 |     }
262 |   }
263 | }
264 | 
265 | // Export singleton instance
266 | export const redisCache = new RedisCache();
267 | 
268 | /**
269 |  * Cache key generators for consistent naming
270 |  */
271 | export const CacheKeys = {
272 |   profile: (username: string) => `rip:profile:${username}`,
273 |   setData: (setId: string) => `rip:set:${setId}`,
274 |   userSearch: (query: string) => `rip:search:${query.toLowerCase()}`,
275 |   tradeAnalysis: (userA: string, userB: string) => `rip:trade:${userA}:${userB}`,
276 |   rateLimit: (ip: string) => `rip:rate:${ip}`,
277 |   extraction: (username: string) => `rip:extract:${username}`,
278 |   marketplace: (cardId: string) => `rip:market:${cardId}`,
279 | };


--------------------------------------------------------------------------------
/src/lib/server/services/CLAUDE.md:
--------------------------------------------------------------------------------
  1 | # Server Services Directory
  2 | 
  3 | This directory contains **backend service modules** that handle business logic, data processing, and external API integration. Each service is focused on a specific domain and follows service-oriented architecture principles.
  4 | 
  5 | ## 🏗️ Service Architecture
  6 | 
  7 | Services are designed as **pure functions** and **stateless modules** that:
  8 | - Handle specific business logic domains
  9 | - Include comprehensive error handling
 10 | - Provide TypeScript interfaces for requests/responses
 11 | - Follow consistent patterns for maintainability
 12 | - Include retry logic and timeout handling where appropriate
 13 | 
 14 | ## 🛠️ Services
 15 | 
 16 | ### alchemy.ts
 17 | **Purpose**: Blockchain integration with Alchemy SDK for Base network interaction
 18 | 
 19 | **Key Functionality:**
 20 | - Alchemy SDK client configuration for Base network
 21 | - Smart contract interaction with rip.fun contracts
 22 | - Pack purchase event scanning and synchronization
 23 | - Block range processing for efficient data retrieval
 24 | - Address-to-transaction mapping for user discovery
 25 | 
 26 | **Main Functions:**
 27 | ```typescript
 28 | - initializeAlchemy(): Promise<void>
 29 | - scanPackPurchases(fromBlock?: number, toBlock?: number): Promise<PackPurchaseEvent[]>
 30 | - getUserAddresses(): Promise<AddressMapping[]>
 31 | - getLatestBlockNumber(): Promise<number>
 32 | ```
 33 | 
 34 | **Integration:**
 35 | - Used by `userSync.ts` for blockchain data synchronization
 36 | - Provides data for username bridging system
 37 | - Handles Web3 provider configuration and error handling
 38 | 
 39 | ### fetcher.ts
 40 | **Purpose**: Enhanced HTTP client with retry logic, timeout handling, and robust error recovery
 41 | 
 42 | **Key Functionality:**
 43 | - Automatic retry with exponential backoff (up to 3 attempts)
 44 | - Progressive timeout handling (20s → 40s → 60s)
 45 | - Realistic browser headers to avoid blocking
 46 | - Smart error classification (temporary vs permanent failures)
 47 | - Detailed logging and progress tracking
 48 | 
 49 | **Main Functions:**
 50 | ```typescript
 51 | - fetchWithRetries(url: string, options?: FetchOptions): Promise<Response>
 52 | - extractProfileData(userIdOrUsername: string): Promise<ExtractedData>
 53 | - validateUrl(url: string): boolean
 54 | - getTimeoutForAttempt(attempt: number): number
 55 | ```
 56 | 
 57 | **Error Handling:**
 58 | - Network timeout recovery
 59 | - Server overload handling (503, 502 errors)
 60 | - Rate limiting respect (429 errors)
 61 | - Connection failure retry logic
 62 | 
 63 | ### parser.ts
 64 | **Purpose**: SvelteKit data extraction and HTML parsing from rip.fun profiles
 65 | 
 66 | **Key Functionality:**
 67 | - SvelteKit `<script type="application/json" data-sveltekit-fetched>` parsing
 68 | - Multiple script block detection and combining
 69 | - JSON structure validation and error recovery
 70 | - Data structure preservation while removing bloat
 71 | - Automatic clip_embedding removal from card data
 72 | 
 73 | **Main Functions:**
 74 | ```typescript
 75 | - parseProfileData(html: string): Promise<ParsedProfile>
 76 | - extractSvelteKitData(html: string): Promise<any>
 77 | - cleanCardData(cards: any[]): any[]
 78 | - validateProfileStructure(data: any): boolean
 79 | ```
 80 | 
 81 | **Data Cleaning:**
 82 | - Removes clip_embedding arrays from digital_cards and cards
 83 | - Preserves all other card metadata and structure
 84 | - Handles malformed JSON gracefully
 85 | - Normalizes data types and formats
 86 | 
 87 | ### normalizer.ts
 88 | **Purpose**: Data cleaning, normalization, and structure standardization
 89 | 
 90 | **Key Functionality:**
 91 | - Profile data structure normalization
 92 | - Date format standardization
 93 | - Field mapping between rip.fun data and internal schema
 94 | - Type conversion and validation
 95 | - Data sanitization for XSS prevention
 96 | 
 97 | **Main Functions:**
 98 | ```typescript
 99 | - normalizeProfile(rawData: any): NormalizedProfile
100 | - standardizeDateFields(data: any): any
101 | - sanitizeUserInput(input: string): string
102 | - validateDataStructure(data: any): boolean
103 | ```
104 | 
105 | **Normalization Rules:**
106 | - Converts date strings to ISO format
107 | - Standardizes boolean values
108 | - Removes null/undefined fields
109 | - Validates required fields
110 | 
111 | ### userSync.ts  
112 | **Purpose**: Background blockchain user synchronization coordinator
113 | 
114 | **Key Functionality:**
115 | - Blockchain data synchronization with Base network
116 | - User address discovery from pack purchase events
117 | - Progress tracking and status monitoring
118 | - Database update coordination
119 | - Sync resume functionality for interrupted operations
120 | 
121 | **Main Functions:**
122 | ```typescript
123 | - startUserSync(): Promise<SyncResult>
124 | - getSyncStatus(): Promise<SyncStatus>
125 | - resumeSync(lastProcessedBlock: number): Promise<SyncResult>
126 | - updateSyncProgress(progress: SyncProgress): Promise<void>
127 | ```
128 | 
129 | **Sync Process:**
130 | 1. Scan blockchain for pack purchase events
131 | 2. Extract user addresses and transaction data
132 | 3. Map addresses to usernames via rip.fun API
133 | 4. Store mappings in database with block tracking
134 | 5. Provide progress updates to frontend
135 | 
136 | ### comparator.ts
137 | **Purpose**: Profile comparison and diff generation between user profiles
138 | 
139 | **Key Functionality:**
140 | - Profile data comparison and analysis
141 | - Card collection diff generation
142 | - Pack inventory comparison
143 | - Value difference calculations
144 | - Trade opportunity identification
145 | 
146 | **Main Functions:**
147 | ```typescript
148 | - compareProfiles(profileA: Profile, profileB: Profile): Promise<ComparisonResult>
149 | - generateCardDiff(cardsA: Card[], cardsB: Card[]): CardDiff
150 | - calculateValueDifferences(profileA: Profile, profileB: Profile): ValueComparison
151 | - findTradeOpportunities(comparison: ComparisonResult): TradeOpportunity[]
152 | ```
153 | 
154 | ### tradeAnalyzer.ts ⭐ **New - Post-Refactoring**
155 | **Purpose**: Centralized trade analysis logic (extracted from duplicate code)
156 | 
157 | **Key Functionality:**
158 | - Shared trade analysis algorithms
159 | - Card matching and availability logic
160 | - Trade opportunity scoring
161 | - User preference analysis
162 | - Reusable across multiple endpoints
163 | 
164 | **Main Functions:**
165 | ```typescript
166 | - analyzeTradeOpportunities(userA: Profile, userB: Profile): Promise<TradeAnalysis>
167 | - calculateTradeValue(trade: TradeOpportunity): number
168 | - findCardMatches(wantList: Card[], haveList: Card[]): CardMatch[]
169 | - scoreTradeQuality(trade: TradeOpportunity): TradeScore
170 | ```
171 | 
172 | **Refactoring Impact:**
173 | - **Eliminated duplicate logic** from trade-compare API handlers
174 | - **Centralized trade algorithms** for consistency
175 | - **Reduced API handler complexity** by 50+ lines
176 | - **Improved maintainability** of trade logic
177 | 
178 | ## 🔗 Service Integration Patterns
179 | 
180 | ### Error Handling
181 | All services follow consistent error handling:
182 | ```typescript
183 | try {
184 |   const result = await serviceFunction();
185 |   return { success: true, data: result };
186 | } catch (error) {
187 |   console.error('Service error:', error);
188 |   return { success: false, error: error.message };
189 | }
190 | ```
191 | 
192 | ### TypeScript Interfaces
193 | Services define clear interfaces:
194 | ```typescript
195 | interface ServiceRequest {
196 |   // Input parameters
197 | }
198 | 
199 | interface ServiceResponse {
200 |   success: boolean;
201 |   data?: any;
202 |   error?: string;
203 | }
204 | ```
205 | 
206 | ### Async/Await Pattern
207 | All services use modern async/await:
208 | ```typescript
209 | export async function serviceFunction(params: ServiceRequest): Promise<ServiceResponse> {
210 |   // Implementation
211 | }
212 | ```
213 | 
214 | ## 📊 Performance Considerations
215 | 
216 | ### Caching Strategy
217 | - **alchemy.ts**: Caches block data and transaction results
218 | - **fetcher.ts**: Implements request deduplication
219 | - **parser.ts**: Caches parsed results by profile ID
220 | - **userSync.ts**: Stores sync state for resume capability
221 | 
222 | ### Connection Pooling
223 | - Database connections managed by Prisma
224 | - HTTP connections reused where possible
225 | - Blockchain RPC connection optimization
226 | 
227 | ### Error Recovery
228 | - Exponential backoff for transient failures
229 | - Circuit breaker pattern for repeated failures
230 | - Graceful degradation when services unavailable
231 | 
232 | ## 🚀 Usage Guidelines
233 | 
234 | ### Service Dependencies
235 | ```typescript
236 | // Import services
237 | import { fetchWithRetries } from './fetcher.js';
238 | import { parseProfileData } from './parser.js';
239 | import { normalizeProfile } from './normalizer.js';
240 | 
241 | // Chain services together
242 | const html = await fetchWithRetries(url);
243 | const rawData = await parseProfileData(html);
244 | const normalized = await normalizeProfile(rawData);
245 | ```
246 | 
247 | ### Error Propagation
248 | ```typescript
249 | // Handle service errors appropriately
250 | try {
251 |   const result = await serviceCall();
252 |   if (!result.success) {
253 |     throw new Error(result.error);
254 |   }
255 |   return result.data;
256 | } catch (error) {
257 |   // Log and handle appropriately
258 |   console.error('Service chain failed:', error);
259 |   throw error;
260 | }
261 | ```
262 | 
263 | ### Testing Services
264 | Each service should include:
265 | - Unit tests for core functionality
266 | - Integration tests for external dependencies
267 | - Error condition testing
268 | - Performance benchmarking
269 | 
270 | ## 🔧 Adding New Services
271 | 
272 | When creating new services:
273 | 
274 | 1. **Follow established patterns** from existing services
275 | 2. **Include comprehensive error handling** with proper logging
276 | 3. **Define TypeScript interfaces** for inputs and outputs
277 | 4. **Add retry logic** for external API calls
278 | 5. **Include progress tracking** for long-running operations
279 | 6. **Document public functions** with JSDoc comments
280 | 7. **Consider caching** for expensive operations
281 | 8. **Test error conditions** thoroughly
282 | 
283 | ## 📈 Refactoring Benefits
284 | 
285 | The service-oriented architecture provides:
286 | - **Clear separation of concerns** between business logic domains
287 | - **Reusable service modules** across multiple endpoints
288 | - **Consistent error handling** and logging patterns
289 | - **Better testability** with focused unit tests
290 | - **Improved maintainability** with single-responsibility services
291 | - **Enhanced type safety** with comprehensive TypeScript interfaces


--------------------------------------------------------------------------------
/src/lib/server/services/alchemy.ts:
--------------------------------------------------------------------------------
  1 | import { createPublicClient, http, getAddress, type PublicClient } from 'viem';
  2 | import { base } from 'viem/chains';
  3 | 
  4 | // Configuration for Alchemy
  5 | const config = {
  6 |   apiKey: process.env.ALCHEMY_API_KEY || '',
  7 | };
  8 | 
  9 | // Contract addresses
 10 | const RIP_CONTRACT_ADDRESS = '0xeBeA10BCd609d3F6fb2Ea104baB638396C037388';
 11 | const RIP_NFT_CONTRACT_ADDRESS = '0x6292bf78996e189bAd8f9CF3e3Cb31017bb70540';
 12 | 
 13 | export interface NFTTransfer {
 14 |   from: string;
 15 |   to: string;
 16 |   tokenId: string;
 17 |   blockNumber: number;
 18 |   transactionHash: string;
 19 | }
 20 | 
 21 | export class AlchemyService {
 22 |   private client: PublicClient;
 23 | 
 24 |   constructor() {
 25 |     // Create Viem client for better asset transfer handling
 26 |     this.client = createPublicClient({
 27 |       chain: base,
 28 |       transport: http(`https://base-mainnet.g.alchemy.com/v2/${config.apiKey}`)
 29 |     });
 30 |   }
 31 | 
 32 |   /**
 33 |    * Get all addresses that received NFTs from the rip.fun contract
 34 |    * Uses Viem with proper pagination to get complete results
 35 |    */
 36 |   async getRipFunNFTRecipients(fromBlock?: number, toBlock?: number | 'latest'): Promise<Map<string, number>> {
 37 |     try {
 38 |       if (!config.apiKey) {
 39 |         throw new Error('Alchemy API key not configured');
 40 |       }
 41 | 
 42 |       // Determine block range
 43 |       const latestBlock = toBlock === 'latest' ? await this.getLatestBlockNumber() : (toBlock || await this.getLatestBlockNumber());
 44 |       const startBlock = fromBlock || 0;
 45 |       
 46 |       console.log(`Fetching NFT transfers from rip.fun contract from block ${startBlock} to ${latestBlock} with pagination...`);
 47 | 
 48 |       // Collect all transfers with pagination (Alchemy pageKey)
 49 |       let allTransfers: any[] = [];
 50 |       let pageKey: string | undefined;
 51 | 
 52 |       const baseParams = {
 53 |         fromBlock: `0x${startBlock.toString(16)}`,
 54 |         toBlock: toBlock === 'latest' ? 'latest' : `0x${latestBlock.toString(16)}`,
 55 |         fromAddress: RIP_CONTRACT_ADDRESS,
 56 |         contractAddresses: [RIP_NFT_CONTRACT_ADDRESS],
 57 |         category: ['erc721', 'erc1155'],
 58 |         withMetadata: false,
 59 |         maxCount: '0x3e8', // 1000 transfers per page
 60 |         excludeZeroValue: true
 61 |       } as const;
 62 | 
 63 |       let pageCount = 0;
 64 |       do {
 65 |         pageCount++;
 66 |         console.log(`Fetching page ${pageCount} of asset transfers...`);
 67 | 
 68 |         const params: any = { ...baseParams };
 69 |         if (pageKey) params.pageKey = pageKey;
 70 | 
 71 |         const pageResult = (await this.client.request({
 72 |           method: 'alchemy_getAssetTransfers',
 73 |           params: [params]
 74 |         })) as { transfers?: any[]; pageKey?: string };
 75 | 
 76 |         if (pageResult?.transfers) {
 77 |           allTransfers.push(...pageResult.transfers);
 78 |           console.log(`Page ${pageCount}: Found ${pageResult.transfers.length} transfers (Total: ${allTransfers.length})`);
 79 |         } else {
 80 |           console.log(`Page ${pageCount}: No transfers found`);
 81 |         }
 82 | 
 83 |         pageKey = pageResult?.pageKey;
 84 |       } while (pageKey);
 85 | 
 86 |       console.log(`Completed pagination: ${allTransfers.length} total transfers across ${pageCount} pages`);
 87 | 
 88 |       // Count transfers per recipient address
 89 |       const counts = new Map<string, number>();
 90 |       for (const tx of allTransfers) {
 91 |         const to = (tx as any).to as string | undefined;
 92 |         if (!to || to === '0x0000000000000000000000000000000000000000') continue;
 93 |         
 94 |         try {
 95 |           const checksum = getAddress(to);
 96 |           counts.set(checksum, (counts.get(checksum) || 0) + 1);
 97 |         } catch {
 98 |           // Invalid address, ignore
 99 |           console.warn(`Invalid address found: ${to}`);
100 |         }
101 |       }
102 | 
103 |       console.log(`Found ${counts.size} unique recipient addresses`);
104 |       return counts;
105 | 
106 |     } catch (error) {
107 |       console.error('Error fetching NFT recipients:', error);
108 |       throw new Error(`Failed to fetch NFT recipient data: ${error instanceof Error ? error.message : 'Unknown error'}`);
109 |     }
110 |   }
111 | 
112 |   /**
113 |    * Get unique addresses that received NFTs from rip.fun
114 |    * Returns just the addresses (not the counts)
115 |    */
116 |   async getUniqueBuyerAddresses(fromBlock?: number, toBlock?: number | 'latest'): Promise<string[]> {
117 |     try {
118 |       const recipientCounts = await this.getRipFunNFTRecipients(fromBlock, toBlock);
119 |       const addresses = Array.from(recipientCounts.keys());
120 |       
121 |       console.log(`Returning ${addresses.length} unique buyer addresses from block range ${fromBlock || 0} to ${toBlock || 'latest'}`);
122 |       return addresses;
123 |       
124 |     } catch (error) {
125 |       console.error('Error getting unique buyer addresses:', error);
126 |       throw new Error(`Failed to fetch buyer addresses: ${error instanceof Error ? error.message : 'Unknown error'}`);
127 |     }
128 |   }
129 | 
130 |   /**
131 |    * Get the latest block number
132 |    */
133 |   async getLatestBlockNumber(): Promise<number> {
134 |     try {
135 |       const blockNumber = await this.client.getBlockNumber();
136 |       return Number(blockNumber);
137 |     } catch (error) {
138 |       console.error('Error fetching latest block number:', error);
139 |       throw new Error(`Failed to fetch latest block: ${error instanceof Error ? error.message : 'Unknown error'}`);
140 |     }
141 |   }
142 | 
143 |   /**
144 |    * Get recipient addresses with their transfer counts
145 |    * Useful for analytics or debugging
146 |    */
147 |   async getBuyerAddressesWithCounts(): Promise<{ address: string; count: number }[]> {
148 |     try {
149 |       const recipientCounts = await this.getRipFunNFTRecipients();
150 |       
151 |       return Array.from(recipientCounts.entries())
152 |         .map(([address, count]) => ({ address, count }))
153 |         .sort((a, b) => b.count - a.count); // Sort by count descending
154 |         
155 |     } catch (error) {
156 |       console.error('Error getting buyer addresses with counts:', error);
157 |       throw new Error(`Failed to fetch buyer address counts: ${error instanceof Error ? error.message : 'Unknown error'}`);
158 |     }
159 |   }
160 | }
161 | 
162 | // Export singleton instance
163 | export const alchemyService = new AlchemyService();


--------------------------------------------------------------------------------
/src/lib/server/services/comparator.ts:
--------------------------------------------------------------------------------
  1 | import type { ProfileData, ExtractedData, ComparisonResult } from '../types.js';
  2 | 
  3 | export function compareProfileWithExtracted(profile: ProfileData, extracted: ExtractedData): ComparisonResult {
  4 |   const result: ComparisonResult = {
  5 |     missing: {},
  6 |     different: {},
  7 |     matched: {}
  8 |   };
  9 |   
 10 |   const profileFields = {
 11 |     name: profile.name,
 12 |     bio: profile.bio,
 13 |     website: profile.website,
 14 |     twitter: profile.twitter,
 15 |     github: profile.github,
 16 |     linkedin: profile.linkedin,
 17 |     wallet: profile.wallet,
 18 |     email: profile.email,
 19 |     location: profile.location,
 20 |     avatar: profile.avatar
 21 |   };
 22 |   
 23 |   const mappings = createFieldMappings(extracted);
 24 |   
 25 |   for (const [profileKey, profileValue] of Object.entries(profileFields)) {
 26 |     if (!profileValue) continue;
 27 |     
 28 |     const matchedKeys = mappings[profileKey] || [];
 29 |     const extractedValue = findBestMatch(profileValue, matchedKeys, extracted);
 30 |     
 31 |     if (extractedValue === null) {
 32 |       result.missing[profileKey] = profileValue;
 33 |     } else if (normalizeForComparison(profileValue) === normalizeForComparison(extractedValue)) {
 34 |       result.matched[profileKey] = profileValue;
 35 |     } else {
 36 |       result.different[profileKey] = {
 37 |         profile: profileValue,
 38 |         extracted: extractedValue
 39 |       };
 40 |     }
 41 |   }
 42 |   
 43 |   return result;
 44 | }
 45 | 
 46 | function createFieldMappings(extracted: ExtractedData): Record<string, string[]> {
 47 |   const mappings: Record<string, string[]> = {
 48 |     name: [],
 49 |     bio: [],
 50 |     website: [],
 51 |     twitter: [],
 52 |     github: [],
 53 |     linkedin: [],
 54 |     wallet: [],
 55 |     email: [],
 56 |     location: [],
 57 |     avatar: []
 58 |   };
 59 |   
 60 |   const keys = Object.keys(extracted);
 61 |   
 62 |   keys.forEach(key => {
 63 |     const lowerKey = key.toLowerCase();
 64 |     
 65 |     // rip.fun specific mappings
 66 |     if (key === 'username' || lowerKey.includes('name') || lowerKey.includes('title') || lowerKey.includes('displayname')) {
 67 |       mappings.name.push(key);
 68 |     }
 69 |     
 70 |     if (lowerKey.includes('bio') || lowerKey.includes('description') || lowerKey.includes('about') || lowerKey.includes('summary')) {
 71 |       mappings.bio.push(key);
 72 |     }
 73 |     
 74 |     if (lowerKey.includes('website') || lowerKey.includes('url') || lowerKey.includes('homepage') || lowerKey.includes('site')) {
 75 |       mappings.website.push(key);
 76 |     }
 77 |     
 78 |     if (lowerKey.includes('twitter') || lowerKey.includes('x.com')) {
 79 |       mappings.twitter.push(key);
 80 |     }
 81 |     
 82 |     if (lowerKey.includes('github')) {
 83 |       mappings.github.push(key);
 84 |     }
 85 |     
 86 |     if (lowerKey.includes('linkedin')) {
 87 |       mappings.linkedin.push(key);
 88 |     }
 89 |     
 90 |     // rip.fun wallet mappings - both smart wallet and owner wallet
 91 |     if (lowerKey.includes('wallet') || lowerKey.includes('address') || lowerKey.includes('eth') || lowerKey.includes('crypto') || 
 92 |         key === 'smart_wallet_address' || key === 'owner_wallet_address') {
 93 |       mappings.wallet.push(key);
 94 |     }
 95 |     
 96 |     if (lowerKey.includes('email') || lowerKey.includes('mail')) {
 97 |       mappings.email.push(key);
 98 |     }
 99 |     
100 |     if (lowerKey.includes('location') || lowerKey.includes('city') || lowerKey.includes('country') || lowerKey.includes('region')) {
101 |       mappings.location.push(key);
102 |     }
103 |     
104 |     if (lowerKey.includes('avatar') || lowerKey.includes('image') || lowerKey.includes('photo') || lowerKey.includes('picture') || key === 'avatar') {
105 |       mappings.avatar.push(key);
106 |     }
107 |   });
108 |   
109 |   return mappings;
110 | }
111 | 
112 | function findBestMatch(profileValue: string, candidateKeys: string[], extracted: ExtractedData): string | null {
113 |   for (const key of candidateKeys) {
114 |     const extractedValue = extracted[key];
115 |     if (extractedValue !== null && extractedValue !== undefined) {
116 |       const valueStr = String(extractedValue);
117 |       
118 |       if (isCloseMatch(profileValue, valueStr)) {
119 |         return valueStr;
120 |       }
121 |     }
122 |   }
123 |   
124 |   return null;
125 | }
126 | 
127 | function isCloseMatch(profileValue: string, extractedValue: string): boolean {
128 |   const profileNorm = normalizeForComparison(profileValue);
129 |   const extractedNorm = normalizeForComparison(extractedValue);
130 |   
131 |   if (profileNorm === extractedNorm) return true;
132 |   
133 |   if (profileValue.includes('@') && extractedValue.includes('@')) {
134 |     return profileNorm === extractedNorm;
135 |   }
136 |   
137 |   if (profileValue.startsWith('http') && extractedValue.startsWith('http')) {
138 |     return profileNorm === extractedNorm;
139 |   }
140 |   
141 |   const similarity = calculateSimilarity(profileNorm, extractedNorm);
142 |   return similarity > 0.8;
143 | }
144 | 
145 | function normalizeForComparison(value: string): string {
146 |   return value
147 |     .toLowerCase()
148 |     .replace(/[^a-z0-9]/g, '')
149 |     .trim();
150 | }
151 | 
152 | function calculateSimilarity(str1: string, str2: string): number {
153 |   const len1 = str1.length;
154 |   const len2 = str2.length;
155 |   
156 |   if (len1 === 0 || len2 === 0) return 0;
157 |   
158 |   const matrix: number[][] = [];
159 |   
160 |   for (let i = 0; i <= len2; i++) {
161 |     matrix[i] = [i];
162 |   }
163 |   
164 |   for (let j = 0; j <= len1; j++) {
165 |     matrix[0][j] = j;
166 |   }
167 |   
168 |   for (let i = 1; i <= len2; i++) {
169 |     for (let j = 1; j <= len1; j++) {
170 |       if (str2[i - 1] === str1[j - 1]) {
171 |         matrix[i][j] = matrix[i - 1][j - 1];
172 |       } else {
173 |         matrix[i][j] = Math.min(
174 |           matrix[i - 1][j - 1] + 1,
175 |           matrix[i][j - 1] + 1,
176 |           matrix[i - 1][j] + 1
177 |         );
178 |       }
179 |     }
180 |   }
181 |   
182 |   const distance = matrix[len2][len1];
183 |   return 1 - distance / Math.max(len1, len2);
184 | }


--------------------------------------------------------------------------------
/src/lib/server/services/fetcher.ts:
--------------------------------------------------------------------------------
  1 | interface FetchOptions {
  2 |   maxRetries?: number;
  3 |   initialTimeout?: number;
  4 |   maxTimeout?: number;
  5 |   retryDelay?: number;
  6 | }
  7 | 
  8 | async function sleep(ms: number): Promise<void> {
  9 |   return new Promise(resolve => setTimeout(resolve, ms));
 10 | }
 11 | 
 12 | export async function fetchHTML(url: string, options: FetchOptions = {}): Promise<string> {
 13 |   const {
 14 |     maxRetries = 3,
 15 |     initialTimeout = 15000, // Start with 15 seconds
 16 |     maxTimeout = 45000, // Maximum 45 seconds
 17 |     retryDelay = 1000 // Base delay between retries
 18 |   } = options;
 19 | 
 20 |   let lastError: Error | null = null;
 21 | 
 22 |   for (let attempt = 0; attempt <= maxRetries; attempt++) {
 23 |     try {
 24 |       const urlObj = new URL(url);
 25 |       if (urlObj.protocol !== 'https:' && urlObj.protocol !== 'http:') {
 26 |         throw new Error('Only HTTP and HTTPS URLs are allowed');
 27 |       }
 28 |       
 29 |       // Increase timeout with each retry, but cap at maxTimeout
 30 |       const currentTimeout = Math.min(initialTimeout + (attempt * 5000), maxTimeout);
 31 |       
 32 |       console.log(`Attempt ${attempt + 1}/${maxRetries + 1} - Fetching ${url} with ${currentTimeout}ms timeout`);
 33 |       
 34 |       const controller = new AbortController();
 35 |       const timeoutId = setTimeout(() => controller.abort(), currentTimeout);
 36 |       
 37 |       try {
 38 |         const response = await fetch(url, {
 39 |           headers: {
 40 |             'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
 41 |             'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
 42 |             'Accept-Language': 'en-US,en;q=0.9',
 43 |             'Accept-Encoding': 'gzip, deflate, br',
 44 |             'Cache-Control': 'no-cache',
 45 |             'Pragma': 'no-cache',
 46 |             'Sec-Fetch-Dest': 'document',
 47 |             'Sec-Fetch-Mode': 'navigate',
 48 |             'Sec-Fetch-Site': 'none',
 49 |             'Sec-Fetch-User': '?1',
 50 |             'Upgrade-Insecure-Requests': '1',
 51 |           },
 52 |           signal: controller.signal,
 53 |         });
 54 |         
 55 |         clearTimeout(timeoutId);
 56 |         
 57 |         if (!response.ok) {
 58 |           if (response.status >= 500 && attempt < maxRetries) {
 59 |             throw new Error(`Server error ${response.status} - will retry`);
 60 |           }
 61 |           throw new Error(`HTTP error! status: ${response.status}`);
 62 |         }
 63 |         
 64 |         const contentType = response.headers.get('content-type');
 65 |         if (!contentType?.includes('text/html')) {
 66 |           throw new Error('Response is not HTML content');
 67 |         }
 68 |         
 69 |         const html = await response.text();
 70 |         console.log(`Successfully fetched ${url} on attempt ${attempt + 1}`);
 71 |         return html;
 72 |         
 73 |       } catch (fetchError) {
 74 |         clearTimeout(timeoutId);
 75 |         throw fetchError;
 76 |       }
 77 |       
 78 |     } catch (error) {
 79 |       lastError = error instanceof Error ? error : new Error('Unknown error');
 80 |       
 81 |       // Don't retry for certain types of errors
 82 |       if (lastError.message.includes('Only HTTP and HTTPS URLs are allowed') ||
 83 |           lastError.message.includes('Response is not HTML content') ||
 84 |           (lastError.message.includes('HTTP error') && !lastError.message.includes('will retry'))) {
 85 |         break;
 86 |       }
 87 |       
 88 |       // If this is the last attempt, don't delay
 89 |       if (attempt < maxRetries) {
 90 |         const delay = retryDelay * Math.pow(2, attempt); // Exponential backoff
 91 |         console.log(`Attempt ${attempt + 1} failed: ${lastError.message}. Retrying in ${delay}ms...`);
 92 |         await sleep(delay);
 93 |       }
 94 |     }
 95 |   }
 96 |   
 97 |   // If we get here, all attempts failed
 98 |   const errorMessage = lastError?.message || 'Unknown error';
 99 |   if (errorMessage.includes('aborted')) {
100 |     throw new Error(`Failed to fetch HTML from ${url}: Request timed out after multiple attempts. The page may be loading slowly or experiencing issues.`);
101 |   }
102 |   
103 |   throw new Error(`Failed to fetch HTML from ${url} after ${maxRetries + 1} attempts: ${errorMessage}`);
104 | }


--------------------------------------------------------------------------------
/src/lib/server/services/normalizer.ts:
--------------------------------------------------------------------------------
  1 | import type { ExtractedData } from '../types.js';
  2 | 
  3 | export function normalizeData(data: ExtractedData): ExtractedData {
  4 |   // First, clean up rip.fun specific data by removing clip_embedding
  5 |   const cleanedData = cleanRipFunData(data);
  6 |   const normalized: ExtractedData = {};
  7 |   
  8 |   function flattenObject(obj: any, prefix: string = ''): Record<string, any> {
  9 |     const flattened: Record<string, any> = {};
 10 |     
 11 |     for (const [key, value] of Object.entries(obj)) {
 12 |       const newKey = prefix ? `${prefix}.${key}` : key;
 13 |       
 14 |       if (value === null || value === undefined || value === '') {
 15 |         continue;
 16 |       }
 17 |       
 18 |       if (typeof value === 'object' && !Array.isArray(value) && value !== null) {
 19 |         Object.assign(flattened, flattenObject(value, newKey));
 20 |       } else if (Array.isArray(value)) {
 21 |         const cleanArray = value.filter(item => 
 22 |           item !== null && item !== undefined && item !== ''
 23 |         );
 24 |         if (cleanArray.length > 0) {
 25 |           flattened[newKey] = [...new Set(cleanArray)];
 26 |         }
 27 |       } else {
 28 |         flattened[newKey] = value;
 29 |       }
 30 |     }
 31 |     
 32 |     return flattened;
 33 |   }
 34 |   
 35 |   const flattened = flattenObject(cleanedData);
 36 |   
 37 |   for (const [key, value] of Object.entries(flattened)) {
 38 |     let normalizedKey = key.toLowerCase()
 39 |       .replace(/[_\-\s]+/g, '_')
 40 |       .replace(/[^a-z0-9_.]/g, '');
 41 |     
 42 |     if (typeof value === 'string') {
 43 |       let normalizedValue = value.trim();
 44 |       
 45 |       if (isDateString(normalizedValue)) {
 46 |         normalizedValue = new Date(normalizedValue).toISOString();
 47 |       }
 48 |       
 49 |       if (isUrl(normalizedValue)) {
 50 |         normalizedValue = normalizeUrl(normalizedValue);
 51 |       }
 52 |       
 53 |       if (isEmail(normalizedValue)) {
 54 |         normalizedValue = normalizedValue.toLowerCase();
 55 |       }
 56 |       
 57 |       if (isSocialHandle(normalizedValue)) {
 58 |         normalizedValue = normalizeSocialHandle(normalizedValue);
 59 |       }
 60 |       
 61 |       normalized[normalizedKey] = normalizedValue;
 62 |     } else {
 63 |       normalized[normalizedKey] = value;
 64 |     }
 65 |   }
 66 |   
 67 |   return removeUnusedKeys(normalized);
 68 | }
 69 | 
 70 | function isDateString(str: string): boolean {
 71 |   return /^\d{4}-\d{2}-\d{2}/.test(str) || 
 72 |          /^\d{1,2}\/\d{1,2}\/\d{4}/.test(str) ||
 73 |          !isNaN(Date.parse(str));
 74 | }
 75 | 
 76 | function isUrl(str: string): boolean {
 77 |   try {
 78 |     new URL(str);
 79 |     return true;
 80 |   } catch {
 81 |     return false;
 82 |   }
 83 | }
 84 | 
 85 | function isEmail(str: string): boolean {
 86 |   return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(str);
 87 | }
 88 | 
 89 | function isSocialHandle(str: string): boolean {
 90 |   return /^@\w+$/.test(str) || /^https?:\/\/(twitter|github|linkedin)/.test(str);
 91 | }
 92 | 
 93 | function normalizeUrl(url: string): string {
 94 |   try {
 95 |     const urlObj = new URL(url);
 96 |     return urlObj.toString().replace(/\/$/, '');
 97 |   } catch {
 98 |     return url;
 99 |   }
100 | }
101 | 
102 | function normalizeSocialHandle(handle: string): string {
103 |   if (handle.startsWith('@')) {
104 |     return handle.substring(1);
105 |   }
106 |   
107 |   const match = handle.match(/https?:\/\/(?:www\.)?(twitter|github|linkedin)\.com\/([^\/\?]+)/);
108 |   if (match) {
109 |     return match[2];
110 |   }
111 |   
112 |   return handle;
113 | }
114 | 
115 | export function cleanRipFunData(data: any): ExtractedData {
116 |   // Deep clone the data to avoid mutating the original
117 |   const cleanedData = JSON.parse(JSON.stringify(data));
118 |   
119 |   // Handle array of objects (like the rip.fun data structure)
120 |   if (Array.isArray(cleanedData)) {
121 |     cleanedData.forEach((topLevelObject: any) => {
122 |       // Clean digital_cards array inside profile
123 |       topLevelObject.data?.profile?.digital_cards?.forEach((digitalCard: any) => {
124 |         if (digitalCard.card?.clip_embedding) {
125 |           delete digitalCard.card.clip_embedding;
126 |         }
127 |       });
128 | 
129 |       // Clean top-level cards array
130 |       topLevelObject.data?.cards?.forEach((cardObject: any) => {
131 |         if (cardObject.card?.clip_embedding) {
132 |           delete cardObject.card.clip_embedding;
133 |         }
134 |       });
135 |     });
136 |   } else if (typeof cleanedData === 'object' && cleanedData !== null) {
137 |     // Handle single object structure
138 |     cleanedData.data?.profile?.digital_cards?.forEach((digitalCard: any) => {
139 |       if (digitalCard.card?.clip_embedding) {
140 |         delete digitalCard.card.clip_embedding;
141 |       }
142 |     });
143 | 
144 |     cleanedData.data?.cards?.forEach((cardObject: any) => {
145 |       if (cardObject.card?.clip_embedding) {
146 |         delete cardObject.card.clip_embedding;
147 |       }
148 |     });
149 |   }
150 |   
151 |   return cleanedData;
152 | }
153 | 
154 | /**
155 |  * Filter heavy gameplay fields from card data to reduce payload size
156 |  * Removes: subtype, hp, types, abilities, attacks, weaknesses, resistances
157 |  * Keeps: essential display and identification fields
158 |  */
159 | export function filterCardFields(card: any): any {
160 |   if (!card || typeof card !== 'object') {
161 |     return card;
162 |   }
163 | 
164 |   const {
165 |     // Remove heavy gameplay fields
166 |     subtype,
167 |     hp,
168 |     types,
169 |     abilities,
170 |     attacks,
171 |     weaknesses,
172 |     resistances,
173 |     
174 |     // Keep all essential display fields
175 |     ...essentialFields
176 |   } = card;
177 |   
178 |   return essentialFields;
179 | }
180 | 
181 | /**
182 |  * Replace full set object with set_id reference to reduce duplication
183 |  * Keeps the set object but removes heavy metadata
184 |  */
185 | export function optimizeSetReference(card: any): any {
186 |   if (!card?.set) {
187 |     return card;
188 |   }
189 | 
190 |   // Keep only essential set fields, remove heavy metadata
191 |   const {
192 |     logo,
193 |     background_image_url,
194 |     value_score,
195 |     tcgplayer_id,
196 |     card_count,
197 |     series_id,
198 |     created_at,
199 |     updated_at,
200 |     ...essentialSetFields
201 |   } = card.set;
202 | 
203 |   return {
204 |     ...card,
205 |     set: essentialSetFields
206 |   };
207 | }
208 | 
209 | /**
210 |  * Apply all optimizations to extracted data
211 |  */
212 | export function optimizeExtractedData(data: any): any {
213 |   if (!data) return data;
214 | 
215 |   // Handle array structure (multiple data objects)
216 |   if (Array.isArray(data)) {
217 |     return data.map(item => optimizeExtractedData(item));
218 |   }
219 | 
220 |   // Handle single data object
221 |   if (typeof data === 'object' && data !== null) {
222 |     const optimized = { ...data };
223 | 
224 |     // Process digital_cards in profile
225 |     if (optimized.profile?.digital_cards) {
226 |       optimized.profile.digital_cards = optimized.profile.digital_cards.map((digitalCard: any) => {
227 |         if (digitalCard.card) {
228 |           const optimizedCard = filterCardFields(digitalCard.card);
229 |           const withOptimizedSet = optimizeSetReference({ card: optimizedCard });
230 |           return {
231 |             ...digitalCard,
232 |             card: withOptimizedSet.card
233 |           };
234 |         }
235 |         return digitalCard;
236 |       });
237 |     }
238 | 
239 |     // Process top-level cards array  
240 |     if (optimized.cards) {
241 |       optimized.cards = optimized.cards.map((cardObject: any) => {
242 |         if (cardObject.card) {
243 |           const optimizedCard = filterCardFields(cardObject.card);
244 |           const withOptimizedSet = optimizeSetReference({ card: optimizedCard });
245 |           return {
246 |             ...cardObject,
247 |             card: withOptimizedSet.card
248 |           };
249 |         }
250 |         return cardObject;
251 |       });
252 |     }
253 | 
254 |     return optimized;
255 |   }
256 | 
257 |   return data;
258 | }
259 | 
260 | function removeUnusedKeys(data: ExtractedData): ExtractedData {
261 |   const uselessKeys = [
262 |     'id', 'uuid', 'timestamp', 'created_at', 'updated_at', 'version',
263 |     'csrf_token', 'session_id', 'cache', 'debug', 'dev', 'test',
264 |     'analytics', 'tracking', 'gtm', 'ga', 'pixel', 'ads', 'clip_embedding'
265 |   ];
266 |   
267 |   const filtered: ExtractedData = {};
268 |   
269 |   for (const [key, value] of Object.entries(data)) {
270 |     if (!uselessKeys.some(useless => key.includes(useless))) {
271 |       filtered[key] = value;
272 |     }
273 |   }
274 |   
275 |   return filtered;
276 | }


--------------------------------------------------------------------------------
/src/lib/server/services/parser.ts:
--------------------------------------------------------------------------------
  1 | import * as cheerio from 'cheerio';
  2 | import type { ExtractedData, SvelteKitFetchedData } from '../types.js';
  3 | 
  4 | export function extractSvelteKitData(html: string): ExtractedData {
  5 |   const $ = cheerio.load(html);
  6 |   let extractedData: ExtractedData = {};
  7 |   
  8 |   // First, try to parse rip.fun specific SvelteKit structure from script tags
  9 |   $('script').each((index, element) => {
 10 |     try {
 11 |       const scriptContent = $(element).html();
 12 |       if (!scriptContent) return;
 13 |       
 14 |       // Look for kit.start() function call and extract the data
 15 |       if (scriptContent.includes('kit.start(')) {
 16 |         extractedData = extractRipFunData(scriptContent);
 17 |         if (Object.keys(extractedData).length > 0) {
 18 |           return false; // Break out of each loop when found
 19 |         }
 20 |       }
 21 |     } catch (error) {
 22 |       console.warn(`Failed to parse script content ${index}:`, error);
 23 |     }
 24 |   });
 25 |   
 26 |   // Fallback to original method if no rip.fun structure found
 27 |   if (Object.keys(extractedData).length === 0) {
 28 |     $('script[type="application/json"][data-sveltekit-fetched]').each((index, element) => {
 29 |       try {
 30 |         const jsonText = $(element).html();
 31 |         if (!jsonText) return;
 32 |         
 33 |         const data: SvelteKitFetchedData = JSON.parse(jsonText);
 34 |         
 35 |         if (data.response && data.response.data) {
 36 |           Object.assign(extractedData, data.response.data);
 37 |         }
 38 |       } catch (error) {
 39 |         console.warn(`Failed to parse SvelteKit JSON block ${index}:`, error);
 40 |       }
 41 |     });
 42 |     
 43 |     $('script[type="application/json"]').each((index, element) => {
 44 |       const dataAttr = $(element).attr('data-sveltekit-fetched');
 45 |       if (dataAttr) return;
 46 |       
 47 |       try {
 48 |         const jsonText = $(element).html();
 49 |         if (!jsonText) return;
 50 |         
 51 |         const data = JSON.parse(jsonText);
 52 |         Object.assign(extractedData, data);
 53 |       } catch (error) {
 54 |         console.warn(`Failed to parse generic JSON block ${index}:`, error);
 55 |       }
 56 |     });
 57 |   }
 58 |   
 59 |   return extractedData;
 60 | }
 61 | 
 62 | function extractRipFunData(scriptContent: string): ExtractedData {
 63 |   try {
 64 |     // Use the developer's improved regex that correctly identifies the data array boundary
 65 |     // The key fix: look for "data: [...], form:" instead of other patterns
 66 |     const dataRegex = /data:\s*(\[[\s\S]*?\]),\s*form:/;
 67 |     const match = scriptContent.match(dataRegex);
 68 | 
 69 |     if (match && match[1]) {
 70 |       let dataString = match[1];
 71 |       
 72 |       // Clean the string to make it parsable by replacing new Date() calls
 73 |       const cleanedString = dataString.replace(/new Date\(([^)]+)\)/g, '$1');
 74 |       
 75 |       try {
 76 |         // Use Function constructor (safer than eval) to parse the cleaned string
 77 |         const dataArray = new Function(`return ${cleanedString}`)();
 78 |         
 79 |         // The main profile data is in the second element of the array (index 1)
 80 |         const profileData = dataArray[1]?.data?.profile;
 81 |         
 82 |         if (profileData) {
 83 |           // Create deep copies to avoid modifying the original data
 84 |           const digital_products = JSON.parse(JSON.stringify(profileData.digital_products || []));
 85 |           const digital_cards = JSON.parse(JSON.stringify(profileData.digital_cards || []));
 86 |           
 87 |           // Remove clip_embedding fields from digital_cards
 88 |           digital_cards.forEach((item: any) => {
 89 |             if (item.card && 'clip_embedding' in item.card) {
 90 |               delete item.card.clip_embedding;
 91 |             }
 92 |           });
 93 |           
 94 |           // Also check products for the same field
 95 |           digital_products.forEach((item: any) => {
 96 |             if (item.product && 'clip_embedding' in item.product) {
 97 |               delete item.product.clip_embedding;
 98 |             }
 99 |           });
100 |           
101 |           // Structure the profile data
102 |           const profile = {
103 |             ...profileData,
104 |             digital_products,
105 |             digital_cards
106 |           };
107 |           
108 |           const extractedData: ExtractedData = { profile };
109 |           
110 |           // Also add stats if available
111 |           if (dataArray[1]?.data?.stats) {
112 |             extractedData.stats = dataArray[1].data.stats;
113 |           }
114 |           
115 |           console.log(`Extracted ${digital_cards.length} cards using improved regex method`);
116 |           return extractedData;
117 |         } else {
118 |           console.warn('Profile data could not be located in the parsed object');
119 |         }
120 |         
121 |       } catch (parseError) {
122 |         console.warn('Failed to parse data array with improved method:', parseError);
123 |       }
124 |     } else {
125 |       console.warn('Could not find the data array using improved regex - data structure may have changed');
126 |     }
127 | 
128 |     // Fallback to previous extraction methods
129 |     console.log('Using fallback extraction methods');
130 |     return extractFromDataArray(scriptContent);
131 |     
132 |   } catch (error) {
133 |     console.warn('Failed to extract rip.fun data with improved method:', error);
134 |     return extractRipFunDataFallback(scriptContent);
135 |   }
136 | }
137 | 
138 | function extractFromDataArray(scriptContent: string): ExtractedData {
139 |   try {
140 |     // Look for dataArray[1].data.profile pattern
141 |     const dataArrayStart = scriptContent.indexOf('data: [');
142 |     if (dataArrayStart === -1) return {};
143 |     
144 |     // Find the second object in the data array (dataArray[1])
145 |     let bracketCount = 0;
146 |     let objectCount = 0;
147 |     let start = -1;
148 |     let end = -1;
149 |     
150 |     for (let i = dataArrayStart + 7; i < scriptContent.length; i++) {
151 |       const char = scriptContent[i];
152 |       
153 |       if (char === '{') {
154 |         if (bracketCount === 0) {
155 |           objectCount++;
156 |           if (objectCount === 2) { // Second object (index 1)
157 |             start = i;
158 |           }
159 |         }
160 |         bracketCount++;
161 |       } else if (char === '}') {
162 |         bracketCount--;
163 |         if (bracketCount === 0 && objectCount === 2) {
164 |           end = i;
165 |           break;
166 |         }
167 |       }
168 |     }
169 |     
170 |     if (start !== -1 && end !== -1) {
171 |       let objectStr = scriptContent.substring(start, end + 1);
172 |       
173 |       // Clean JavaScript notation
174 |       objectStr = objectStr
175 |         .replace(/new Date\(([^)]+)\)/g, '$1')
176 |         .replace(/([{,]\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\s*:/g, '$1"$2":')
177 |         .replace(/,\s*([}\]])/g, '$1')
178 |         .replace(/\bundefined\b/g, 'null');
179 |       
180 |       try {
181 |         const parsedObject = JSON.parse(objectStr);
182 |         
183 |         if (parsedObject.data?.profile) {
184 |           const extractedData: ExtractedData = {
185 |             profile: parsedObject.data.profile
186 |           };
187 |           
188 |           // Clean clip_embedding data
189 |           if (extractedData.profile.digital_cards && Array.isArray(extractedData.profile.digital_cards)) {
190 |             extractedData.profile.digital_cards.forEach((item: any) => {
191 |               if (item.card?.clip_embedding) {
192 |                 delete item.card.clip_embedding;
193 |               }
194 |             });
195 |           }
196 |           
197 |           console.log(`Extracted ${extractedData.profile.digital_cards?.length || 0} cards from data array`);
198 |           return extractedData;
199 |         }
200 |       } catch (parseError) {
201 |         console.warn('Failed to parse data array object:', parseError);
202 |       }
203 |     }
204 |     
205 |   } catch (error) {
206 |     console.warn('Failed to extract from data array:', error);
207 |   }
208 |   
209 |   return {};
210 | }
211 | 
212 | function extractRipFunDataFallback(scriptContent: string): ExtractedData {
213 |   const extractedData: ExtractedData = {};
214 |   
215 |   try {
216 |     // Find the profile start and extract by counting braces
217 |     const profileStartMatch = scriptContent.match(/profile:\s*\{/);
218 |     
219 |     let fullProfileMatch = null;
220 |     if (profileStartMatch) {
221 |       const startIndex = scriptContent.indexOf(profileStartMatch[0]);
222 |       const openBraceIndex = startIndex + profileStartMatch[0].length - 1;
223 |       
224 |       let braceCount = 1;
225 |       let endIndex = openBraceIndex;
226 |       
227 |       for (let i = openBraceIndex + 1; i < scriptContent.length; i++) {
228 |         const char = scriptContent[i];
229 |         if (char === '{') braceCount++;
230 |         else if (char === '}') braceCount--;
231 |         
232 |         if (braceCount === 0) {
233 |           endIndex = i;
234 |           break;
235 |         }
236 |       }
237 |       
238 |       if (endIndex > openBraceIndex) {
239 |         const profileText = scriptContent.substring(startIndex, endIndex + 1);
240 |         fullProfileMatch = [profileText];
241 |       }
242 |     }
243 |     
244 |     if (fullProfileMatch) {
245 |       const profileText = fullProfileMatch[0];
246 |       const profileData: any = {};
247 |       
248 |       // Extract basic profile fields
249 |       const basicFields = {
250 |         id: /id:\s*(\d+)/,
251 |         username: /username:\s*"([^"]+)"/,
252 |         bio: /bio:\s*"([^"]*)"/,
253 |         email: /email:\s*"([^"]+)"/,
254 |         avatar: /avatar:\s*"([^"]+)"/,
255 |         banner: /banner:\s*"([^"]*)"/,
256 |         smart_wallet_address: /smart_wallet_address:\s*"([^"]+)"/,
257 |         owner_wallet_address: /owner_wallet_address:\s*"([^"]+)"/,
258 |         verified: /verified:\s*(true|false)/,
259 |         type: /type:\s*"([^"]+)"/,
260 |         login_provider: /login_provider:\s*"([^"]+)"/,
261 |         created_at: /created_at:\s*new Date\((\d+)\)/,
262 |         updated_at: /updated_at:\s*new Date\((\d+)\)/,
263 |       };
264 |       
265 |       for (const [key, pattern] of Object.entries(basicFields)) {
266 |         const match = profileText.match(pattern);
267 |         if (match) {
268 |           if (key === 'verified') {
269 |             profileData[key] = match[1] === 'true';
270 |           } else if (key === 'id') {
271 |             profileData[key] = parseInt(match[1]);
272 |           } else if (key.includes('_at')) {
273 |             profileData[key] = new Date(parseInt(match[1])).toISOString();
274 |           } else {
275 |             profileData[key] = match[1];
276 |           }
277 |         }
278 |       }
279 |       
280 |       // Try to extract digital_cards array using bracket counting for complete extraction
281 |       const cardsStartMatch = profileText.match(/digital_cards:\s*\[/);
282 |       if (cardsStartMatch) {
283 |         const cardsStartIndex = profileText.indexOf(cardsStartMatch[0]) + cardsStartMatch[0].length - 1; // -1 to include opening bracket
284 |         
285 |         // Count brackets to find the complete digital_cards array
286 |         let bracketCount = 1;
287 |         let cardsEndIndex = cardsStartIndex;
288 |         
289 |         for (let i = cardsStartIndex + 1; i < profileText.length; i++) {
290 |           const char = profileText[i];
291 |           if (char === '[') bracketCount++;
292 |           else if (char === ']') bracketCount--;
293 |           
294 |           if (bracketCount === 0) {
295 |             cardsEndIndex = i;
296 |             break;
297 |           }
298 |         }
299 |         
300 |         const cardsFullText = profileText.substring(cardsStartIndex + 1, cardsEndIndex); // +1 to skip opening bracket
301 |         const cardsMatch = [null, cardsFullText]; // Mimic the regex match structure
302 |         try {
303 |           // Count card objects by counting balanced braces
304 |           const cardsText = cardsMatch[1];
305 |           const cardObjects = [];
306 |           let depth = 0;
307 |           let start = -1;
308 |           let current = '';
309 |           
310 |           for (let i = 0; i < cardsText.length; i++) {
311 |             const char = cardsText[i];
312 |             
313 |             if (char === '{') {
314 |               if (depth === 0) start = i;
315 |               depth++;
316 |             } else if (char === '}') {
317 |               depth--;
318 |               if (depth === 0 && start !== -1) {
319 |                 current = cardsText.substring(start, i + 1);
320 |                 // Extract basic card info with regex
321 |                 const cardData: any = {};
322 |                 
323 |                 // Extract key card fields
324 |                 const cardFields = {
325 |                   id: /id:\s*(\d+)/,
326 |                   token_id: /token_id:\s*"([^"]+)"/,
327 |                   is_listed: /is_listed:\s*(true|false)/,
328 |                   front_image_url: /front_image_url:\s*"([^"]+)"/,
329 |                 };
330 |                 
331 |                 for (const [field, pattern] of Object.entries(cardFields)) {
332 |                   const match = current.match(pattern);
333 |                   if (match) {
334 |                     if (field === 'is_listed') {
335 |                       cardData[field] = match[1] === 'true';
336 |                     } else if (field === 'id') {
337 |                       cardData[field] = parseInt(match[1]);
338 |                     } else {
339 |                       cardData[field] = match[1];
340 |                     }
341 |                   }
342 |                 }
343 |                 
344 |                 // Extract card details
345 |                 const cardDetailsMatch = current.match(/card:\s*\{([\s\S]*?)\}/);
346 |                 if (cardDetailsMatch) {
347 |                   const cardDetails: any = {};
348 |                   const cardText = cardDetailsMatch[0];
349 |                   
350 |                   const detailFields = {
351 |                     name: /name:\s*"([^"]+)"/,
352 |                     card_number: /card_number:\s*"([^"]+)"/,
353 |                     rarity: /rarity:\s*"([^"]+)"/,
354 |                     hp: /hp:\s*(\d+)/,
355 |                     types: /types:\s*\[(.*?)\]/,
356 |                     raw_price: /raw_price:\s*"([^"]+)"/,
357 |                     set_id: /set_id:\s*"([^"]+)"/,
358 |                   };
359 |                   
360 |                   for (const [field, pattern] of Object.entries(detailFields)) {
361 |                     const match = cardText.match(pattern);
362 |                     if (match) {
363 |                       if (field === 'hp') {
364 |                         cardDetails[field] = parseInt(match[1]);
365 |                       } else if (field === 'types') {
366 |                         // Extract types array
367 |                         const typesStr = match[1];
368 |                         cardDetails[field] = typesStr.split(',').map((t: string) => t.replace(/"/g, '').trim()).filter(Boolean);
369 |                       } else {
370 |                         cardDetails[field] = match[1];
371 |                       }
372 |                     }
373 |                   }
374 |                   
375 |                   // Extract set information
376 |                   const setMatch = current.match(/set:\s*\{([\s\S]*?)\}/);
377 |                   if (setMatch) {
378 |                     const setDetails: any = {};
379 |                     const setText = setMatch[0];
380 |                     
381 |                     const setFields = {
382 |                       id: /id:\s*"([^"]+)"/,
383 |                       name: /name:\s*"([^"]+)"/,
384 |                       release_date: /release_date:\s*new Date\((\d+)\)/,
385 |                     };
386 |                     
387 |                     for (const [field, pattern] of Object.entries(setFields)) {
388 |                       const match = setText.match(pattern);
389 |                       if (match) {
390 |                         if (field === 'release_date') {
391 |                           setDetails[field] = new Date(parseInt(match[1])).toISOString();
392 |                         } else {
393 |                           setDetails[field] = match[1];
394 |                         }
395 |                       }
396 |                     }
397 |                     
398 |                     cardDetails.set = setDetails;
399 |                   }
400 |                   
401 |                   cardData.card = cardDetails;
402 |                 }
403 |                 
404 |                 // Extract listing information
405 |                 const listingMatch = current.match(/listing:\s*\{([\s\S]*?)\}/);
406 |                 if (listingMatch) {
407 |                   const listingDetails: any = {};
408 |                   const listingText = listingMatch[0];
409 |                   
410 |                   const listingFields = {
411 |                     price: /price:\s*"([^"]+)"/,
412 |                     usd_price: /usd_price:\s*"([^"]+)"/,
413 |                   };
414 |                   
415 |                   for (const [field, pattern] of Object.entries(listingFields)) {
416 |                     const match = listingText.match(pattern);
417 |                     if (match) {
418 |                       listingDetails[field] = match[1];
419 |                     }
420 |                   }
421 |                   
422 |                   cardData.listing = listingDetails;
423 |                 }
424 |                 
425 |                 cardObjects.push(cardData);
426 |               }
427 |             }
428 |           }
429 |           
430 |           profileData.digital_cards = cardObjects;
431 |         } catch (cardError) {
432 |           console.warn('Failed to parse digital cards:', cardError);
433 |         }
434 |       }
435 |       
436 |       // Try to extract digital_products array
437 |       const productsMatch = profileText.match(/digital_products:\s*\[([\s\S]*?)\]/);
438 |       if (productsMatch) {
439 |         try {
440 |           const productsText = productsMatch[1];
441 |           const productObjects = [];
442 |           let depth = 0;
443 |           let start = -1;
444 |           
445 |           for (let i = 0; i < productsText.length; i++) {
446 |             const char = productsText[i];
447 |             
448 |             if (char === '{') {
449 |               if (depth === 0) start = i;
450 |               depth++;
451 |             } else if (char === '}') {
452 |               depth--;
453 |               if (depth === 0 && start !== -1) {
454 |                 const current = productsText.substring(start, i + 1);
455 |                 const productData: any = {};
456 |                 
457 |                 const productFields = {
458 |                   id: /id:\s*(\d+)/,
459 |                   name: /name:\s*"([^"]+)"/,
460 |                   token_id: /token_id:\s*"([^"]+)"/,
461 |                   is_listed: /is_listed:\s*(true|false)/,
462 |                   front_image_url: /front_image_url:\s*"([^"]+)"/,
463 |                   open_status: /open_status:\s*"([^"]+)"/,
464 |                 };
465 |                 
466 |                 for (const [field, pattern] of Object.entries(productFields)) {
467 |                   const match = current.match(pattern);
468 |                   if (match) {
469 |                     if (field === 'is_listed') {
470 |                       productData[field] = match[1] === 'true';
471 |                     } else if (field === 'id') {
472 |                       productData[field] = parseInt(match[1]);
473 |                     } else {
474 |                       productData[field] = match[1];
475 |                     }
476 |                   }
477 |                 }
478 |                 
479 |                 productObjects.push(productData);
480 |               }
481 |             }
482 |           }
483 |           
484 |           profileData.digital_products = productObjects;
485 |         } catch (productError) {
486 |           console.warn('Failed to parse digital products:', productError);
487 |         }
488 |       }
489 |       
490 |       extractedData.profile = profileData;
491 |     }
492 |     
493 |     // Extract stats
494 |     const statsMatch = scriptContent.match(/stats:\s*\{([^}]+)\}/);
495 |     if (statsMatch) {
496 |       const statsData: any = {};
497 |       const statsText = statsMatch[0];
498 |       
499 |       const statPatterns = {
500 |         totalCards: /totalCards:\s*(\d+)/,
501 |         totalPacks: /totalPacks:\s*(\d+)/,
502 |         totalValue: /totalValue:\s*"([^"]+)"/,
503 |       };
504 |       
505 |       for (const [key, pattern] of Object.entries(statPatterns)) {
506 |         const match = statsText.match(pattern);
507 |         if (match) {
508 |           if (key.startsWith('total') && key !== 'totalValue') {
509 |             statsData[key] = parseInt(match[1]);
510 |           } else {
511 |             statsData[key] = match[1];
512 |           }
513 |         }
514 |       }
515 |       
516 |       extractedData.stats = statsData;
517 |     }
518 |     
519 |   } catch (error) {
520 |     console.warn('Failed to extract rip.fun data with fallback method:', error);
521 |   }
522 |   
523 |   return extractedData;
524 | }
525 | 
526 | export function sanitizeExtractedData(data: ExtractedData): ExtractedData {
527 |   const sanitized: ExtractedData = {};
528 |   
529 |   function sanitizeValue(value: any): any {
530 |     if (value === null || value === undefined) {
531 |       return null;
532 |     }
533 |     
534 |     if (typeof value === 'string') {
535 |       return value.trim().replace(/<script[^>]*>.*?<\/script>/gi, '').substring(0, 10000);
536 |     }
537 |     
538 |     if (typeof value === 'object' && !Array.isArray(value)) {
539 |       const sanitizedObject: any = {};
540 |       for (const [key, val] of Object.entries(value)) {
541 |         const sanitizedKey = key.replace(/[<>]/g, '').substring(0, 100);
542 |         sanitizedObject[sanitizedKey] = sanitizeValue(val);
543 |       }
544 |       return sanitizedObject;
545 |     }
546 |     
547 |     if (Array.isArray(value)) {
548 |       return value.slice(0, 1000).map(sanitizeValue);
549 |     }
550 |     
551 |     return value;
552 |   }
553 |   
554 |   for (const [key, value] of Object.entries(data)) {
555 |     const sanitizedKey = key.replace(/[<>]/g, '').substring(0, 100);
556 |     sanitized[sanitizedKey] = sanitizeValue(value);
557 |   }
558 |   
559 |   return sanitized;
560 | }
561 | 
562 | /**
563 |  * Extract user data directly from rip.fun owned-cards API endpoint.
564 |  * Input should be a user ID (e.g., "2010" for ndw).
565 |  */
566 | export async function extractFromRipFunAPI(userId: string): Promise<ExtractedData> {
567 |   try {
568 |     console.log(`Starting API extraction for user ID: ${userId}`);
569 |     
570 |     // Get complete card collection using user ID
571 |     const cardsUrl = `https://www.rip.fun/api/user/${userId}/owned-cards`;
572 |     console.log(`Fetching owned cards from: ${cardsUrl}`);
573 |     
574 |     const cardsResponse = await fetch(cardsUrl);
575 |     if (!cardsResponse.ok) {
576 |       if (cardsResponse.status === 404) {
577 |         throw new Error(`User ID '${userId}' not found`);
578 |       }
579 |       throw new Error(`Failed to get owned cards: ${cardsResponse.status} ${cardsResponse.statusText}`);
580 |     }
581 |     
582 |     const cardsData = await cardsResponse.json();
583 |     
584 |     if (!cardsData.cards || !Array.isArray(cardsData.cards)) {
585 |       throw new Error('Invalid cards data structure received from API');
586 |     }
587 |     
588 |     const allCards = cardsData.cards;
589 |     console.log(`Successfully fetched ${allCards.length} total cards from API`);
590 |     
591 |     // Clean and transform API data, removing clip_embedding
592 |     const transformedCards = allCards.map((cardData: any) => {
593 |       // Remove clip_embedding from card data to prevent huge payloads
594 |       const cleanCard = { ...cardData.card };
595 |       if (cleanCard.clip_embedding) {
596 |         delete cleanCard.clip_embedding;
597 |       }
598 |       
599 |       return {
600 |         id: cardData.token_id, // Use token_id as the main ID
601 |         token_id: cardData.token_id,
602 |         unique_id: cardData.unique_id,
603 |         is_listed: cardData.is_listed || false,
604 |         front_image_url: cardData.front_image_url,
605 |         owner: cardData.owner,
606 |         card: {
607 |           id: cleanCard.id,
608 |           name: cleanCard.name || 'Unknown Card',
609 |           card_number: cleanCard.card_number || cleanCard.formatted_card_number?.toString() || '',
610 |           rarity: cleanCard.rarity || '',
611 |           hp: cleanCard.hp,
612 |           types: cleanCard.types || [],
613 |           abilities: cleanCard.abilities || [],
614 |           attacks: cleanCard.attacks || [],
615 |           weaknesses: cleanCard.weaknesses || [],
616 |           resistances: cleanCard.resistances || [],
617 |           raw_price: cleanCard.raw_price || 0,
618 |           set_id: cleanCard.set_id || '',
619 |           large_image_url: cleanCard.large_image_url,
620 |           small_image_url: cleanCard.small_image_url,
621 |           supertype: cleanCard.supertype,
622 |           subtype: cleanCard.subtype,
623 |           illustrator: cleanCard.illustrator,
624 |           tcgplayer_id: cleanCard.tcgplayer_id,
625 |           is_chase: cleanCard.is_chase,
626 |           is_reverse: cleanCard.is_reverse,
627 |           is_holo: cleanCard.is_holo,
628 |           sku: cleanCard.sku,
629 |           created_at: cleanCard.created_at,
630 |           updated_at: cleanCard.updated_at
631 |         },
632 |         set: cleanCard.set || {
633 |           id: cleanCard.set_id,
634 |           name: 'Unknown Set'
635 |         },
636 |         listing: cardData.listing
637 |       };
638 |     });
639 |     
640 |     // Create comprehensive profile structure
641 |     const profile = {
642 |       id: userId,
643 |       username: `User ${userId}`, // We don't get username from this endpoint
644 |       digital_cards: transformedCards,
645 |       digital_products: [], // This endpoint doesn't provide pack info
646 |       total_cards: transformedCards.length,
647 |       total_packs: 0,
648 |       total_value: transformedCards.reduce((sum: number, card: any) => sum + parseFloat(card.card?.raw_price || 0), 0).toFixed(2)
649 |     };
650 |     
651 |     const stats = {
652 |       totalCards: transformedCards.length,
653 |       totalPacks: 0,
654 |       totalValue: `${profile.total_value}`
655 |     };
656 |     
657 |     console.log(`API extraction complete: ${transformedCards.length} cards, total value ${profile.total_value}`);
658 |     
659 |     return {
660 |       profile,
661 |       stats,
662 |       extraction_method: 'api_direct',
663 |       api_calls_made: 1
664 |     };
665 |     
666 |   } catch (error) {
667 |     console.error('Failed to extract data from rip.fun API:', error);
668 |     throw new Error(`API extraction failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
669 |   }
670 | }


--------------------------------------------------------------------------------
/src/lib/server/services/tradeAnalyzer.ts:
--------------------------------------------------------------------------------
  1 | export interface TradeCard {
  2 |   id: string;
  3 |   name: string;
  4 |   set_id: string;
  5 |   card_number: string;
  6 |   rarity: string;
  7 |   market_value?: number;
  8 |   image_url?: string;
  9 |   small_image_url?: string;
 10 |   type?: string;
 11 |   hp?: number;
 12 |   set_name?: string;
 13 | }
 14 | 
 15 | export interface UserCardCollection {
 16 |   username: string;
 17 |   id: number | null;
 18 |   ownedCards: Map<string, TradeCard>;
 19 |   missingCards: Map<string, TradeCard>;
 20 |   cardCounts: Map<string, number>;
 21 |   profile: any;
 22 | }
 23 | 
 24 | export interface TradeMatch {
 25 |   card: TradeCard;
 26 |   tradeType: 'perfect' | 'give' | 'receive' | 'impossible';
 27 |   userAHas: boolean;
 28 |   userBHas: boolean;
 29 |   userANeeds: boolean;
 30 |   userBNeeds: boolean;
 31 |   estimatedValue?: number;
 32 |   userACount?: number;
 33 |   userBCount?: number;
 34 | }
 35 | 
 36 | export interface TradeAnalysis {
 37 |   perfectTrades: TradeMatch[];        // Both users can trade with each other
 38 |   userACanReceive: TradeMatch[];      // A needs, B has (B -> A)  
 39 |   userACanGive: TradeMatch[];         // A has, B needs (A -> B)
 40 |   mutualMissing: TradeMatch[];        // Both users missing (impossible trades)
 41 |   summary: {
 42 |     totalPerfectTrades: number;
 43 |     totalOneWayToA: number;
 44 |     totalOneWayToB: number;
 45 |     totalImpossible: number;
 46 |     estimatedPerfectTradeValue: number;
 47 |     estimatedOneWayToAValue: number;
 48 |     estimatedOneWayToBValue: number;
 49 |     tradeBalance: 'even' | 'favors_a' | 'favors_b';
 50 |   };
 51 | }
 52 | 
 53 | export class TradeAnalyzer {
 54 |   /**
 55 |    * Create standardized card key for comparison - matches extract page deduplication logic
 56 |    */
 57 |   private createCardKey(card: any): string {
 58 |     // Use the same deduplication logic as /extract page: card.card?.id
 59 |     const cardId = card.card?.id || card.id;
 60 |     return `card_${cardId}`;
 61 |   }
 62 | 
 63 |   /**
 64 |    * Convert card array to standardized Map structure with extract page deduplication and count tracking
 65 |    */
 66 |   private createCardMap(cards: any[]): { cardMap: Map<string, TradeCard>, cardCounts: Map<string, number> } {
 67 |     const cardCounts = new Map<string, number>();
 68 |     
 69 |     // First count all cards before deduplication
 70 |     for (const card of cards) {
 71 |       const cardId = card.card?.id || card.id;
 72 |       const key = `card_${cardId}`;
 73 |       cardCounts.set(key, (cardCounts.get(key) || 0) + 1);
 74 |     }
 75 | 
 76 |     // Then deduplicate using same logic as /extract page
 77 |     const deduplicatedCards = Object.values(cards.reduce((unique: any, card: any) => {
 78 |       const cardId = card.card?.id;
 79 |       if (!unique[cardId] || unique[cardId].listing) {
 80 |         unique[cardId] = card;
 81 |       }
 82 |       return unique;
 83 |     }, {})) as any[];
 84 | 
 85 |     const cardMap = new Map<string, TradeCard>();
 86 |     
 87 |     for (const card of deduplicatedCards) {
 88 |       const key = this.createCardKey(card);
 89 |       
 90 |       // Handle nested card structure from rip.fun API (matches /extract structure)
 91 |       const cardInfo = card.card || card;
 92 |       const setInfo = cardInfo.set || card.set || {};
 93 |       
 94 |       const standardCard: TradeCard = {
 95 |         id: cardInfo.id || card.id,
 96 |         name: cardInfo.name || card.name,
 97 |         set_id: setInfo.id || cardInfo.set_id || card.set_id,
 98 |         card_number: cardInfo.card_number || card.card_number,
 99 |         rarity: cardInfo.rarity || card.rarity,
100 |         // Use same value logic as /extract page
101 |         market_value: parseFloat(card.listing?.usd_price || cardInfo.raw_price || cardInfo.market_value || '0'),
102 |         image_url: cardInfo.small_image_url || cardInfo.image_url || card.front_image_url || card.image_url,
103 |         small_image_url: cardInfo.small_image_url || cardInfo.image_url || card.front_image_url || card.image_url,
104 |         type: cardInfo.type || card.type,
105 |         hp: cardInfo.hp || card.hp,
106 |         set_name: setInfo.name || cardInfo.set_name || card.set_name
107 |       };
108 |       
109 |       cardMap.set(key, standardCard);
110 |     }
111 |     
112 |     console.log(`Created card map: ${cards.length} input -> ${deduplicatedCards.length} deduplicated -> ${cardMap.size} final`);
113 |     return { cardMap, cardCounts };
114 |   }
115 | 
116 |   /**
117 |    * Calculate missing cards based on available sets
118 |    * For now, this is simplified - in production you'd load from set APIs
119 |    */
120 |   private calculateMissingCards(ownedCards: Map<string, TradeCard>, allAvailableCards: Map<string, TradeCard>): Map<string, TradeCard> {
121 |     const missingCards = new Map<string, TradeCard>();
122 |     
123 |     for (const [key, card] of allAvailableCards) {
124 |       if (!ownedCards.has(key)) {
125 |         missingCards.set(key, card);
126 |       }
127 |     }
128 |     
129 |     return missingCards;
130 |   }
131 | 
132 |   /**
133 |    * Create user collection with owned and missing card analysis
134 |    */
135 |   createUserCollection(username: string, id: number | null, profile: any, cards: any[], allAvailableCards?: Map<string, TradeCard>): UserCardCollection {
136 |     const { cardMap: ownedCards, cardCounts } = this.createCardMap(cards);
137 |     
138 |     // For missing cards calculation, we need all possible cards
139 |     const missingCards = allAvailableCards 
140 |       ? this.calculateMissingCards(ownedCards, allAvailableCards)
141 |       : new Map(); // Will be calculated later in analyzeTrades
142 |     
143 |     return {
144 |       username,
145 |       id,
146 |       ownedCards,
147 |       missingCards,
148 |       cardCounts,
149 |       profile
150 |     };
151 |   }
152 | 
153 |   /**
154 |    * Create combined universe of all cards from both users
155 |    */
156 |   private createCardUniverse(userA: UserCardCollection, userB: UserCardCollection): Map<string, TradeCard> {
157 |     const universe = new Map<string, TradeCard>();
158 |     
159 |     // Add all cards from both users to create the universe
160 |     for (const [key, card] of userA.ownedCards) {
161 |       universe.set(key, card);
162 |     }
163 |     
164 |     for (const [key, card] of userB.ownedCards) {
165 |       if (!universe.has(key)) {
166 |         universe.set(key, card);
167 |       }
168 |     }
169 |     
170 |     return universe;
171 |   }
172 | 
173 |   /**
174 |    * Update user collections with proper missing cards calculation
175 |    */
176 |   private updateMissingCards(userA: UserCardCollection, userB: UserCardCollection, cardUniverse: Map<string, TradeCard>): void {
177 |     // Calculate missing cards for user A
178 |     userA.missingCards = this.calculateMissingCards(userA.ownedCards, cardUniverse);
179 |     
180 |     // Calculate missing cards for user B  
181 |     userB.missingCards = this.calculateMissingCards(userB.ownedCards, cardUniverse);
182 |   }
183 | 
184 |   /**
185 |    * Analyze trade opportunities between two users
186 |    */
187 |   analyzeTrades(userA: UserCardCollection, userB: UserCardCollection): TradeAnalysis {
188 |     // First, create the universe of all cards from both users
189 |     const cardUniverse = this.createCardUniverse(userA, userB);
190 |     
191 |     // Update missing cards for both users based on the universe
192 |     this.updateMissingCards(userA, userB, cardUniverse);
193 |     
194 |     console.log(`Trade analysis setup:`);
195 |     console.log(`- Card universe: ${cardUniverse.size} total unique cards`);
196 |     console.log(`- ${userA.username}: ${userA.ownedCards.size} owned, ${userA.missingCards.size} missing`);
197 |     console.log(`- ${userB.username}: ${userB.ownedCards.size} owned, ${userB.missingCards.size} missing`);
198 |     const perfectTrades: TradeMatch[] = [];
199 |     const userACanReceive: TradeMatch[] = [];
200 |     const userACanGive: TradeMatch[] = [];
201 |     const mutualMissing: TradeMatch[] = [];
202 | 
203 |     // Get all unique card keys from both users
204 |     const allCardKeys = new Set([
205 |       ...userA.ownedCards.keys(),
206 |       ...userA.missingCards.keys(), 
207 |       ...userB.ownedCards.keys(),
208 |       ...userB.missingCards.keys()
209 |     ]);
210 | 
211 |     for (const cardKey of allCardKeys) {
212 |       const userAHas = userA.ownedCards.has(cardKey);
213 |       const userBHas = userB.ownedCards.has(cardKey);
214 |       const userANeeds = userA.missingCards.has(cardKey);
215 |       const userBNeeds = userB.missingCards.has(cardKey);
216 | 
217 |       // Get card details (prefer owned version for accurate market data)
218 |       const card = userA.ownedCards.get(cardKey) || 
219 |                    userB.ownedCards.get(cardKey) || 
220 |                    userA.missingCards.get(cardKey) || 
221 |                    userB.missingCards.get(cardKey);
222 | 
223 |       if (!card) continue;
224 | 
225 |       const baseTradeMatch = {
226 |         card,
227 |         userAHas,
228 |         userBHas, 
229 |         userANeeds,
230 |         userBNeeds,
231 |         estimatedValue: card.market_value || 0,
232 |         userACount: userA.cardCounts.get(cardKey) || 0,
233 |         userBCount: userB.cardCounts.get(cardKey) || 0
234 |       };
235 | 
236 |       // Debug logging for first few cards
237 |       if (perfectTrades.length + userACanReceive.length + userACanGive.length < 5) {
238 |         console.log(`Card ${card.name} (${cardKey}): A_has=${userAHas}, A_needs=${userANeeds}, B_has=${userBHas}, B_needs=${userBNeeds}`);
239 |       }
240 | 
241 |       // Perfect trade: Both users have what the other needs
242 |       if (userAHas && userBNeeds && userBHas && userANeeds) {
243 |         perfectTrades.push({
244 |           ...baseTradeMatch,
245 |           tradeType: 'perfect'
246 |         });
247 |         console.log(`✅ Perfect trade found: ${card.name}`);
248 |       }
249 |       // A can receive from B (A needs it, B has it)
250 |       else if (userANeeds && userBHas) {
251 |         userACanReceive.push({
252 |           ...baseTradeMatch,
253 |           tradeType: 'receive'
254 |         });
255 |         if (userACanReceive.length <= 3) {
256 |           console.log(`⬅️ A can receive: ${card.name} (B has, A needs)`);
257 |         }
258 |       }
259 |       // A can give to B (A has it, B needs it)  
260 |       else if (userAHas && userBNeeds) {
261 |         userACanGive.push({
262 |           ...baseTradeMatch,
263 |           tradeType: 'give'
264 |         });
265 |         if (userACanGive.length <= 3) {
266 |           console.log(`➡️ A can give: ${card.name} (A has, B needs)`);
267 |         }
268 |       }
269 |       // Both missing (impossible trade)
270 |       else if (userANeeds && userBNeeds) {
271 |         mutualMissing.push({
272 |           ...baseTradeMatch,
273 |           tradeType: 'impossible'
274 |         });
275 |       }
276 |     }
277 | 
278 |     // Calculate summary statistics
279 |     const estimatedPerfectTradeValue = perfectTrades.reduce((sum, trade) => sum + trade.estimatedValue!, 0);
280 |     const estimatedOneWayToAValue = userACanReceive.reduce((sum, trade) => sum + trade.estimatedValue!, 0);
281 |     const estimatedOneWayToBValue = userACanGive.reduce((sum, trade) => sum + trade.estimatedValue!, 0);
282 | 
283 |     // Determine trade balance
284 |     let tradeBalance: 'even' | 'favors_a' | 'favors_b' = 'even';
285 |     const balanceDifference = estimatedOneWayToAValue - estimatedOneWayToBValue;
286 |     if (Math.abs(balanceDifference) > 50) { // $50 threshold
287 |       tradeBalance = balanceDifference > 0 ? 'favors_a' : 'favors_b';
288 |     }
289 | 
290 |     return {
291 |       perfectTrades: perfectTrades.sort((a, b) => (b.estimatedValue || 0) - (a.estimatedValue || 0)),
292 |       userACanReceive: userACanReceive.sort((a, b) => (b.estimatedValue || 0) - (a.estimatedValue || 0)),
293 |       userACanGive: userACanGive.sort((a, b) => (b.estimatedValue || 0) - (a.estimatedValue || 0)),
294 |       mutualMissing: mutualMissing.sort((a, b) => (b.estimatedValue || 0) - (a.estimatedValue || 0)),
295 |       summary: {
296 |         totalPerfectTrades: perfectTrades.length,
297 |         totalOneWayToA: userACanReceive.length,
298 |         totalOneWayToB: userACanGive.length,
299 |         totalImpossible: mutualMissing.length,
300 |         estimatedPerfectTradeValue,
301 |         estimatedOneWayToAValue,
302 |         estimatedOneWayToBValue,
303 |         tradeBalance
304 |       }
305 |     };
306 |   }
307 | 
308 |   /**
309 |    * Get available sets from both users' collections
310 |    */
311 |   getAvailableSets(userA: UserCardCollection, userB: UserCardCollection): { id: string; name: string; count: number }[] {
312 |     const setData = new Map<string, { id: string; name: string; count: number }>();
313 |     
314 |     // Process both users' cards
315 |     for (const [key, card] of [...userA.ownedCards.entries(), ...userB.ownedCards.entries()]) {
316 |       if (card.set_id) {
317 |         const existing = setData.get(card.set_id);
318 |         if (existing) {
319 |           existing.count++;
320 |         } else {
321 |           setData.set(card.set_id, {
322 |             id: card.set_id,
323 |             name: card.set_name || card.set_id,
324 |             count: 1
325 |           });
326 |         }
327 |       }
328 |     }
329 |     
330 |     // Convert to array and sort by name
331 |     return Array.from(setData.values()).sort((a, b) => a.name.localeCompare(b.name));
332 |   }
333 | 
334 |   /**
335 |    * Filter trade analysis by set
336 |    */
337 |   filterBySet(analysis: TradeAnalysis, setId?: string): TradeAnalysis {
338 |     if (!setId || setId === 'all') {
339 |       return analysis;
340 |     }
341 |     
342 |     const filterBySetId = (trades: TradeMatch[]) => 
343 |       trades.filter(trade => trade.card.set_id === setId);
344 |     
345 |     return {
346 |       ...analysis,
347 |       perfectTrades: filterBySetId(analysis.perfectTrades),
348 |       userACanReceive: filterBySetId(analysis.userACanReceive),
349 |       userACanGive: filterBySetId(analysis.userACanGive),
350 |       mutualMissing: filterBySetId(analysis.mutualMissing),
351 |       summary: {
352 |         totalPerfectTrades: filterBySetId(analysis.perfectTrades).length,
353 |         totalOneWayToA: filterBySetId(analysis.userACanReceive).length,
354 |         totalOneWayToB: filterBySetId(analysis.userACanGive).length,
355 |         totalImpossible: filterBySetId(analysis.mutualMissing).length,
356 |         estimatedPerfectTradeValue: filterBySetId(analysis.perfectTrades).reduce((sum, trade) => sum + (trade.estimatedValue || 0), 0),
357 |         estimatedOneWayToAValue: filterBySetId(analysis.userACanReceive).reduce((sum, trade) => sum + (trade.estimatedValue || 0), 0),
358 |         estimatedOneWayToBValue: filterBySetId(analysis.userACanGive).reduce((sum, trade) => sum + (trade.estimatedValue || 0), 0),
359 |         tradeBalance: 'even' as 'even' | 'favors_a' | 'favors_b'
360 |       }
361 |     };
362 |   }
363 | 
364 |   /**
365 |    * Generate trade recommendations based on analysis
366 |    */
367 |   generateTradeRecommendations(analysis: TradeAnalysis, userA: UserCardCollection, userB: UserCardCollection): string[] {
368 |     const recommendations: string[] = [];
369 | 
370 |     if (analysis.summary.totalPerfectTrades > 0) {
371 |       recommendations.push(`🎯 ${analysis.summary.totalPerfectTrades} perfect trades available! Both users can benefit mutually.`);
372 |       
373 |       if (analysis.summary.estimatedPerfectTradeValue > 100) {
374 |         recommendations.push(`💰 Perfect trades worth approximately ${analysis.summary.estimatedPerfectTradeValue.toFixed(2)} combined.`);
375 |       }
376 |     }
377 | 
378 |     if (analysis.summary.totalOneWayToA > 0) {
379 |       recommendations.push(`⬅️ ${userA.username} can receive ${analysis.summary.totalOneWayToA} cards from ${userB.username}.`);
380 |     }
381 | 
382 |     if (analysis.summary.totalOneWayToB > 0) {
383 |       recommendations.push(`➡️ ${userA.username} can give ${analysis.summary.totalOneWayToB} cards to ${userB.username}.`);
384 |     }
385 | 
386 |     if (analysis.summary.tradeBalance === 'favors_a') {
387 |       recommendations.push(`⚖️ Trade balance favors ${userA.username} - consider offering additional compensation.`);
388 |     } else if (analysis.summary.tradeBalance === 'favors_b') {
389 |       recommendations.push(`⚖️ Trade balance favors ${userB.username} - ${userA.username} might request additional compensation.`);
390 |     } else {
391 |       recommendations.push(`✅ Trade values are well balanced between both users.`);
392 |     }
393 | 
394 |     if (analysis.summary.totalImpossible > 50) {
395 |       recommendations.push(`🔍 ${analysis.summary.totalImpossible} cards both users are missing - consider finding a third trading partner.`);
396 |     }
397 | 
398 |     return recommendations;
399 |   }
400 | }
401 | 
402 | // Export singleton instance
403 | export const tradeAnalyzer = new TradeAnalyzer();


--------------------------------------------------------------------------------
/src/lib/server/services/userSync.ts:
--------------------------------------------------------------------------------
  1 | import { PrismaClient } from '@prisma/client';
  2 | import { alchemyService } from './alchemy.js';
  3 | 
  4 | const prisma = new PrismaClient();
  5 | 
  6 | export interface RipFunUserData {
  7 |   smart_wallet_address: string;
  8 |   owner_wallet_address: string;
  9 |   username: string;
 10 |   type: string;
 11 |   id: number;
 12 |   avatar: string;
 13 |   banner: string;
 14 | }
 15 | 
 16 | export class UserSyncService {
 17 |   /**
 18 |    * Fetch user data from rip.fun API by address
 19 |    */
 20 |   async fetchRipFunUserByAddress(address: string): Promise<RipFunUserData | null> {
 21 |     try {
 22 |       const response = await fetch(`https://www.rip.fun/api/auth/${address}`, {
 23 |         headers: {
 24 |           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
 25 |           'Accept': 'application/json',
 26 |           'Referer': 'https://www.rip.fun/'
 27 |         }
 28 |       });
 29 | 
 30 |       if (!response.ok) {
 31 |         if (response.status === 404) {
 32 |           // User not found, this is normal
 33 |           return null;
 34 |         }
 35 |         throw new Error(`rip.fun API returned ${response.status}: ${response.statusText}`);
 36 |       }
 37 | 
 38 |       const userData: RipFunUserData = await response.json();
 39 |       return userData;
 40 | 
 41 |     } catch (error) {
 42 |       console.warn(`Failed to fetch user data for address ${address}:`, error);
 43 |       return null;
 44 |     }
 45 |   }
 46 | 
 47 |   /**
 48 |    * Sync blockchain addresses with rip.fun user data
 49 |    */
 50 |   async syncUsersFromBlockchain(fromBlock?: number): Promise<{
 51 |     addressesProcessed: number;
 52 |     usersFound: number;
 53 |     usersUpdated: number;
 54 |     lastBlockNumber: number;
 55 |   }> {
 56 |     console.log('Starting user sync from blockchain data...');
 57 | 
 58 |     // Get current sync status
 59 |     let syncStatus = await prisma.syncStatus.findUnique({
 60 |       where: { syncType: 'blockchain_users' }
 61 |     });
 62 | 
 63 |     // Determine starting block
 64 |     const startBlock = fromBlock || (syncStatus?.lastBlockNumber ? Number(syncStatus.lastBlockNumber) : undefined);
 65 |     
 66 |     // Update sync status to running
 67 |     syncStatus = await prisma.syncStatus.upsert({
 68 |       where: { syncType: 'blockchain_users' },
 69 |       create: {
 70 |         syncType: 'blockchain_users',
 71 |         status: 'running',
 72 |         lastSyncAt: new Date()
 73 |       },
 74 |       update: {
 75 |         status: 'running',
 76 |         lastSyncAt: new Date(),
 77 |         errorMessage: null
 78 |       }
 79 |     });
 80 | 
 81 |     try {
 82 |       // Get latest block number for tracking
 83 |       const latestBlockNumber = await alchemyService.getLatestBlockNumber();
 84 |       
 85 |       // Fetch unique addresses from blockchain
 86 |       const addresses = await alchemyService.getUniqueBuyerAddresses(startBlock, 'latest');
 87 |       console.log(`Processing ${addresses.length} unique addresses...`);
 88 | 
 89 |       let usersFound = 0;
 90 |       let usersUpdated = 0;
 91 |       const batchSize = 10;
 92 | 
 93 |       // Process addresses in batches to avoid overwhelming APIs
 94 |       for (let i = 0; i < addresses.length; i += batchSize) {
 95 |         const batch = addresses.slice(i, i + batchSize);
 96 |         console.log(`Processing batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(addresses.length / batchSize)}`);
 97 | 
 98 |         await Promise.all(batch.map(async (address) => {
 99 |           try {
100 |             // Fetch user data from rip.fun
101 |             const userData = await this.fetchRipFunUserByAddress(address);
102 |             
103 |             if (userData) {
104 |               usersFound++;
105 |               
106 |               // Upsert user data
107 |               const user = await prisma.ripUser.upsert({
108 |                 where: { id: userData.id },
109 |                 create: {
110 |                   id: userData.id,
111 |                   username: userData.username,
112 |                   smartWalletAddress: userData.smart_wallet_address,
113 |                   ownerWalletAddress: userData.owner_wallet_address,
114 |                   avatar: userData.avatar,
115 |                   banner: userData.banner,
116 |                   type: userData.type
117 |                 },
118 |                 update: {
119 |                   username: userData.username,
120 |                   smartWalletAddress: userData.smart_wallet_address,
121 |                   ownerWalletAddress: userData.owner_wallet_address,
122 |                   avatar: userData.avatar,
123 |                   banner: userData.banner,
124 |                   type: userData.type,
125 |                   updatedAt: new Date()
126 |                 }
127 |               });
128 | 
129 |               // Create or update address mapping
130 |               await prisma.ripUserAddress.upsert({
131 |                 where: { 
132 |                   address_ripUserId: { 
133 |                     address: address.toLowerCase(), 
134 |                     ripUserId: userData.id 
135 |                   }
136 |                 },
137 |                 create: {
138 |                   address: address.toLowerCase(),
139 |                   ripUserId: userData.id,
140 |                   blockNumber: BigInt(latestBlockNumber)
141 |                 },
142 |                 update: {
143 |                   blockNumber: BigInt(latestBlockNumber)
144 |                 }
145 |               });
146 | 
147 |               usersUpdated++;
148 |             }
149 | 
150 |           } catch (error) {
151 |             console.warn(`Error processing address ${address}:`, error);
152 |           }
153 |         }));
154 | 
155 |         // Small delay between batches
156 |         await new Promise(resolve => setTimeout(resolve, 100));
157 |       }
158 | 
159 |       // Update sync status to completed
160 |       await prisma.syncStatus.update({
161 |         where: { syncType: 'blockchain_users' },
162 |         data: {
163 |           status: 'completed',
164 |           lastBlockNumber: BigInt(latestBlockNumber),
165 |           lastSyncAt: new Date(),
166 |           errorMessage: null
167 |         }
168 |       });
169 | 
170 |       const result = {
171 |         addressesProcessed: addresses.length,
172 |         usersFound,
173 |         usersUpdated,
174 |         lastBlockNumber: latestBlockNumber
175 |       };
176 | 
177 |       console.log('User sync completed:', result);
178 |       return result;
179 | 
180 |     } catch (error) {
181 |       // Update sync status to error
182 |       await prisma.syncStatus.update({
183 |         where: { syncType: 'blockchain_users' },
184 |         data: {
185 |           status: 'error',
186 |           errorMessage: error instanceof Error ? error.message : 'Unknown error',
187 |           lastSyncAt: new Date()
188 |         }
189 |       });
190 | 
191 |       console.error('User sync failed:', error);
192 |       throw error;
193 |     }
194 |   }
195 | 
196 |   /**
197 |    * Get user ID by username
198 |    */
199 |   async getUserIdByUsername(username: string): Promise<number | null> {
200 |     try {
201 |       const user = await prisma.ripUser.findUnique({
202 |         where: { username: username.toLowerCase() }
203 |       });
204 | 
205 |       return user?.id || null;
206 |     } catch (error) {
207 |       console.error(`Error finding user by username ${username}:`, error);
208 |       return null;
209 |     }
210 |   }
211 | 
212 |   /**
213 |    * Get user data by username
214 |    */
215 |   async getUserByUsername(username: string): Promise<any | null> {
216 |     try {
217 |       const user = await prisma.ripUser.findUnique({
218 |         where: { username: username.toLowerCase() },
219 |         include: {
220 |           addresses: true
221 |         }
222 |       });
223 | 
224 |       return user;
225 |     } catch (error) {
226 |       console.error(`Error finding user by username ${username}:`, error);
227 |       return null;
228 |     }
229 |   }
230 | 
231 |   /**
232 |    * Get sync status
233 |    */
234 |   async getSyncStatus() {
235 |     return await prisma.syncStatus.findUnique({
236 |       where: { syncType: 'blockchain_users' }
237 |     });
238 |   }
239 | 
240 |   /**
241 |    * Search users by partial username
242 |    */
243 |   async searchUsers(query: string, limit: number = 10): Promise<any[]> {
244 |     try {
245 |       const users = await prisma.ripUser.findMany({
246 |         where: {
247 |           username: {
248 |             contains: query.toLowerCase()
249 |           }
250 |         },
251 |         take: limit,
252 |         orderBy: {
253 |           updatedAt: 'desc'
254 |         },
255 |         select: {
256 |           id: true,
257 |           username: true,
258 |           avatar: true,
259 |           type: true,
260 |           updatedAt: true
261 |         }
262 |       });
263 | 
264 |       return users;
265 |     } catch (error) {
266 |       console.error(`Error searching users with query ${query}:`, error);
267 |       return [];
268 |     }
269 |   }
270 | }
271 | 
272 | // Export singleton instance
273 | export const userSyncService = new UserSyncService();


--------------------------------------------------------------------------------
/src/lib/server/types.ts:
--------------------------------------------------------------------------------
 1 | export interface ProfileData {
 2 |   id?: string;
 3 |   name: string;
 4 |   bio?: string;
 5 |   website?: string;
 6 |   twitter?: string;
 7 |   github?: string;
 8 |   linkedin?: string;
 9 |   wallet?: string;
10 |   email?: string;
11 |   location?: string;
12 |   avatar?: string;
13 | }
14 | 
15 | export interface ExtractedData {
16 |   [key: string]: any;
17 | }
18 | 
19 | export interface ComparisonResult {
20 |   missing: Record<string, any>;
21 |   different: Record<string, { profile: any; extracted: any }>;
22 |   matched: Record<string, any>;
23 | }
24 | 
25 | export interface SvelteKitFetchedData {
26 |   url: string;
27 |   method: string;
28 |   response: {
29 |     status: number;
30 |     data: any;
31 |   };
32 | }


--------------------------------------------------------------------------------
/src/lib/utils/CLAUDE.md:
--------------------------------------------------------------------------------
  1 | # Utils Directory
  2 | 
  3 | This directory contains **shared utility modules** that provide common functionality across the application. These utilities were extracted during the 2025 refactoring to eliminate code duplication and centralize common operations.
  4 | 
  5 | ## 🎯 Utility Architecture
  6 | 
  7 | Utilities follow these principles:
  8 | - **Pure functions** without side effects where possible
  9 | - **TypeScript-first** with comprehensive type definitions
 10 | - **Consistent error handling** patterns
 11 | - **Comprehensive documentation** for all public functions
 12 | - **Reusable across multiple components** and services
 13 | 
 14 | ## 🛠️ Utilities
 15 | 
 16 | ### cacheUtils.ts ⭐ **New - Post-Refactoring** (163 lines)
 17 | **Purpose**: Centralized localStorage management with intelligent caching strategies
 18 | 
 19 | **Key Functionality:**
 20 | - **User-specific caching** with unique keys per user profile
 21 | - **Set data caching** for Pokemon TCG set information (shared across users)
 22 | - **Cache expiration** with configurable TTL (time-to-live)
 23 | - **Smart cache invalidation** and cleanup utilities
 24 | - **Cache status indicators** for UI feedback
 25 | - **Type-safe cache operations** with proper TypeScript interfaces
 26 | 
 27 | **Main Functions:**
 28 | 
 29 | #### User Data Caching
 30 | ```typescript
 31 | // Cache user profile data with expiration
 32 | setCachedUserData(userId: string, data: any, ttlMinutes?: number): void
 33 | 
 34 | // Retrieve cached user data with expiration checking
 35 | getCachedUserData(userId: string): CachedData | null
 36 | 
 37 | // Clear specific user's cached data
 38 | clearUserCache(userId: string): void
 39 | 
 40 | // Check if user data is cached and valid
 41 | hasValidUserCache(userId: string): boolean
 42 | ```
 43 | 
 44 | #### Set Data Caching (Permanent)
 45 | ```typescript
 46 | // Cache Pokemon TCG set data (no expiration)
 47 | setCachedSetData(setId: string, data: any): void
 48 | 
 49 | // Retrieve cached set data
 50 | getCachedSetData(setId: string): any | null
 51 | 
 52 | // Clear all set data cache
 53 | clearSetCache(): void
 54 | 
 55 | // Get all cached set IDs
 56 | getCachedSetIds(): string[]
 57 | ```
 58 | 
 59 | #### Cache Management
 60 | ```typescript
 61 | // Get cache statistics and status
 62 | getCacheStatus(): CacheStatus
 63 | 
 64 | // Clear all cache data (user and set data)
 65 | clearAllCache(): void
 66 | 
 67 | // Get cache size information
 68 | getCacheSize(): CacheSizeInfo
 69 | 
 70 | // Cleanup expired cache entries
 71 | cleanupExpiredCache(): void
 72 | ```
 73 | 
 74 | **Cache Strategy:**
 75 | 
 76 | 1. **User Data**: Temporary caching with configurable expiration
 77 |    - Profile information: 30 minutes TTL
 78 |    - Card data: 15 minutes TTL
 79 |    - Pack data: 15 minutes TTL
 80 | 
 81 | 2. **Set Data**: Permanent caching (Pokemon TCG sets rarely change)
 82 |    - Set metadata: No expiration
 83 |    - Card definitions: No expiration
 84 |    - Shared across all user profiles
 85 | 
 86 | 3. **Cache Keys**: Structured naming convention
 87 |    - User data: `rip_user_${userId}_${dataType}`
 88 |    - Set data: `rip_set_${setId}`
 89 |    - Metadata: `rip_cache_meta_${type}`
 90 | 
 91 | **TypeScript Interfaces:**
 92 | 
 93 | ```typescript
 94 | interface CachedData {
 95 |   data: any;
 96 |   timestamp: number;
 97 |   expiresAt?: number;
 98 |   version?: string;
 99 | }
100 | 
101 | interface CacheStatus {
102 |   userDataCount: number;
103 |   setDataCount: number;
104 |   totalSize: number;
105 |   lastCleanup: number;
106 | }
107 | 
108 | interface CacheSizeInfo {
109 |   userDataSize: number;
110 |   setDataSize: number;
111 |   totalEntries: number;
112 |   storageUsed: string; // Human-readable size
113 | }
114 | ```
115 | 
116 | **Usage Examples:**
117 | 
118 | ```typescript
119 | import { 
120 |   setCachedUserData, 
121 |   getCachedUserData, 
122 |   setCachedSetData,
123 |   getCachedSetData,
124 |   getCacheStatus 
125 | } from '$lib/utils/cacheUtils';
126 | 
127 | // Cache user profile data for 30 minutes
128 | setCachedUserData('12345', profileData, 30);
129 | 
130 | // Retrieve cached data with automatic expiration checking
131 | const cached = getCachedUserData('12345');
132 | if (cached) {
133 |   console.log('Using cached data:', cached.data);
134 | } else {
135 |   console.log('Cache miss or expired, fetching fresh data');
136 | }
137 | 
138 | // Cache Pokemon TCG set data permanently
139 | setCachedSetData('sv3pt5', setData);
140 | 
141 | // Check overall cache status
142 | const status = getCacheStatus();
143 | console.log(`Cache contains ${status.totalEntries} entries`);
144 | ```
145 | 
146 | **Refactoring Impact:**
147 | - **Eliminated duplicate caching logic** from multiple components
148 | - **Centralized cache management** for consistent behavior
149 | - **Reduced component complexity** by 50-100 lines per component
150 | - **Improved cache efficiency** with smart expiration strategies
151 | - **Enhanced user experience** with instant loading from cache
152 | 
153 | ### card.ts (8 lines)
154 | **Purpose**: Utilities for card data structure handling and set name resolution
155 | 
156 | **Key Functionality:**
157 | - **Set name extraction** from various card data structures
158 | - **Fallback handling** for missing or malformed set information
159 | - **Consistent card data access** across components
160 | 
161 | **Main Functions:**
162 | ```typescript
163 | // Extract set name from nested card structures
164 | getSetNameFromCard(input: any): string
165 | ```
166 | 
167 | **Usage Examples:**
168 | ```typescript
169 | import { getSetNameFromCard } from '$lib/utils/card';
170 | 
171 | // Handles various card data structures
172 | const setName = getSetNameFromCard(cardData); // "Scarlet & Violet 151"
173 | const fallback = getSetNameFromCard(malformedCard); // "Unknown Set"
174 | ```
175 | 
176 | ### pricing.ts (21 lines)
177 | **Purpose**: Centralized pricing utilities for market values and listed prices
178 | 
179 | **Key Functionality:**
180 | - **Market value extraction** from card data with type safety
181 | - **Listed price calculation** for marketplace integration
182 | - **Consistent pricing logic** across all display components
183 | 
184 | **Main Functions:**
185 | ```typescript
186 | // Get market value with fallback handling
187 | getMarketValue(row: any): number
188 | 
189 | // Get listed price for marketplace cards
190 | getListedPrice(row: any): number
191 | ```
192 | 
193 | **Usage Examples:**
194 | ```typescript
195 | import { getMarketValue, getListedPrice } from '$lib/utils/pricing';
196 | 
197 | // Safe price extraction
198 | const marketValue = getMarketValue(cardData); // 15.99
199 | const listedPrice = getListedPrice(cardData); // 12.50
200 | ```
201 | 
202 | ### url.ts (16 lines)  
203 | **Purpose**: URL building utilities for rip.fun marketplace integration
204 | 
205 | **Key Functionality:**
206 | - **Name slugification** for URL-safe card names
207 | - **Card URL construction** for marketplace links
208 | - **Input handling** for various card data structures
209 | 
210 | **Main Functions:**
211 | ```typescript
212 | // Create URL-safe slugs from card names
213 | slugifyName(name: string): string
214 | 
215 | // Build rip.fun card URLs for marketplace links
216 | buildRipCardUrl(input: any): string
217 | ```
218 | 
219 | **Usage Examples:**
220 | ```typescript
221 | import { buildRipCardUrl } from '$lib/utils/url';
222 | 
223 | // Generate marketplace links
224 | const cardUrl = buildRipCardUrl(cardData); 
225 | // https://www.rip.fun/card/charizard-base-set-4
226 | ```
227 | 
228 | ### trade/summaries.ts (108 lines)
229 | **Purpose**: Trade summary building utilities for consistent analysis presentation
230 | 
231 | **Key Functionality:**
232 | - **User set summaries** with completion percentages
233 | - **Trade set analysis** with give/receive breakdowns
234 | - **Flexible data structure handling** with customizable formatters
235 | - **Sorting and organization** for optimal display
236 | 
237 | **Main Types:**
238 | ```typescript
239 | interface UserSetRow {
240 |   setId: string;
241 |   setName: string;
242 |   owned: number;
243 |   total: number;
244 |   percent: number; // 0..100
245 | }
246 | 
247 | interface TradeSetRow {
248 |   setId: string;
249 |   setName: string;
250 |   receive: number;
251 |   give: number;
252 | }
253 | ```
254 | 
255 | **Main Functions:**
256 | ```typescript
257 | // Build user collection summaries by set
258 | buildUserSetSummary(ownedCards: any[], opts: BuildOptions): UserSetRow[]
259 | 
260 | // Build from pre-calculated counts
261 | buildUserSetSummaryFromCounts(counts: Record<string, number>, opts: BuildOptions): UserSetRow[]
262 | 
263 | // Build trade analysis summaries
264 | buildTradeSetSummary(suggestions: TradeData[], perspective: 'A' | 'B', getSetName: Function): TradeSetRow[]
265 | ```
266 | 
267 | **Usage Examples:**
268 | ```typescript
269 | import { buildUserSetSummary } from '$lib/utils/trade/summaries';
270 | 
271 | // Generate user collection summary
272 | const summary = buildUserSetSummary(userCards, {
273 |   getSetId: (card) => card.set?.id,
274 |   getSetName: (id) => setNames[id] || id,
275 |   getSetTotal: (id) => setTotals[id] || 0
276 | });
277 | // Returns sorted array of set completion data
278 | ```
279 | 
280 | ## 🔧 Usage Patterns
281 | 
282 | ### Component Integration
283 | Components use utilities through consistent imports:
284 | ```typescript
285 | import { getCachedUserData, setCachedUserData } from '$lib/utils/cacheUtils';
286 | 
287 | // In component logic
288 | onMount(async () => {
289 |   const cached = getCachedUserData(userId);
290 |   if (cached) {
291 |     data = cached.data;
292 |   } else {
293 |     data = await fetchFreshData();
294 |     setCachedUserData(userId, data, 15); // Cache for 15 minutes
295 |   }
296 | });
297 | ```
298 | 
299 | ### Service Integration
300 | Services use utilities for consistent caching:
301 | ```typescript
302 | import { setCachedSetData, getCachedSetData } from '$lib/utils/cacheUtils';
303 | 
304 | export async function getSetData(setId: string) {
305 |   // Check cache first
306 |   const cached = getCachedSetData(setId);
307 |   if (cached) {
308 |     return cached;
309 |   }
310 |   
311 |   // Fetch fresh data
312 |   const freshData = await fetchSetFromAPI(setId);
313 |   
314 |   // Cache permanently (sets don't change)
315 |   setCachedSetData(setId, freshData);
316 |   
317 |   return freshData;
318 | }
319 | ```
320 | 
321 | ## 📊 Performance Benefits
322 | 
323 | ### Cache Efficiency
324 | - **Reduced API calls** by 70-80% through intelligent caching
325 | - **Instant loading** for returning users with cached data
326 | - **Reduced server load** through client-side cache management
327 | - **Smart cache invalidation** prevents stale data issues
328 | 
329 | ### Bundle Size Optimization
330 | - **Centralized utilities** reduce duplicate code across components
331 | - **Tree-shaking friendly** exports for unused utility elimination
332 | - **TypeScript optimization** for better minification
333 | 
334 | ### User Experience
335 | - **Immediate data loading** from cache for better perceived performance
336 | - **Offline resilience** with cached data availability
337 | - **Progressive enhancement** with cache-first, network-fallback strategy
338 | 
339 | ## 🚀 Adding New Utilities
340 | 
341 | When creating new utilities:
342 | 
343 | 1. **Follow pure function patterns** where possible
344 | 2. **Include comprehensive TypeScript types**
345 | 3. **Add proper error handling** and validation
346 | 4. **Document all public functions** with JSDoc
347 | 5. **Consider performance implications** of utility operations
348 | 6. **Include unit tests** for all utility functions
349 | 7. **Follow consistent naming conventions**
350 | 8. **Consider reusability** across different contexts
351 | 
352 | ### Example New Utility Structure
353 | ```typescript
354 | /**
355 |  * Description of what this utility does
356 |  * @param param1 - Description of parameter
357 |  * @param param2 - Description of parameter
358 |  * @returns Description of return value
359 |  */
360 | export function utilityFunction(param1: Type1, param2: Type2): ReturnType {
361 |   // Validation
362 |   if (!param1 || !param2) {
363 |     throw new Error('Invalid parameters');
364 |   }
365 |   
366 |   // Implementation
367 |   try {
368 |     const result = performOperation(param1, param2);
369 |     return result;
370 |   } catch (error) {
371 |     console.error('Utility function failed:', error);
372 |     throw error;
373 |   }
374 | }
375 | 
376 | // TypeScript interfaces
377 | export interface UtilityOptions {
378 |   option1: boolean;
379 |   option2: string;
380 | }
381 | 
382 | export interface UtilityResult {
383 |   success: boolean;
384 |   data?: any;
385 |   error?: string;
386 | }
387 | ```
388 | 
389 | ## 🔧 Testing Utilities
390 | 
391 | Utilities should include comprehensive tests:
392 | ```typescript
393 | import { describe, it, expect } from 'vitest';
394 | import { utilityFunction } from './utilityName';
395 | 
396 | describe('utilityFunction', () => {
397 |   it('should handle valid input correctly', () => {
398 |     const result = utilityFunction(validInput);
399 |     expect(result).toBeDefined();
400 |   });
401 | 
402 |   it('should throw error for invalid input', () => {
403 |     expect(() => utilityFunction(invalidInput)).toThrow();
404 |   });
405 | });
406 | ```
407 | 
408 | ## 📈 Future Utility Candidates
409 | 
410 | Consider extracting these patterns into utilities:
411 | - **Form validation** utilities for consistent input handling
412 | - **Date formatting** utilities for display consistency
413 | - **API client** utilities for common request patterns
414 | - **Error handling** utilities for consistent error processing
415 | - **Debouncing/throttling** utilities for performance optimization
416 | - **Local storage** encryption utilities for sensitive data
417 | - **URL parameter** parsing utilities for navigation handling


--------------------------------------------------------------------------------
/src/lib/utils/cacheUtils.ts:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Centralized localStorage cache utilities for rip.fun data extractor
  3 |  * Provides consistent caching patterns for user data and Pokemon TCG sets
  4 |  */
  5 | 
  6 | export interface CacheData {
  7 |   data: any;
  8 |   timestamp: number;
  9 |   userId?: string;
 10 |   setId?: string;
 11 | }
 12 | 
 13 | // Cache key generators
 14 | export function getCacheKey(userId: string): string {
 15 |   return `ripexplorer_cache_${userId}`;
 16 | }
 17 | 
 18 | export function getSetCacheKey(setId: string): string {
 19 |   return `ripexplorer_set_${setId}`;
 20 | }
 21 | 
 22 | // User cache operations
 23 | export function saveToCache(userId: string, data: any): void {
 24 |   try {
 25 |     const cacheData: CacheData = {
 26 |       data,
 27 |       timestamp: Date.now(),
 28 |       userId
 29 |     };
 30 |     localStorage.setItem(getCacheKey(userId), JSON.stringify(cacheData));
 31 |   } catch (err) {
 32 |     console.warn('Failed to save data to localStorage:', err);
 33 |   }
 34 | }
 35 | 
 36 | export function loadFromCache(userId: string): CacheData | null {
 37 |   try {
 38 |     const cached = localStorage.getItem(getCacheKey(userId));
 39 |     if (cached) {
 40 |       const cacheData: CacheData = JSON.parse(cached);
 41 |       // Check if cache is for the same user
 42 |       if (cacheData.userId === userId) {
 43 |         return cacheData;
 44 |       }
 45 |     }
 46 |     return null;
 47 |   } catch (err) {
 48 |     console.warn('Failed to load data from localStorage:', err);
 49 |     return null;
 50 |   }
 51 | }
 52 | 
 53 | export function clearUserCache(userId: string): void {
 54 |   try {
 55 |     localStorage.removeItem(getCacheKey(userId));
 56 |   } catch (err) {
 57 |     console.warn('Failed to clear user cache:', err);
 58 |   }
 59 | }
 60 | 
 61 | // Set cache operations (for Pokemon TCG sets)
 62 | // DEPRECATED: Set caching now handled by Redis on backend
 63 | export function saveSetToCache(setId: string, data: any): void {
 64 |   // No-op: Set data caching moved to Redis backend to avoid localStorage quota issues
 65 |   console.log(`Set data caching handled by Redis backend for: ${setId}`);
 66 | }
 67 | 
 68 | // DEPRECATED: Set caching now handled by Redis on backend
 69 | export function loadSetFromCache(setId: string): CacheData | null {
 70 |   // No-op: Set data caching moved to Redis backend
 71 |   return null;
 72 | }
 73 | 
 74 | // Bulk cache management
 75 | // DEPRECATED: Set caching now handled by Redis on backend
 76 | export function clearAllSetCaches(): void {
 77 |   // No-op: Set data caching moved to Redis backend
 78 |   console.log('Set cache clearing handled by Redis backend');
 79 | }
 80 | 
 81 | export function clearAllCaches(): void {
 82 |   try {
 83 |     // Clear only user caches (not set caches which are in Redis)
 84 |     const keys = Object.keys(localStorage);
 85 |     keys.forEach(key => {
 86 |       if (key.startsWith('ripexplorer_cache_')) {
 87 |         localStorage.removeItem(key);
 88 |       }
 89 |     });
 90 |     console.log('Cleared user caches');
 91 |   } catch (err) {
 92 |     console.warn('Failed to clear user caches:', err);
 93 |   }
 94 | }
 95 | 
 96 | // Cache status utilities
 97 | export function getCacheAge(cacheData: CacheData | null): number {
 98 |   if (!cacheData) return Infinity;
 99 |   return Date.now() - cacheData.timestamp;
100 | }
101 | 
102 | export function isCacheValid(cacheData: CacheData | null, maxAgeMs: number = 3600000): boolean {
103 |   if (!cacheData) return false;
104 |   return getCacheAge(cacheData) < maxAgeMs;
105 | }
106 | 
107 | export function getCacheStats(): { userCaches: number; setCaches: number; totalSize: string } {
108 |   try {
109 |     const keys = Object.keys(localStorage);
110 |     let userCaches = 0;
111 |     let totalSize = 0;
112 |     
113 |     keys.forEach(key => {
114 |       if (key.startsWith('ripexplorer_cache_')) {
115 |         userCaches++;
116 |         const value = localStorage.getItem(key);
117 |         if (value) {
118 |           totalSize += value.length;
119 |         }
120 |       }
121 |     });
122 |     
123 |     return {
124 |       userCaches,
125 |       setCaches: 0, // Set caches are now in Redis, not localStorage
126 |       totalSize: `${Math.round(totalSize / 1024)}KB`
127 |     };
128 |   } catch (err) {
129 |     console.warn('Failed to get cache stats:', err);
130 |     return { userCaches: 0, setCaches: 0, totalSize: '0KB' };
131 |   }
132 | }


--------------------------------------------------------------------------------
/src/lib/utils/card.ts:
--------------------------------------------------------------------------------
1 | // Utilities related to card data structures used across components
2 | export function getSetNameFromCard(input: any): string {
3 |   const card = input?.card ?? input;
4 |   if (card?.set?.name) return card.set.name;
5 |   if (card?.card?.set?.name) return card.card.set.name;
6 |   return card?.card?.set_id || card?.set_id || 'Unknown Set';
7 | }
8 | 


--------------------------------------------------------------------------------
/src/lib/utils/pricing.ts:
--------------------------------------------------------------------------------
 1 | // Centralized pricing helpers to keep components and pages in sync
 2 | // Row can be either an owned card or a synthesized missing-card row
 3 | export function getMarketValue(row: any): number {
 4 |   if (!row) return 0;
 5 |   if (row.isMissing) {
 6 |     const v = row.marketValue ?? row.card?.raw_price ?? 0;
 7 |     return typeof v === 'string' ? parseFloat(v) : Number(v) || 0;
 8 |   }
 9 |   const v = row.card?.raw_price ?? 0;
10 |   return typeof v === 'string' ? parseFloat(v) : Number(v) || 0;
11 | }
12 | 
13 | export function getListedPrice(row: any): number {
14 |   if (!row) return 0;
15 |   if (row.isMissing) {
16 |     return row.is_listed ? Number(row.lowestPrice || 0) : 0;
17 |   }
18 |   const v = row.listing?.usd_price ?? 0;
19 |   return typeof v === 'string' ? parseFloat(v) : Number(v) || 0;
20 | }
21 | 


--------------------------------------------------------------------------------
/src/lib/utils/trade/summaries.ts:
--------------------------------------------------------------------------------
  1 | // Lightweight helpers to build set-level summaries without duplicating logic
  2 | // These helpers are pure and expect callers to provide name/total lookups.
  3 | 
  4 | export type UserSetRow = {
  5 |   setId: string;
  6 |   setName: string;
  7 |   owned: number;
  8 |   total: number;
  9 |   percent: number; // 0..100
 10 | };
 11 | 
 12 | export function buildUserSetSummary(
 13 |   ownedCards: any[],
 14 |   opts: {
 15 |     getSetId: (card: any) => string | undefined;
 16 |     getSetName: (setId: string) => string; // caller can use resolveSetName(card) or a map
 17 |     getSetTotal: (setId: string) => number; // e.g. from setCardsData[setId].cards.length
 18 |   }
 19 | ): UserSetRow[] {
 20 |   const counts = new Map<string, number>();
 21 | 
 22 |   for (const c of ownedCards || []) {
 23 |     const id = opts.getSetId(c);
 24 |     if (!id) continue;
 25 |     counts.set(id, (counts.get(id) || 0) + 1);
 26 |   }
 27 | 
 28 |   const rows: UserSetRow[] = [];
 29 |   for (const [setId, owned] of counts) {
 30 |     const total = Math.max(0, Number(opts.getSetTotal(setId) || 0));
 31 |     const pct = total > 0 ? Math.min(100, Math.round((owned / total) * 100)) : 0;
 32 |     rows.push({
 33 |       setId,
 34 |       setName: opts.getSetName(setId),
 35 |       owned,
 36 |       total,
 37 |       percent: pct,
 38 |     });
 39 |   }
 40 | 
 41 |   // Sort by percent desc, then setName asc
 42 |   rows.sort((a, b) => (b.percent - a.percent) || a.setName.localeCompare(b.setName));
 43 |   return rows;
 44 | }
 45 | 
 46 | // Variant: build from an owned-by-set counts map
 47 | export function buildUserSetSummaryFromCounts(
 48 |   countsMap: Record<string, number> | Map<string, number>,
 49 |   opts: {
 50 |     getSetName: (setId: string) => string;
 51 |     getSetTotal: (setId: string) => number;
 52 |   }
 53 | ): UserSetRow[] {
 54 |   const rows: UserSetRow[] = [];
 55 |   const entries = countsMap instanceof Map ? countsMap.entries() : Object.entries(countsMap);
 56 |   for (const [setId, ownedVal] of entries as any) {
 57 |     const owned = Number(ownedVal) || 0;
 58 |     const total = Math.max(0, Number(opts.getSetTotal(setId) || 0));
 59 |     const pct = total > 0 ? Math.min(100, Math.round((owned / total) * 100)) : 0;
 60 |     rows.push({ setId, setName: opts.getSetName(setId), owned, total, percent: pct });
 61 |   }
 62 |   rows.sort((a, b) => (b.percent - a.percent) || a.setName.localeCompare(b.setName));
 63 |   return rows;
 64 | }
 65 | 
 66 | export type TradeSetRow = {
 67 |   setId: string;
 68 |   setName: string;
 69 |   receive: number;
 70 |   give: number;
 71 | };
 72 | 
 73 | export function buildTradeSetSummary(
 74 |   suggestions: Array<{
 75 |     fromA: Array<{ setId: string }>; // items A gives to B
 76 |     fromB: Array<{ setId: string }>; // items B gives to A
 77 |   }>,
 78 |   perspective: 'A' | 'B',
 79 |   getSetName: (setId: string) => string
 80 | ): TradeSetRow[] {
 81 |   const totals = new Map<string, { receive: number; give: number }>();
 82 | 
 83 |   for (const s of suggestions || []) {
 84 |     const outgoing = perspective === 'A' ? s.fromA : s.fromB; // what this user gives
 85 |     const incoming = perspective === 'A' ? s.fromB : s.fromA; // what this user receives
 86 | 
 87 |     for (const it of outgoing || []) {
 88 |       const t = totals.get(it.setId) || { receive: 0, give: 0 };
 89 |       t.give += 1;
 90 |       totals.set(it.setId, t);
 91 |     }
 92 |     for (const it of incoming || []) {
 93 |       const t = totals.get(it.setId) || { receive: 0, give: 0 };
 94 |       t.receive += 1;
 95 |       totals.set(it.setId, t);
 96 |     }
 97 |   }
 98 | 
 99 |   const rows: TradeSetRow[] = [];
100 |   for (const [setId, agg] of totals) {
101 |     rows.push({ setId, setName: getSetName(setId), receive: agg.receive, give: agg.give });
102 |   }
103 | 
104 |   // Sort by (receive - give) desc, then setName asc
105 |   rows.sort((a, b) => (b.receive - b.give) - (a.receive - a.give) || a.setName.localeCompare(b.setName));
106 |   return rows;
107 | }
108 | 


--------------------------------------------------------------------------------
/src/lib/utils/url.ts:
--------------------------------------------------------------------------------
 1 | export function slugifyName(name: string): string {
 2 |   return name
 3 |     .trim()
 4 |     .toLowerCase()
 5 |     .replace(/[^a-z0-9\s-]/g, '')
 6 |     .replace(/\s+/g, '-')
 7 |     .replace(/-+/g, '-');
 8 | }
 9 | 
10 | // Accepts either a wrapper { card: {...} } or a raw card object
11 | export function buildRipCardUrl(input: any): string {
12 |   const card = input?.card ?? input;
13 |   const identifier = card?.id || (card?.name ? slugifyName(card.name) : '');
14 |   return identifier ? `https://www.rip.fun/card/${identifier}` : 'https://www.rip.fun';
15 | }
16 | 


--------------------------------------------------------------------------------
/src/routes/+layout.svelte:
--------------------------------------------------------------------------------
 1 | <script lang="ts">
 2 | 	import favicon from '$lib/assets/favicon.svg';
 3 | 	import '../app.css';
 4 | 
 5 | 	let { children } = $props();
 6 | </script>
 7 | 
 8 | <svelte:head>
 9 | 	<link rel="icon" href={favicon} />
10 | </svelte:head>
11 | 
12 | <div class="min-h-screen bg-gray-50">
13 | 	<nav class="bg-white shadow-sm border-b">
14 | 		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
15 | 			<div class="flex justify-between h-16">
16 | 				<div class="flex items-center">
17 | 					<h1 class="text-xl font-semibold text-gray-900">rip.fun Data Extractor</h1>
18 | 				</div>
19 | 				<div class="flex items-center space-x-4">
20 | 					<a href="/" class="text-gray-600 hover:text-gray-900">Home</a>
21 | 					<a href="/extract" class="text-gray-600 hover:text-gray-900">Extractor</a>
22 | 					<a href="/profiles" class="text-gray-600 hover:text-gray-900">Profiles</a>
23 | 				</div>
24 | 			</div>
25 | 		</div>
26 | 	</nav>
27 | 	
28 | 	<main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
29 | 		{@render children?.()}
30 | 	</main>
31 | </div>
32 | 


--------------------------------------------------------------------------------
/src/routes/+page.svelte:
--------------------------------------------------------------------------------
 1 | <div class="px-4 py-8">
 2 |   <div class="text-center mb-12">
 3 |     <h1 class="text-4xl font-bold text-gray-900 mb-4">rip.fun Data Extractor</h1>
 4 |     <p class="text-xl text-gray-600 max-w-2xl mx-auto">
 5 |       Extract complete profile data from any rip.fun user. 
 6 |       Get all profile information, digital cards, packs, and collection data with clip_embedding automatically filtered out.
 7 |     </p>
 8 |   </div>
 9 | 
10 |   <div class="max-w-6xl mx-auto">
11 |     <div class="grid md:grid-cols-3 gap-8">
12 |       <div class="bg-white rounded-lg shadow-md p-6">
13 |         <h2 class="text-2xl font-semibold text-gray-900 mb-4">Extract Profile Data</h2>
14 |         <p class="text-gray-600 mb-6">
15 |           Extract complete profile data from any rip.fun user including profile information, digital cards, packs, and collection statistics.
16 |         </p>
17 |         <a 
18 |           href="/extract" 
19 |           class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
20 |         >
21 |           Start Extracting
22 |         </a>
23 |       </div>
24 | 
25 |       <div class="bg-white rounded-lg shadow-md p-6 border-2 border-green-200">
26 |         <h2 class="text-2xl font-semibold text-gray-900 mb-4">🔄 Trade Finder</h2>
27 |         <p class="text-gray-600 mb-6">
28 |           Compare two users to find perfect trading opportunities. See which cards you can trade with each other for mutual benefit!
29 |         </p>
30 |         <a 
31 |           href="/trade-finder" 
32 |           class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700"
33 |         >
34 |           Find Trades
35 |         </a>
36 |       </div>
37 | 
38 |       <div class="bg-white rounded-lg shadow-md p-6">
39 |         <h2 class="text-2xl font-semibold text-gray-900 mb-4">How it Works</h2>
40 |         <ul class="text-gray-600 space-y-2">
41 |           <li class="flex items-start">
42 |             <span class="flex-shrink-0 h-6 w-6 text-indigo-600">1.</span>
43 |             <span class="ml-2">Enter any rip.fun username</span>
44 |           </li>
45 |           <li class="flex items-start">
46 |             <span class="flex-shrink-0 h-6 w-6 text-indigo-600">2.</span>
47 |             <span class="ml-2">Fetch and parse the complete profile data</span>
48 |           </li>
49 |           <li class="flex items-start">
50 |             <span class="flex-shrink-0 h-6 w-6 text-indigo-600">3.</span>
51 |             <span class="ml-2">Automatically filter out clip_embedding data</span>
52 |           </li>
53 |           <li class="flex items-start">
54 |             <span class="flex-shrink-0 h-6 w-6 text-indigo-600">4.</span>
55 |             <span class="ml-2">Download clean JSON data or copy to clipboard</span>
56 |           </li>
57 |         </ul>
58 |       </div>
59 |     </div>
60 |   </div>
61 | </div>
62 | 


--------------------------------------------------------------------------------
/src/routes/CLAUDE.md:
--------------------------------------------------------------------------------
  1 | # Routes Directory
  2 | 
  3 | This directory contains **SvelteKit pages and layouts** that provide the user interface for the application. The routes have been extensively refactored to use a component-based architecture, eliminating over 1,000 lines of duplicate code.
  4 | 
  5 | ## 🏗️ Route Architecture
  6 | 
  7 | The application follows SvelteKit's file-based routing with:
  8 | - **Component-based pages** using specialized UI components
  9 | - **Consistent layout structure** with shared navigation
 10 | - **TypeScript integration** throughout all pages
 11 | - **Responsive design** optimized for all device sizes
 12 | - **Progressive enhancement** with proper fallbacks
 13 | 
 14 | ## 📄 Pages Overview
 15 | 
 16 | ### Main Application Pages
 17 | 
 18 | #### `+layout.svelte`
 19 | **Purpose**: Global application layout and navigation structure
 20 | 
 21 | **Key Features:**
 22 | - Responsive navigation with mobile hamburger menu
 23 | - Global styling and Tailwind CSS integration
 24 | - Consistent header/footer across all pages
 25 | - Navigation state management
 26 | - SEO meta tag management
 27 | 
 28 | **Structure:**
 29 | ```svelte
 30 | <nav>Global Navigation</nav>
 31 | <main><slot /></main>
 32 | <footer>Application Footer</footer>
 33 | ```
 34 | 
 35 | #### `+page.svelte` (Home Page)
 36 | **Purpose**: Application landing page and feature overview
 37 | 
 38 | **Key Features:**
 39 | - Feature highlights and value proposition
 40 | - Quick access to main extraction functionality
 41 | - Usage instructions and getting started guide
 42 | - Recent updates and changelog highlights
 43 | - Call-to-action buttons for key features
 44 | 
 45 | ### Core Functionality Pages
 46 | 
 47 | #### `extract/+page.svelte` ⭐ **Major Refactoring** (2,216 → 1,475 lines)
 48 | **Purpose**: Main data extraction interface with component-based architecture
 49 | 
 50 | **Component Integration:**
 51 | - **CardFilters Component**: Complete filtering interface (247 lines)
 52 | - **CardGrid Component**: Visual card display (230 lines) 
 53 | - **CardTable Component**: Data table with marketplace integration (332 lines)
 54 | - **PackManager Component**: Pack grouping and management (201 lines)
 55 | - **UserSearchInput Component**: Username search with autocomplete (111 lines)
 56 | 
 57 | **Key Features:**
 58 | - **Username Resolution**: Blockchain-powered username-to-ID mapping
 59 | - **Real-time Progress**: Live updates during long extractions
 60 | - **Smart Caching**: localStorage integration with cache status indicators
 61 | - **Missing Cards Integration**: Marketplace data with buy/offer functionality
 62 | - **Dual View Modes**: Grid and table views with specialized components
 63 | - **Advanced Filtering**: Set-based, rarity, and availability filters
 64 | - **Pack Management**: Intelligent grouping with expandable details
 65 | - **Export Functionality**: JSON download and clipboard copy
 66 | 
 67 | **Refactoring Impact:**
 68 | - **741 lines eliminated** (33.4% reduction)
 69 | - **Zero code duplication** in filtering and display logic
 70 | - **Improved maintainability** with clear component boundaries
 71 | - **Enhanced type safety** with proper component interfaces
 72 | - **Better performance** through component-level optimizations
 73 | 
 74 | #### `trade-finder/+page.svelte` ⭐ **Major Refactoring** (803 → 488 lines)
 75 | **Purpose**: Trade analysis and opportunity discovery
 76 | 
 77 | **Component Integration:**
 78 | - **TradeTable Component**: Reusable trade display table (127 lines)
 79 | - **UserSearchInput Component**: Dual user selection interface (111 lines)
 80 | 
 81 | **Key Features:**
 82 | - **Dual User Selection**: Search and compare two user profiles
 83 | - **Trade Analysis**: Automated opportunity discovery
 84 | - **Visual Indicators**: Color-coded trade availability
 85 | - **Trade Value Calculation**: Fair trade assessment
 86 | - **Detailed Trade Views**: Expandable trade information
 87 | 
 88 | **Refactoring Impact:**
 89 | - **315 lines eliminated** (39% reduction)
 90 | - **Eliminated duplicate table code** between give/receive sections
 91 | - **Centralized trade logic** in shared components
 92 | - **Improved consistency** in trade data display
 93 | 
 94 | ### Legacy Pages (Maintained for Compatibility)
 95 | 
 96 | #### `profiles/+page.svelte`
 97 | **Purpose**: Profile management interface (legacy feature)
 98 | 
 99 | **Features:**
100 | - Profile listing with search and filtering
101 | - CRUD operations for stored profiles
102 | - Profile comparison functionality
103 | - Import/export capabilities
104 | 
105 | #### `profiles/[id]/+page.svelte`
106 | **Purpose**: Individual profile view and editing
107 | 
108 | **Features:**
109 | - Detailed profile information display
110 | - Edit mode with form validation
111 | - Profile statistics and analytics
112 | - Export options for profile data
113 | 
114 | #### `profiles/new/+page.svelte`
115 | **Purpose**: Create new profile interface
116 | 
117 | **Features:**
118 | - Profile creation form with validation
119 | - Field guidance and help text
120 | - Real-time validation feedback
121 | - Integration with profile storage system
122 | 
123 | ## 🧩 Component Usage Patterns
124 | 
125 | ### Extract Page Component Integration
126 | 
127 | ```svelte
128 | <!-- Advanced filtering interface -->
129 | <CardFilters
130 |   bind:selectedSet
131 |   bind:selectedRarity
132 |   bind:viewMode
133 |   bind:showMissingCards
134 |   bind:onlyMissingCards
135 |   bind:availableOnly
136 |   bind:searchTerm
137 |   bind:pageSize
138 |   {cardsBySet}
139 |   {allRarities}
140 |   {fetchingAllSets}
141 |   {loadingSetData}
142 |   {setDataErrors}
143 |   {bulkFetchErrors}
144 |   on:searchChange={(e) => searchQuery = e.detail}
145 |   on:setChange={() => handleSetChange()}
146 |   on:rarityChange={() => handleRarityChange()}
147 |   on:viewModeChange={(e) => viewMode = e.detail}
148 |   on:missingCardsToggle={(e) => showMissingCards = e.detail}
149 |   on:onlyMissingToggle={(e) => onlyMissingCards = e.detail}
150 |   on:availableOnlyToggle={(e) => availableOnly = e.detail}
151 |   on:pageSizeChange={(e) => handlePageSizeChange(e.detail)}
152 | />
153 | 
154 | <!-- Conditional display based on view mode -->
155 | {#if viewMode === 'grid'}
156 |   <CardGrid
157 |     {selectedSet}
158 |     {cardsBySet}
159 |     paginatedCards={paginatedCards}
160 |     on:cardClick={(e) => openCardModal(e.detail)}
161 |   />
162 | {:else}
163 |   <CardTable
164 |     paginatedCards={paginatedCards}
165 |     {sortColumn}
166 |     {sortDirection}
167 |     on:cardClick={(e) => openCardModal(e.detail)}
168 |     on:sort={(e) => handleSort(e.detail.column)}
169 |   />
170 | {/if}
171 | 
172 | <!-- Pack management with intelligent grouping -->
173 | {#if extractedData.profile.digital_products?.length > 0}
174 |   <PackManager digitalProducts={extractedData.profile.digital_products} />
175 | {/if}
176 | ```
177 | 
178 | ### Trade Finder Component Integration
179 | 
180 | ```svelte
181 | <!-- Reusable trade analysis tables -->
182 | <TradeTable
183 |   trades={giveTrades}
184 |   title="Cards You Can Give"
185 |   userCountField="userACount"
186 |   on:tradeClick={handleTradeClick}
187 | />
188 | 
189 | <TradeTable
190 |   trades={receiveTrades}
191 |   title="Cards You Can Receive"
192 |   userCountField="userBCount"
193 |   on:tradeClick={handleTradeClick}
194 | />
195 | ```
196 | 
197 | ## 🎨 Styling and Design Patterns
198 | 
199 | ### Consistent Design System
200 | All pages follow established design patterns:
201 | 
202 | **Color Scheme:**
203 | - Primary: Indigo (`bg-indigo-600`, `text-indigo-600`)
204 | - Success: Green (`bg-green-600`, `text-green-600`)
205 | - Warning: Orange (`bg-orange-600`, `text-orange-600`)
206 | - Error: Red (`bg-red-600`, `text-red-600`)
207 | - Neutral: Gray (`bg-gray-50`, `text-gray-900`)
208 | 
209 | **Typography:**
210 | - Headings: `text-lg font-medium` to `text-xl font-semibold`
211 | - Body text: `text-sm text-gray-900`
212 | - Captions: `text-xs text-gray-500`
213 | 
214 | **Interactive Elements:**
215 | - Buttons: `px-4 py-2 rounded-md` with hover states
216 | - Inputs: `border-gray-300 focus:border-indigo-500 focus:ring-indigo-500`
217 | - Cards: `bg-white shadow rounded-lg p-6`
218 | 
219 | ### Responsive Design
220 | All pages implement mobile-first responsive design:
221 | - Grid layouts with `grid-cols-1 md:grid-cols-2 lg:grid-cols-3`
222 | - Flexible navigation with mobile hamburger menu
223 | - Touch-friendly interactive elements
224 | - Optimized content hierarchy for small screens
225 | 
226 | ## 📊 Performance Optimizations
227 | 
228 | ### Component-Level Optimizations
229 | - **Lazy loading** for heavy components
230 | - **Virtual scrolling** for large data sets
231 | - **Memoization** for expensive calculations
232 | - **Event delegation** for multiple similar elements
233 | 
234 | ### Cache Integration
235 | Pages utilize centralized cache utilities:
236 | ```typescript
237 | import { getCachedUserData, setCachedUserData } from '$lib/utils/cacheUtils';
238 | 
239 | // Cache-first loading strategy
240 | onMount(async () => {
241 |   const cached = getCachedUserData(userId);
242 |   if (cached) {
243 |     data = cached.data;
244 |     showCacheIndicator = true;
245 |   } else {
246 |     data = await fetchFreshData();
247 |     setCachedUserData(userId, data, 15);
248 |   }
249 | });
250 | ```
251 | 
252 | ### Progressive Enhancement
253 | - Works without JavaScript for basic functionality
254 | - Enhanced features progressively load with JS
255 | - Proper fallbacks for failed network requests
256 | - Graceful degradation for unsupported features
257 | 
258 | ## 🔄 State Management
259 | 
260 | ### Reactive State Patterns
261 | Pages use Svelte's reactive statements for efficient updates:
262 | ```typescript
263 | // Reactive filtering
264 | $: filteredCards = cards.filter(card => {
265 |   if (selectedSet !== 'all' && card.set !== selectedSet) return false;
266 |   if (selectedRarity !== 'all' && card.rarity !== selectedRarity) return false;
267 |   if (searchQuery && !card.name.toLowerCase().includes(searchQuery.toLowerCase())) return false;
268 |   return true;
269 | });
270 | 
271 | // Reactive pagination
272 | $: totalPages = Math.ceil(filteredCards.length / pageSize);
273 | $: paginatedCards = filteredCards.slice(
274 |   (currentPage - 1) * pageSize, 
275 |   currentPage * pageSize
276 | );
277 | ```
278 | 
279 | ### Component State Communication
280 | Components communicate through event dispatching:
281 | ```typescript
282 | // Child component dispatches events
283 | dispatch('filterChange', { type: 'set', value: selectedSet });
284 | 
285 | // Parent component handles events
286 | function handleFilterChange(event) {
287 |   const { type, value } = event.detail;
288 |   updateFilters(type, value);
289 | }
290 | ```
291 | 
292 | ## 🚀 Adding New Pages
293 | 
294 | When creating new pages:
295 | 
296 | 1. **Follow established file structure** in routes directory
297 | 2. **Use existing components** where possible for consistency
298 | 3. **Implement responsive design** with mobile-first approach
299 | 4. **Include proper TypeScript typing** for all data
300 | 5. **Add appropriate loading states** and error handling
301 | 6. **Consider caching strategy** for data-heavy pages
302 | 7. **Follow SEO best practices** with proper meta tags
303 | 8. **Test across different device sizes** and browsers
304 | 
305 | ### New Page Template
306 | ```svelte
307 | <script lang="ts">
308 |   import { onMount } from 'svelte';
309 |   import ComponentName from '$lib/components/ComponentName.svelte';
310 |   import { getCachedData, setCachedData } from '$lib/utils/cacheUtils';
311 |   
312 |   // TypeScript interfaces
313 |   interface PageData {
314 |     // Define data structure
315 |   }
316 |   
317 |   // Reactive state
318 |   let data: PageData[] = [];
319 |   let loading = false;
320 |   let error: string | null = null;
321 |   
322 |   // Lifecycle
323 |   onMount(async () => {
324 |     await loadData();
325 |   });
326 |   
327 |   // Functions
328 |   async function loadData() {
329 |     loading = true;
330 |     try {
331 |       // Implement data loading
332 |       const result = await fetchData();
333 |       data = result;
334 |     } catch (err) {
335 |       error = 'Failed to load data';
336 |       console.error(err);
337 |     } finally {
338 |       loading = false;
339 |     }
340 |   }
341 |   
342 |   function handleComponentEvent(event) {
343 |     // Handle component events
344 |   }
345 | </script>
346 | 
347 | <svelte:head>
348 |   <title>Page Title</title>
349 |   <meta name="description" content="Page description" />
350 | </svelte:head>
351 | 
352 | <div class="container mx-auto px-4 py-8">
353 |   <h1 class="text-2xl font-bold text-gray-900 mb-8">Page Title</h1>
354 |   
355 |   {#if loading}
356 |     <div class="text-center">Loading...</div>
357 |   {:else if error}
358 |     <div class="text-red-600">{error}</div>
359 |   {:else if data.length > 0}
360 |     <ComponentName {data} on:event={handleComponentEvent} />
361 |   {:else}
362 |     <div class="text-gray-500">No data available</div>
363 |   {/if}
364 | </div>
365 | ```
366 | 
367 | ## 📈 Refactoring Benefits
368 | 
369 | The route refactoring provides:
370 | - **Massive code reduction** (1,000+ lines eliminated)
371 | - **Improved maintainability** with component-based structure
372 | - **Consistent user experience** across all pages
373 | - **Better performance** through component optimizations
374 | - **Enhanced type safety** with TypeScript integration
375 | - **Easier testing** with isolated component logic
376 | - **Future-proof architecture** for new feature development


--------------------------------------------------------------------------------
/src/routes/api/CLAUDE.md:
--------------------------------------------------------------------------------
  1 | # API Routes Directory
  2 | 
  3 | This directory contains **SvelteKit API endpoints** that provide backend functionality for the application. Each endpoint follows RESTful conventions and includes proper error handling, TypeScript typing, and integration with backend services.
  4 | 
  5 | ## 🚀 API Architecture
  6 | 
  7 | All API endpoints follow consistent patterns:
  8 | - **RESTful design** with appropriate HTTP methods
  9 | - **TypeScript request/response** typing
 10 | - **Comprehensive error handling** with proper HTTP status codes
 11 | - **Service layer integration** for business logic
 12 | - **Request validation** and sanitization
 13 | - **Rate limiting considerations** for external API calls
 14 | 
 15 | ## 📡 Endpoint Categories
 16 | 
 17 | ### Core Data Extraction
 18 | 
 19 | #### `POST /api/extract`
 20 | **Purpose**: Main data extraction endpoint for rip.fun profiles
 21 | 
 22 | **Functionality:**
 23 | - Accepts username or numeric user ID
 24 | - Handles username-to-ID resolution via blockchain integration
 25 | - Fetches profile HTML with retry logic and timeout handling
 26 | - Parses SvelteKit data structure from HTML
 27 | - Normalizes and cleans extracted data
 28 | - Returns complete profile, cards, packs, and statistics
 29 | 
 30 | **Request Body:**
 31 | ```typescript
 32 | {
 33 |   userIdOrUsername: string; // Username or numeric ID
 34 |   skipCache?: boolean;      // Optional cache bypass
 35 | }
 36 | ```
 37 | 
 38 | **Response:**
 39 | ```typescript
 40 | {
 41 |   success: boolean;
 42 |   data?: {
 43 |     profile: UserProfile;
 44 |     cards: Card[];
 45 |     packs: Pack[];
 46 |     statistics: ProfileStats;
 47 |   };
 48 |   error?: string;
 49 |   cached?: boolean; // Indicates if data came from cache
 50 | }
 51 | ```
 52 | 
 53 | **Integration:**
 54 | - Uses `fetcher.ts` for reliable HTML fetching
 55 | - Uses `parser.ts` for SvelteKit data extraction
 56 | - Uses `normalizer.ts` for data cleaning
 57 | - Integrates with username resolution system
 58 | 
 59 | ### Username Bridging System
 60 | 
 61 | #### `POST /api/sync-users`
 62 | **Purpose**: Trigger blockchain user synchronization
 63 | 
 64 | **Functionality:**
 65 | - Initiates blockchain scanning for user addresses
 66 | - Processes pack purchase events from Base network
 67 | - Updates database with address-to-username mappings
 68 | - Provides progress tracking for long-running sync operations
 69 | 
 70 | **Request Body:**
 71 | ```typescript
 72 | {
 73 |   fromBlock?: number;  // Optional starting block
 74 |   toBlock?: number;    // Optional ending block
 75 |   resume?: boolean;    // Resume interrupted sync
 76 | }
 77 | ```
 78 | 
 79 | **Response:**
 80 | ```typescript
 81 | {
 82 |   success: boolean;
 83 |   syncId: string;
 84 |   message: string;
 85 |   blocksProcessed?: number;
 86 |   usersFound?: number;
 87 | }
 88 | ```
 89 | 
 90 | #### `GET /api/sync-users`
 91 | **Purpose**: Get current synchronization status
 92 | 
 93 | **Functionality:**
 94 | - Returns current sync progress
 95 | - Shows blocks processed and users discovered
 96 | - Indicates if sync is running, completed, or failed
 97 | 
 98 | **Response:**
 99 | ```typescript
100 | {
101 |   isRunning: boolean;
102 |   progress: {
103 |     currentBlock: number;
104 |     totalBlocks: number;
105 |     usersFound: number;
106 |     startTime: string;
107 |     estimatedCompletion?: string;
108 |   };
109 |   lastSync?: {
110 |     completedAt: string;
111 |     blocksProcessed: number;
112 |     usersFound: number;
113 |   };
114 | }
115 | ```
116 | 
117 | #### `GET /api/resolve-username/[username]`
118 | **Purpose**: Resolve username to user ID and basic profile data
119 | 
120 | **Functionality:**
121 | - Searches database for username mappings
122 | - Falls back to blockchain address lookup if needed
123 | - Returns user ID and basic profile information
124 | - Caches resolution results for performance
125 | 
126 | **Response:**
127 | ```typescript
128 | {
129 |   success: boolean;
130 |   userId?: string;
131 |   username: string;
132 |   profileData?: {
133 |     avatar?: string;
134 |     verified?: boolean;
135 |     walletAddress?: string;
136 |   };
137 |   cached?: boolean;
138 | }
139 | ```
140 | 
141 | #### `GET /api/search-users?q=[query]&limit=[n]`
142 | **Purpose**: Search users with autocomplete functionality
143 | 
144 | **Functionality:**
145 | - Searches usernames with partial matching
146 | - Returns suggestions for autocomplete
147 | - Limits results for performance
148 | - Includes basic profile data for display
149 | 
150 | **Query Parameters:**
151 | - `q`: Search query (minimum 2 characters)
152 | - `limit`: Maximum results (default 10, max 50)
153 | 
154 | **Response:**
155 | ```typescript
156 | {
157 |   success: boolean;
158 |   users: Array<{
159 |     userId: string;
160 |     username: string;
161 |     avatar?: string;
162 |     verified?: boolean;
163 |     relevanceScore: number;
164 |   }>;
165 |   totalResults: number;
166 | }
167 | ```
168 | 
169 | ### Marketplace Integration
170 | 
171 | #### `GET /api/set/[setId]`
172 | **Purpose**: Fetch Pokemon TCG set data with caching
173 | 
174 | **Functionality:**
175 | - Retrieves complete set information
176 | - Includes all cards in the set with metadata
177 | - Caches set data permanently (sets rarely change)
178 | - Provides fallback for missing set data
179 | 
180 | **Response:**
181 | ```typescript
182 | {
183 |   success: boolean;
184 |   setData?: {
185 |     id: string;
186 |     name: string;
187 |     series: string;
188 |     releaseDate: string;
189 |     cardCount: number;
190 |     cards: Card[];
191 |   };
192 |   cached?: boolean;
193 | }
194 | ```
195 | 
196 | #### `GET /api/card/[cardId]/listings`
197 | **Purpose**: Get real-time marketplace listings for cards
198 | 
199 | **Functionality:**
200 | - Fetches current marketplace listings from rip.fun
201 | - Returns pricing information and availability
202 | - Includes buy now and make offer options
203 | - Caches listing data briefly (5-minute TTL)
204 | 
205 | **Response:**
206 | ```typescript
207 | {
208 |   success: boolean;
209 |   listings?: Array<{
210 |     listingId: string;
211 |     price: number;
212 |     currency: string;
213 |     seller: string;
214 |     condition?: string;
215 |     available: boolean;
216 |   }>;
217 |   lowestPrice?: number;
218 |   hasListings: boolean;
219 | }
220 | ```
221 | 
222 | ### Trade Analysis
223 | 
224 | #### `POST /api/trade-compare` ⭐ **Refactored**
225 | **Purpose**: Compare two user profiles for trade opportunities
226 | 
227 | **Functionality:**
228 | - Analyzes card collections between two users
229 | - Identifies trade opportunities and matches
230 | - Calculates trade value and fairness
231 | - Uses centralized `tradeAnalyzer.ts` service (post-refactoring)
232 | 
233 | **Request Body:**
234 | ```typescript
235 | {
236 |   userAId: string;
237 |   userBId: string;
238 |   tradePreferences?: {
239 |     maxValueDifference?: number;
240 |     preferredRarities?: string[];
241 |     excludeSets?: string[];
242 |   };
243 | }
244 | ```
245 | 
246 | **Response:**
247 | ```typescript
248 | {
249 |   success: boolean;
250 |   analysis?: {
251 |     userA: UserProfile;
252 |     userB: UserProfile;
253 |     tradeOpportunities: TradeOpportunity[];
254 |     summary: TradeSummary;
255 |   };
256 | }
257 | ```
258 | 
259 | **Refactoring Impact:**
260 | - **Reduced endpoint complexity** from 200+ lines to 50 lines
261 | - **Centralized trade logic** in `tradeAnalyzer.ts`
262 | - **Eliminated duplicate code** between GET/POST handlers
263 | - **Improved maintainability** and testability
264 | 
265 | ### Legacy Profile Management
266 | 
267 | #### `GET /api/profiles`
268 | **Purpose**: List all stored profiles (legacy feature)
269 | 
270 | #### `POST /api/profiles` 
271 | **Purpose**: Create new profile (legacy feature)
272 | 
273 | #### `GET /api/profiles/[id]`
274 | **Purpose**: Get specific profile (legacy feature)
275 | 
276 | #### `PUT /api/profiles/[id]`
277 | **Purpose**: Update profile (legacy feature)
278 | 
279 | #### `DELETE /api/profiles/[id]`
280 | **Purpose**: Delete profile (legacy feature)
281 | 
282 | #### `POST /api/compare`
283 | **Purpose**: Compare profiles (legacy feature)
284 | 
285 | *Note: These endpoints are maintained for backwards compatibility but are being phased out in favor of the new extraction and blockchain integration system.*
286 | 
287 | ### Debug & Development
288 | 
289 | #### `GET /api/debug-cards`
290 | **Purpose**: Debug endpoint for card data analysis (development only)
291 | 
292 | **Functionality:**
293 | - Provides detailed card data structure analysis
294 | - Shows data quality metrics and validation results
295 | - Includes cache status and performance metrics
296 | - Only available in development environment
297 | 
298 | ## 🔧 API Development Patterns
299 | 
300 | ### Error Handling
301 | All endpoints follow consistent error handling:
302 | ```typescript
303 | import { json } from '@sveltejs/kit';
304 | 
305 | export async function POST({ request }) {
306 |   try {
307 |     const body = await request.json();
308 |     
309 |     // Validate input
310 |     if (!body.requiredField) {
311 |       return json({ success: false, error: 'Missing required field' }, { status: 400 });
312 |     }
313 |     
314 |     // Process request
315 |     const result = await serviceFunction(body);
316 |     
317 |     return json({ success: true, data: result });
318 |   } catch (error) {
319 |     console.error('API Error:', error);
320 |     return json({ 
321 |       success: false, 
322 |       error: 'Internal server error' 
323 |     }, { status: 500 });
324 |   }
325 | }
326 | ```
327 | 
328 | ### Request Validation
329 | Input validation using TypeScript and runtime checks:
330 | ```typescript
331 | import { z } from 'zod';
332 | 
333 | const requestSchema = z.object({
334 |   userIdOrUsername: z.string().min(1),
335 |   skipCache: z.boolean().optional()
336 | });
337 | 
338 | export async function POST({ request }) {
339 |   try {
340 |     const body = await request.json();
341 |     const validated = requestSchema.parse(body);
342 |     
343 |     // Process validated data
344 |   } catch (error) {
345 |     if (error instanceof z.ZodError) {
346 |       return json({ 
347 |         success: false, 
348 |         error: 'Invalid request data',
349 |         details: error.errors 
350 |       }, { status: 400 });
351 |     }
352 |   }
353 | }
354 | ```
355 | 
356 | ### Service Integration
357 | APIs integrate with service layer:
358 | ```typescript
359 | import { fetchWithRetries } from '$lib/server/services/fetcher.js';
360 | import { parseProfileData } from '$lib/server/services/parser.js';
361 | import { normalizeProfile } from '$lib/server/services/normalizer.js';
362 | 
363 | export async function POST({ request }) {
364 |   try {
365 |     // Chain services together
366 |     const html = await fetchWithRetries(url);
367 |     const rawData = await parseProfileData(html);
368 |     const normalized = await normalizeProfile(rawData);
369 |     
370 |     return json({ success: true, data: normalized });
371 |   } catch (error) {
372 |     // Handle service errors
373 |   }
374 | }
375 | ```
376 | 
377 | ### Caching Strategy
378 | APIs implement appropriate caching:
379 | ```typescript
380 | import { getCachedUserData, setCachedUserData } from '$lib/utils/cacheUtils.js';
381 | 
382 | export async function GET({ params }) {
383 |   const { userId } = params;
384 |   
385 |   // Check cache first
386 |   const cached = getCachedUserData(userId);
387 |   if (cached) {
388 |     return json({ success: true, data: cached.data, cached: true });
389 |   }
390 |   
391 |   // Fetch fresh data
392 |   const freshData = await fetchData(userId);
393 |   
394 |   // Cache for future requests
395 |   setCachedUserData(userId, freshData, 15);
396 |   
397 |   return json({ success: true, data: freshData, cached: false });
398 | }
399 | ```
400 | 
401 | ## 📊 Performance Considerations
402 | 
403 | ### Rate Limiting
404 | - Implement rate limiting for external API calls
405 | - Use exponential backoff for retry logic
406 | - Cache frequently requested data
407 | - Batch operations where possible
408 | 
409 | ### Database Optimization
410 | - Use database indexes for search operations
411 | - Implement connection pooling
412 | - Use prepared statements for repeated queries
413 | - Monitor query performance
414 | 
415 | ### Response Optimization
416 | - Minimize response payload sizes
417 | - Use compression for large responses
418 | - Implement proper HTTP caching headers
419 | - Return only necessary data fields
420 | 
421 | ## 🚀 Adding New Endpoints
422 | 
423 | When creating new API endpoints:
424 | 
425 | 1. **Follow RESTful conventions** for URL structure and HTTP methods
426 | 2. **Include comprehensive error handling** with appropriate status codes
427 | 3. **Validate all input data** using TypeScript and runtime validation
428 | 4. **Integrate with service layer** rather than implementing logic directly
429 | 5. **Include proper TypeScript types** for requests and responses
430 | 6. **Consider caching strategy** for performance optimization
431 | 7. **Add appropriate logging** for debugging and monitoring
432 | 8. **Test thoroughly** including error conditions and edge cases
433 | 
434 | ### Example New Endpoint Structure
435 | ```typescript
436 | import { json } from '@sveltejs/kit';
437 | import type { RequestHandler } from './$types';
438 | 
439 | export const POST: RequestHandler = async ({ request }) => {
440 |   try {
441 |     // Parse and validate request
442 |     const body = await request.json();
443 |     
444 |     // Input validation
445 |     if (!body.requiredField) {
446 |       return json({ 
447 |         success: false, 
448 |         error: 'Missing required field' 
449 |       }, { status: 400 });
450 |     }
451 |     
452 |     // Business logic via service
453 |     const result = await serviceFunction(body);
454 |     
455 |     // Success response
456 |     return json({ success: true, data: result });
457 |     
458 |   } catch (error) {
459 |     console.error('API endpoint error:', error);
460 |     return json({ 
461 |       success: false, 
462 |       error: 'Internal server error' 
463 |     }, { status: 500 });
464 |   }
465 | };
466 | 
467 | // TypeScript interfaces
468 | interface RequestBody {
469 |   requiredField: string;
470 |   optionalField?: number;
471 | }
472 | 
473 | interface ResponseData {
474 |   success: boolean;
475 |   data?: any;
476 |   error?: string;
477 | }
478 | ```
479 | 
480 | ## 📈 Refactoring Benefits
481 | 
482 | The API refactoring provides:
483 | - **Consistent error handling** across all endpoints
484 | - **Centralized business logic** in service layer
485 | - **Improved maintainability** with clear separation of concerns
486 | - **Better performance** through intelligent caching
487 | - **Enhanced type safety** with comprehensive TypeScript
488 | - **Reduced code duplication** through shared utilities


--------------------------------------------------------------------------------
/src/routes/api/card/[cardId]/listings/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import type { RequestHandler } from './$types';
 3 | 
 4 | export const GET: RequestHandler = async ({ params }) => {
 5 |   const { cardId } = params;
 6 |   
 7 |   if (!cardId) {
 8 |     return json({ error: 'Card ID is required' }, { status: 400 });
 9 |   }
10 | 
11 |   try {
12 |     // Fetch listing data from rip.fun API
13 |     const response = await fetch(
14 |       `https://www.rip.fun/api/card/${cardId}/listings`,
15 |       {
16 |         headers: {
17 |           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
18 |           'Accept': 'application/json',
19 |           'Referer': 'https://www.rip.fun/'
20 |         }
21 |       }
22 |     );
23 | 
24 |     if (!response.ok) {
25 |       throw new Error(`rip.fun API returned ${response.status}: ${response.statusText}`);
26 |     }
27 | 
28 |     const data = await response.json();
29 |     
30 |     return json(data);
31 |   } catch (error) {
32 |     console.error(`Error fetching card ${cardId} listings:`, error);
33 |     
34 |     return json(
35 |       { 
36 |         error: 'Failed to fetch card listings',
37 |         details: error instanceof Error ? error.message : 'Unknown error'
38 |       }, 
39 |       { status: 500 }
40 |     );
41 |   }
42 | };


--------------------------------------------------------------------------------
/src/routes/api/compare/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import { getProfile } from '$lib/server/db/profiles.js';
 3 | import { fetchHTML } from '$lib/server/services/fetcher.js';
 4 | import { extractSvelteKitData, sanitizeExtractedData } from '$lib/server/services/parser.js';
 5 | import { normalizeData } from '$lib/server/services/normalizer.js';
 6 | import { compareProfileWithExtracted } from '$lib/server/services/comparator.js';
 7 | import { prisma } from '$lib/server/db/client.js';
 8 | import type { RequestHandler } from './$types.js';
 9 | 
10 | export const POST: RequestHandler = async ({ request }) => {
11 |   try {
12 |     const { profileId, targetUrl } = await request.json();
13 |     
14 |     if (!profileId || !targetUrl) {
15 |       return json({ error: 'Profile ID and target URL are required' }, { status: 400 });
16 |     }
17 |     
18 |     const profile = await getProfile(profileId);
19 |     if (!profile) {
20 |       return json({ error: 'Profile not found' }, { status: 404 });
21 |     }
22 |     
23 |     const html = await fetchHTML(targetUrl);
24 |     const extractedRaw = extractSvelteKitData(html);
25 |     const extractedClean = sanitizeExtractedData(extractedRaw);
26 |     const extractedNormalized = normalizeData(extractedClean);
27 |     
28 |     const profileData = {
29 |       id: profile.id,
30 |       name: profile.name,
31 |       bio: profile.bio || undefined,
32 |       website: profile.website || undefined,
33 |       twitter: profile.twitter || undefined,
34 |       github: profile.github || undefined,
35 |       linkedin: profile.linkedin || undefined,
36 |       wallet: profile.wallet || undefined,
37 |       email: profile.email || undefined,
38 |       location: profile.location || undefined,
39 |       avatar: profile.avatar || undefined,
40 |     };
41 |     
42 |     const comparisonResult = compareProfileWithExtracted(profileData, extractedNormalized);
43 |     
44 |     const comparison = await prisma.comparison.create({
45 |       data: {
46 |         profileId,
47 |         targetUrl,
48 |         extractedData: JSON.stringify(extractedNormalized),
49 |         differences: JSON.stringify(comparisonResult),
50 |       },
51 |     });
52 |     
53 |     return json({
54 |       comparison: comparisonResult,
55 |       extractedData: extractedNormalized,
56 |       comparisonId: comparison.id
57 |     });
58 |     
59 |   } catch (error) {
60 |     console.error('Comparison failed:', error);
61 |     const message = error instanceof Error ? error.message : 'Unknown error occurred';
62 |     return json({ error: `Comparison failed: ${message}` }, { status: 500 });
63 |   }
64 | };


--------------------------------------------------------------------------------
/src/routes/api/debug-cards/+server.ts:
--------------------------------------------------------------------------------
  1 | import { json } from '@sveltejs/kit';
  2 | import { extractFromRipFunAPI } from '$lib/server/services/parser.js';
  3 | import { userSyncService } from '$lib/server/services/userSync.js';
  4 | import type { RequestHandler } from './$types.js';
  5 | 
  6 | async function getCardSample(username: string) {
  7 |   // Try to resolve username
  8 |   let resolvedUserId: number | null = null;
  9 |   const isNumericId = /^\d+$/.test(username);
 10 |   
 11 |   if (!isNumericId) {
 12 |     try {
 13 |       const userData = await userSyncService.getUserByUsername(username);
 14 |       if (userData) {
 15 |         resolvedUserId = userData.id;
 16 |       }
 17 |     } catch (error) {
 18 |       console.warn(`Username resolution failed for ${username}`);
 19 |     }
 20 |   } else {
 21 |     resolvedUserId = parseInt(username);
 22 |   }
 23 |   
 24 |   const extractionTarget = resolvedUserId ? resolvedUserId.toString() : username;
 25 |   const extractedData = await extractFromRipFunAPI(extractionTarget);
 26 |   
 27 |   const cards = extractedData.profile?.digital_cards || [];
 28 |   
 29 |   return {
 30 |     username,
 31 |     totalCards: cards.length,
 32 |     cardSample: cards.slice(0, 3).map(card => {
 33 |       // Debug the nested structure
 34 |       const cardInfo = card.card || card;
 35 |       const setInfo = card.set || cardInfo.set || {};
 36 |       
 37 |       console.log('Card ID:', card.id);
 38 |       console.log('Card nested keys:', Object.keys(cardInfo));
 39 |       console.log('Set nested keys:', Object.keys(setInfo));
 40 |       console.log('Card info sample:', {
 41 |         card_name: cardInfo.name,
 42 |         card_number: cardInfo.card_number,
 43 |         set_id: setInfo.id,
 44 |         set_name: setInfo.name
 45 |       });
 46 |       
 47 |       const setId = setInfo.id || cardInfo.set_id || card.set_id;
 48 |       const cardNumber = cardInfo.card_number || card.card_number;
 49 |       
 50 |       return {
 51 |         name: cardInfo.name || card.name,
 52 |         set_id: setId,
 53 |         card_number: cardNumber,
 54 |         rarity: cardInfo.rarity || card.rarity,
 55 |         id: card.id,
 56 |         key: setId && cardNumber ? `${setId}_${cardNumber}` : `card_${card.id}`,
 57 |         rawCard: {
 58 |           hasCard: !!card.card,
 59 |           hasSet: !!card.set,
 60 |           cardKeys: card.card ? Object.keys(card.card) : [],
 61 |           setKeys: card.set ? Object.keys(card.set) : []
 62 |         }
 63 |       };
 64 |     })
 65 |   };
 66 | }
 67 | 
 68 | export const GET: RequestHandler = async ({ url }) => {
 69 |   try {
 70 |     const userA = url.searchParams.get('userA') || 'tk_';
 71 |     const userB = url.searchParams.get('userB') || 'cryptondee';
 72 |     
 73 |     const [dataA, dataB] = await Promise.all([
 74 |       getCardSample(userA),
 75 |       getCardSample(userB)
 76 |     ]);
 77 |     
 78 |     // Find some basic overlaps
 79 |     const keysA = new Set(dataA.cardSample.map(c => c.key));
 80 |     const keysB = new Set(dataB.cardSample.map(c => c.key));
 81 |     
 82 |     const overlap = dataA.cardSample.filter(card => keysB.has(card.key));
 83 |     const onlyA = dataA.cardSample.filter(card => !keysB.has(card.key));
 84 |     const onlyB = dataB.cardSample.filter(card => !keysA.has(card.key));
 85 |     
 86 |     return json({
 87 |       userA: dataA,
 88 |       userB: dataB,
 89 |       analysis: {
 90 |         overlap: overlap.length,
 91 |         onlyA: onlyA.length,
 92 |         onlyB: onlyB.length,
 93 |         overlapCards: overlap,
 94 |         onlyACards: onlyA.slice(0, 3),
 95 |         onlyBCards: onlyB.slice(0, 3)
 96 |       }
 97 |     });
 98 |     
 99 |   } catch (error) {
100 |     return json({ 
101 |       error: error instanceof Error ? error.message : 'Unknown error' 
102 |     }, { status: 500 });
103 |   }
104 | };


--------------------------------------------------------------------------------
/src/routes/api/extract/+server.ts:
--------------------------------------------------------------------------------
  1 | import { json } from '@sveltejs/kit';
  2 | import { fetchHTML } from '$lib/server/services/fetcher.js';
  3 | import { extractSvelteKitData, sanitizeExtractedData, extractFromRipFunAPI } from '$lib/server/services/parser.js';
  4 | import { cleanRipFunData, optimizeExtractedData } from '$lib/server/services/normalizer.js';
  5 | import { userSyncService } from '$lib/server/services/userSync.js';
  6 | import { redisCache, CacheKeys } from '$lib/server/redis/client.js';
  7 | import type { RequestHandler } from './$types.js';
  8 | 
  9 | export const POST: RequestHandler = async ({ request }) => {
 10 |   try {
 11 |     const { username, method = 'auto', forceRefresh = false } = await request.json();
 12 |     
 13 |     if (!username) {
 14 |       return json({ error: 'Username is required' }, { status: 400 });
 15 |     }
 16 |     
 17 |     const trimmedInput = username.trim();
 18 |     
 19 |     // Check Redis cache first (unless force refresh requested)
 20 |     if (!forceRefresh) {
 21 |       const cacheKey = CacheKeys.extraction(trimmedInput);
 22 |       const cachedResult = await redisCache.get(cacheKey);
 23 |       
 24 |       if (cachedResult) {
 25 |         console.log(`🔴 Cache HIT for extraction: ${trimmedInput}`);
 26 |         return json({
 27 |           ...cachedResult,
 28 |           cached: true,
 29 |           timestamp: new Date().toISOString()
 30 |         });
 31 |       }
 32 |       
 33 |       console.log(`🔴 Cache MISS for extraction: ${trimmedInput}`);
 34 |     } else {
 35 |       console.log(`🔴 Cache SKIP (force refresh) for extraction: ${trimmedInput}`);
 36 |     }
 37 |     let resolvedUsername = trimmedInput;
 38 |     let resolvedUserId: number | null = null;
 39 |     let resolutionMethod = 'direct';
 40 |     
 41 |     // Check if input is a number (user ID) or username
 42 |     const isNumericId = /^\d+$/.test(trimmedInput);
 43 |     
 44 |     if (!isNumericId) {
 45 |       // Input appears to be a username, try to resolve it to user ID
 46 |       try {
 47 |         console.log(`Attempting to resolve username: ${trimmedInput}`);
 48 |         const userData = await userSyncService.getUserByUsername(trimmedInput);
 49 |         
 50 |         if (userData) {
 51 |           resolvedUserId = userData.id;
 52 |           resolvedUsername = userData.username;
 53 |           resolutionMethod = 'database';
 54 |           console.log(`Username resolved: ${trimmedInput} -> ID: ${resolvedUserId}`);
 55 |         } else {
 56 |           console.log(`Username not found in database: ${trimmedInput}, using as direct username`);
 57 |           // Will use input directly as rip.fun username
 58 |         }
 59 |       } catch (error) {
 60 |         console.warn(`Username resolution failed for ${trimmedInput}:`, error);
 61 |         // Continue with direct username approach
 62 |       }
 63 |     } else {
 64 |       // Input is numeric, treat as user ID
 65 |       resolvedUserId = parseInt(trimmedInput);
 66 |       resolutionMethod = 'numeric';
 67 |       console.log(`Using numeric input as user ID: ${resolvedUserId}`);
 68 |     }
 69 |     
 70 |     const targetUrl = `https://www.rip.fun/profile/${resolvedUsername}`;
 71 |     let extractedData;
 72 |     let extractionMethod = 'unknown';
 73 |     let apiCallsMade = 0;
 74 |     
 75 |     // Try API extraction first (preferred method for complete data)
 76 |     if (method === 'auto' || method === 'api') {
 77 |       try {
 78 |         console.log(`Attempting API extraction for user: ${resolvedUsername} (ID: ${resolvedUserId || 'unknown'})`);
 79 |         // Use resolvedUserId if available, otherwise fall back to resolvedUsername (for numeric inputs)
 80 |         const extractionTarget = resolvedUserId ? resolvedUserId.toString() : resolvedUsername;
 81 |         const rawExtractedData = await extractFromRipFunAPI(extractionTarget);
 82 |         extractedData = optimizeExtractedData(rawExtractedData);
 83 |         extractionMethod = 'api';
 84 |         apiCallsMade = rawExtractedData.api_calls_made || 0;
 85 |         
 86 |         const cardCount = extractedData.profile?.digital_cards?.length || 0;
 87 |         console.log(`API extraction successful: ${cardCount} cards`);
 88 |         
 89 |         // If API returns no cards, fall back to HTML parsing to get complete collection
 90 |         if (cardCount === 0 && method === 'auto') {
 91 |           console.log('API returned no cards, falling back to HTML parsing for complete collection');
 92 |           extractedData = null; // Reset to trigger fallback
 93 |         }
 94 |       } catch (apiError) {
 95 |         console.warn('API extraction failed, falling back to HTML parsing:', apiError);
 96 |         
 97 |         // If method is specifically 'api', don't fall back
 98 |         if (method === 'api') {
 99 |           throw apiError;
100 |         }
101 |       }
102 |     }
103 |     
104 |     // Fall back to HTML parsing if API extraction failed or wasn't attempted
105 |     if (!extractedData && (method === 'auto' || method === 'html')) {
106 |       try {
107 |         console.log(`Attempting HTML extraction for user: ${resolvedUsername} (ID: ${resolvedUserId || 'unknown'})`);
108 |         
109 |         // Use longer timeouts for rip.fun profiles which can be data-heavy
110 |         const html = await fetchHTML(targetUrl, {
111 |           maxRetries: 3,
112 |           initialTimeout: 20000, // 20 seconds initial
113 |           maxTimeout: 60000, // Maximum 60 seconds
114 |           retryDelay: 2000 // 2 second base delay
115 |         });
116 |         
117 |         const extractedRaw = extractSvelteKitData(html);
118 |         const extractedClean = sanitizeExtractedData(extractedRaw);
119 |         const extractedFiltered = cleanRipFunData(extractedClean);
120 |         const extractedOptimized = optimizeExtractedData(extractedFiltered);
121 |         
122 |         extractedData = extractedOptimized;
123 |         extractionMethod = 'html';
124 |         
125 |         console.log(`HTML extraction successful: ${extractedData.profile?.digital_cards?.length || 0} cards`);
126 |       } catch (htmlError) {
127 |         console.error('HTML extraction also failed:', htmlError);
128 |         throw htmlError;
129 |       }
130 |     }
131 |     
132 |     if (!extractedData) {
133 |       throw new Error('No extraction method succeeded');
134 |     }
135 |     
136 |     // Prepare response data
137 |     const responseData = {
138 |       username: resolvedUsername,
139 |       originalInput: trimmedInput,
140 |       resolvedUserId,
141 |       resolutionMethod,
142 |       targetUrl,
143 |       extractedData,
144 |       extractionMethod,
145 |       apiCallsMade,
146 |       timestamp: new Date().toISOString()
147 |     };
148 |     
149 |     // Cache successful extraction for 1 hour (3600 seconds)
150 |     try {
151 |       const cacheKey = CacheKeys.extraction(trimmedInput);
152 |       await redisCache.set(cacheKey, responseData, 3600);
153 |       console.log(`🔴 Cache STORED for extraction: ${trimmedInput}`);
154 |     } catch (cacheError) {
155 |       // Don't fail the request if caching fails
156 |       console.warn('Failed to cache extraction result:', cacheError);
157 |     }
158 |     
159 |     return json({
160 |       ...responseData,
161 |       cached: false
162 |     });
163 |     
164 |   } catch (error) {
165 |     console.error('Extraction failed:', error);
166 |     const message = error instanceof Error ? error.message : 'Unknown error occurred';
167 |     return json({ error: `Extraction failed: ${message}` }, { status: 500 });
168 |   }
169 | };


--------------------------------------------------------------------------------
/src/routes/api/profiles/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import { createProfile, getAllProfiles } from '$lib/server/db/profiles.js';
 3 | import type { RequestHandler } from './$types.js';
 4 | 
 5 | export const GET: RequestHandler = async () => {
 6 |   try {
 7 |     const profiles = await getAllProfiles();
 8 |     return json(profiles);
 9 |   } catch (error) {
10 |     console.error('Failed to fetch profiles:', error);
11 |     return json({ error: 'Failed to fetch profiles' }, { status: 500 });
12 |   }
13 | };
14 | 
15 | export const POST: RequestHandler = async ({ request }) => {
16 |   try {
17 |     const data = await request.json();
18 |     
19 |     if (!data.name) {
20 |       return json({ error: 'Name is required' }, { status: 400 });
21 |     }
22 |     
23 |     const profile = await createProfile(data);
24 |     return json(profile, { status: 201 });
25 |   } catch (error) {
26 |     console.error('Failed to create profile:', error);
27 |     return json({ error: 'Failed to create profile' }, { status: 500 });
28 |   }
29 | };


--------------------------------------------------------------------------------
/src/routes/api/profiles/[id]/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import { getProfile, updateProfile, deleteProfile } from '$lib/server/db/profiles.js';
 3 | import type { RequestHandler } from './$types.js';
 4 | 
 5 | export const GET: RequestHandler = async ({ params }) => {
 6 |   try {
 7 |     const profile = await getProfile(params.id);
 8 |     
 9 |     if (!profile) {
10 |       return json({ error: 'Profile not found' }, { status: 404 });
11 |     }
12 |     
13 |     return json(profile);
14 |   } catch (error) {
15 |     console.error('Failed to fetch profile:', error);
16 |     return json({ error: 'Failed to fetch profile' }, { status: 500 });
17 |   }
18 | };
19 | 
20 | export const PUT: RequestHandler = async ({ params, request }) => {
21 |   try {
22 |     const data = await request.json();
23 |     const profile = await updateProfile(params.id, data);
24 |     return json(profile);
25 |   } catch (error) {
26 |     console.error('Failed to update profile:', error);
27 |     return json({ error: 'Failed to update profile' }, { status: 500 });
28 |   }
29 | };
30 | 
31 | export const DELETE: RequestHandler = async ({ params }) => {
32 |   try {
33 |     await deleteProfile(params.id);
34 |     return json({ success: true });
35 |   } catch (error) {
36 |     console.error('Failed to delete profile:', error);
37 |     return json({ error: 'Failed to delete profile' }, { status: 500 });
38 |   }
39 | };


--------------------------------------------------------------------------------
/src/routes/api/redis-debug/+server.ts:
--------------------------------------------------------------------------------
  1 | import { json } from '@sveltejs/kit';
  2 | import { redisCache } from '$lib/server/redis/client.js';
  3 | import type { RequestHandler } from './$types';
  4 | 
  5 | export const GET: RequestHandler = async ({ url }) => {
  6 |   try {
  7 |     const action = url.searchParams.get('action') || 'stats';
  8 |     
  9 |     if (action === 'keys') {
 10 |       // For mock Redis, we can't list all keys easily
 11 |       // So we'll check common patterns
 12 |       const commonKeys = [
 13 |         'test:redis:connection',
 14 |         'test:redis:counter',
 15 |         'rip:set:sv3pt5',
 16 |         'rip:set:sv1-151', 
 17 |         'rip:set:sv2-151',
 18 |         'rip:extract:testuser123'
 19 |       ];
 20 |       
 21 |       const keyData: any = {};
 22 |       for (const key of commonKeys) {
 23 |         const exists = await redisCache.exists(key);
 24 |         if (exists) {
 25 |           const value = await redisCache.get(key);
 26 |           keyData[key] = {
 27 |             exists: true,
 28 |             data: value,
 29 |             dataType: typeof value,
 30 |             size: JSON.stringify(value).length
 31 |           };
 32 |         } else {
 33 |           keyData[key] = { exists: false };
 34 |         }
 35 |       }
 36 |       
 37 |       return json({
 38 |         success: true,
 39 |         action: 'keys',
 40 |         keys: keyData,
 41 |         timestamp: new Date().toISOString()
 42 |       });
 43 |     }
 44 |     
 45 |     if (action === 'get') {
 46 |       const key = url.searchParams.get('key');
 47 |       if (!key) {
 48 |         return json({ error: 'Key parameter required' }, { status: 400 });
 49 |       }
 50 |       
 51 |       const exists = await redisCache.exists(key);
 52 |       const value = exists ? await redisCache.get(key) : null;
 53 |       
 54 |       return json({
 55 |         success: true,
 56 |         action: 'get',
 57 |         key,
 58 |         exists,
 59 |         value,
 60 |         valueType: typeof value,
 61 |         size: value ? JSON.stringify(value).length : 0,
 62 |         timestamp: new Date().toISOString()
 63 |       });
 64 |     }
 65 |     
 66 |     if (action === 'stats') {
 67 |       // Get health and basic stats
 68 |       const ping = await redisCache.ping();
 69 |       
 70 |       return json({
 71 |         success: true,
 72 |         action: 'stats',
 73 |         redis_healthy: ping,
 74 |         available_actions: [
 75 |           'stats - Show Redis health',
 76 |           'keys - Show common cached keys', 
 77 |           'get?key=<key> - Get specific key value'
 78 |         ],
 79 |         common_cache_keys: [
 80 |           'rip:set:sv3pt5 - Pokemon set data',
 81 |           'rip:extract:username - User extraction data',
 82 |           'test:redis:connection - Test data',
 83 |           'test:redis:counter - Test counter'
 84 |         ],
 85 |         timestamp: new Date().toISOString()
 86 |       });
 87 |     }
 88 |     
 89 |     return json({ error: 'Unknown action' }, { status: 400 });
 90 |     
 91 |   } catch (error) {
 92 |     console.error('Redis debug error:', error);
 93 |     return json({
 94 |       success: false,
 95 |       error: error instanceof Error ? error.message : 'Unknown error'
 96 |     }, { status: 500 });
 97 |   }
 98 | };
 99 | 
100 | export const POST: RequestHandler = async ({ request }) => {
101 |   try {
102 |     const { action, key, value, ttl } = await request.json();
103 |     
104 |     if (action === 'set') {
105 |       if (!key || !value) {
106 |         return json({ error: 'Key and value required' }, { status: 400 });
107 |       }
108 |       
109 |       const result = await redisCache.set(key, value, ttl);
110 |       return json({
111 |         success: true,
112 |         action: 'set',
113 |         key,
114 |         stored: result,
115 |         timestamp: new Date().toISOString()
116 |       });
117 |     }
118 |     
119 |     if (action === 'del') {
120 |       if (!key) {
121 |         return json({ error: 'Key required' }, { status: 400 });
122 |       }
123 |       
124 |       const result = await redisCache.del(key);
125 |       return json({
126 |         success: true,
127 |         action: 'delete',
128 |         key,
129 |         deleted: result,
130 |         timestamp: new Date().toISOString()
131 |       });
132 |     }
133 |     
134 |     return json({ error: 'Unknown action' }, { status: 400 });
135 |     
136 |   } catch (error) {
137 |     return json({
138 |       success: false,
139 |       error: error instanceof Error ? error.message : 'Unknown error'
140 |     }, { status: 500 });
141 |   }
142 | };


--------------------------------------------------------------------------------
/src/routes/api/redis-test/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import { redisCache } from '$lib/server/redis/client.js';
 3 | import type { RequestHandler } from './$types';
 4 | 
 5 | export const GET: RequestHandler = async () => {
 6 |   try {
 7 |     // Test Redis connection and basic operations
 8 |     const testKey = 'test:redis:connection';
 9 |     const testValue = { 
10 |       message: 'Hello Redis!', 
11 |       timestamp: new Date().toISOString() 
12 |     };
13 | 
14 |     // Test SET operation
15 |     const setResult = await redisCache.set(testKey, testValue, 60); // 1 minute TTL
16 |     
17 |     // Test GET operation
18 |     const getValue = await redisCache.get(testKey);
19 |     
20 |     // Test EXISTS operation
21 |     const exists = await redisCache.exists(testKey);
22 |     
23 |     // Test PING operation
24 |     const pingResult = await redisCache.ping();
25 |     
26 |     // Test INCREMENT operation
27 |     const incrKey = 'test:redis:counter';
28 |     const counterValue = await redisCache.incr(incrKey, 60);
29 |     
30 |     return json({
31 |       success: true,
32 |       redis_status: 'connected',
33 |       tests: {
34 |         set: setResult,
35 |         get: getValue,
36 |         exists: exists,
37 |         ping: pingResult,
38 |         increment: counterValue
39 |       },
40 |       message: 'Redis is working correctly!'
41 |     });
42 |     
43 |   } catch (error) {
44 |     console.error('Redis test failed:', error);
45 |     
46 |     return json({
47 |       success: false,
48 |       redis_status: 'error',
49 |       error: error instanceof Error ? error.message : 'Unknown error',
50 |       message: 'Redis test failed - check logs for details'
51 |     }, { status: 500 });
52 |   }
53 | };
54 | 
55 | export const POST: RequestHandler = async ({ request }) => {
56 |   try {
57 |     const { action } = await request.json();
58 |     
59 |     if (action === 'clear_test_keys') {
60 |       // Clear test keys
61 |       await redisCache.del('test:redis:connection');
62 |       await redisCache.del('test:redis:counter');
63 |       
64 |       return json({
65 |         success: true,
66 |         message: 'Test keys cleared'
67 |       });
68 |     }
69 |     
70 |     return json({
71 |       success: false,
72 |       message: 'Unknown action'
73 |     }, { status: 400 });
74 |     
75 |   } catch (error) {
76 |     return json({
77 |       success: false,
78 |       error: error instanceof Error ? error.message : 'Unknown error'
79 |     }, { status: 500 });
80 |   }
81 | };


--------------------------------------------------------------------------------
/src/routes/api/resolve-username/[username]/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import type { RequestHandler } from './$types';
 3 | import { userSyncService } from '$lib/server/services/userSync.js';
 4 | 
 5 | export const GET: RequestHandler = async ({ params }) => {
 6 |   const { username } = params;
 7 |   
 8 |   if (!username) {
 9 |     return json({ error: 'Username is required' }, { status: 400 });
10 |   }
11 | 
12 |   try {
13 |     // Try to find user by username
14 |     const user = await userSyncService.getUserByUsername(username);
15 |     
16 |     if (!user) {
17 |       return json(
18 |         { 
19 |           error: 'User not found',
20 |           message: `No user found with username: ${username}. Try running a sync to update the database.`
21 |         }, 
22 |         { status: 404 }
23 |       );
24 |     }
25 | 
26 |     return json({
27 |       id: user.id,
28 |       username: user.username,
29 |       avatar: user.avatar,
30 |       banner: user.banner,
31 |       type: user.type,
32 |       smartWalletAddress: user.smartWalletAddress,
33 |       ownerWalletAddress: user.ownerWalletAddress,
34 |       addresses: user.addresses?.length || 0,
35 |       lastUpdated: user.updatedAt
36 |     });
37 | 
38 |   } catch (error) {
39 |     console.error(`Error resolving username ${username}:`, error);
40 |     
41 |     return json(
42 |       { 
43 |         error: 'Failed to resolve username',
44 |         details: error instanceof Error ? error.message : 'Unknown error'
45 |       }, 
46 |       { status: 500 }
47 |     );
48 |   }
49 | };


--------------------------------------------------------------------------------
/src/routes/api/search-users/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import type { RequestHandler } from './$types';
 3 | import { userSyncService } from '$lib/server/services/userSync.js';
 4 | 
 5 | export const GET: RequestHandler = async ({ url }) => {
 6 |   const query = url.searchParams.get('q');
 7 |   const limitParam = url.searchParams.get('limit');
 8 |   
 9 |   if (!query || query.trim().length < 2) {
10 |     return json({ error: 'Query must be at least 2 characters' }, { status: 400 });
11 |   }
12 | 
13 |   const limit = limitParam ? Math.min(parseInt(limitParam), 50) : 10;
14 | 
15 |   try {
16 |     const users = await userSyncService.searchUsers(query.trim(), limit);
17 |     
18 |     return json({
19 |       query: query.trim(),
20 |       results: users,
21 |       count: users.length
22 |     });
23 | 
24 |   } catch (error) {
25 |     console.error(`Error searching users with query ${query}:`, error);
26 |     
27 |     return json(
28 |       { 
29 |         error: 'Failed to search users',
30 |         details: error instanceof Error ? error.message : 'Unknown error'
31 |       }, 
32 |       { status: 500 }
33 |     );
34 |   }
35 | };


--------------------------------------------------------------------------------
/src/routes/api/set/[setId]/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import { redisCache, CacheKeys } from '$lib/server/redis/client.js';
 3 | import type { RequestHandler } from './$types';
 4 | 
 5 | export const GET: RequestHandler = async ({ params, url }) => {
 6 |   const { setId } = params;
 7 |   
 8 |   if (!setId) {
 9 |     return json({ error: 'Set ID is required' }, { status: 400 });
10 |   }
11 | 
12 |   // Check cache first
13 |   const cacheKey = CacheKeys.setData(setId);
14 |   const cachedData = await redisCache.get(cacheKey);
15 |   
16 |   if (cachedData) {
17 |     console.log(`🔴 Cache HIT for set data: ${setId}`);
18 |     return json({
19 |       ...cachedData,
20 |       cached: true
21 |     });
22 |   }
23 |   
24 |   console.log(`🔴 Cache MISS for set data: ${setId}`);
25 | 
26 |   try {
27 |     // Get query parameters from the request
28 |     const page = url.searchParams.get('page') || '1';
29 |     const limit = url.searchParams.get('limit') || '1000';
30 |     const sort = url.searchParams.get('sort') || 'number-asc';
31 |     const all = url.searchParams.get('all') || 'true';
32 | 
33 |     // Fetch data from rip.fun API
34 |     const response = await fetch(
35 |       `https://www.rip.fun/api/set/${setId}/cards?page=${page}&limit=${limit}&sort=${sort}&all=${all}`,
36 |       {
37 |         headers: {
38 |           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
39 |           'Accept': 'application/json',
40 |           'Referer': 'https://www.rip.fun/'
41 |         }
42 |       }
43 |     );
44 | 
45 |     if (!response.ok) {
46 |       throw new Error(`rip.fun API returned ${response.status}: ${response.statusText}`);
47 |     }
48 | 
49 |     const data = await response.json();
50 |     
51 |     // Remove clip_embedding data to reduce payload size
52 |     if (data.cards && Array.isArray(data.cards)) {
53 |       data.cards = data.cards.map((card: any) => {
54 |         const cleanCard = { ...card };
55 |         delete cleanCard.clip_embedding;
56 |         if (cleanCard.card) {
57 |           delete cleanCard.card.clip_embedding;
58 |         }
59 |         return cleanCard;
60 |       });
61 |     }
62 | 
63 |     // Cache the cleaned data permanently (Pokemon set data is static)
64 |     try {
65 |       await redisCache.set(cacheKey, data); // No TTL = permanent cache
66 |       console.log(`🔴 Cache STORED PERMANENTLY for set data: ${setId}`);
67 |     } catch (cacheError) {
68 |       // Don't fail the request if caching fails
69 |       console.warn('Failed to cache set data:', cacheError);
70 |     }
71 | 
72 |     return json({
73 |       ...data,
74 |       cached: false
75 |     });
76 |   } catch (error) {
77 |     console.error(`Error fetching set ${setId} data:`, error);
78 |     
79 |     return json(
80 |       { 
81 |         error: 'Failed to fetch set data',
82 |         details: error instanceof Error ? error.message : 'Unknown error'
83 |       }, 
84 |       { status: 500 }
85 |     );
86 |   }
87 | };


--------------------------------------------------------------------------------
/src/routes/api/sync-users/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import type { RequestHandler } from './$types';
 3 | import { userSyncService } from '$lib/server/services/userSync.js';
 4 | 
 5 | export const POST: RequestHandler = async ({ url, request }) => {
 6 |   try {
 7 |     // Check if sync is already running
 8 |     const currentStatus = await userSyncService.getSyncStatus();
 9 |     if (currentStatus?.status === 'running') {
10 |       return json(
11 |         { 
12 |           error: 'Sync already in progress',
13 |           status: currentStatus 
14 |         }, 
15 |         { status: 409 }
16 |       );
17 |     }
18 | 
19 |     // Get optional fromBlock parameter
20 |     const body = await request.json().catch(() => ({}));
21 |     const fromBlock = body.fromBlock ? parseInt(body.fromBlock) : undefined;
22 | 
23 |     // Start sync in background (don't await to avoid timeout)
24 |     const syncPromise = userSyncService.syncUsersFromBlockchain(fromBlock);
25 |     
26 |     // Return immediately with accepted status
27 |     return json({
28 |       message: 'User sync started',
29 |       status: 'running',
30 |       fromBlock: fromBlock || 'genesis'
31 |     }, { status: 202 });
32 | 
33 |   } catch (error) {
34 |     console.error('Error starting user sync:', error);
35 |     return json(
36 |       { 
37 |         error: 'Failed to start user sync',
38 |         details: error instanceof Error ? error.message : 'Unknown error'
39 |       }, 
40 |       { status: 500 }
41 |     );
42 |   }
43 | };
44 | 
45 | export const GET: RequestHandler = async () => {
46 |   try {
47 |     // Get current sync status
48 |     const status = await userSyncService.getSyncStatus();
49 |     
50 |     if (!status) {
51 |       return json({
52 |         syncType: 'blockchain_users',
53 |         status: 'never_run',
54 |         lastSyncAt: null,
55 |         lastBlockNumber: null
56 |       });
57 |     }
58 | 
59 |     return json({
60 |       syncType: status.syncType,
61 |       status: status.status,
62 |       lastSyncAt: status.lastSyncAt,
63 |       lastBlockNumber: status.lastBlockNumber?.toString(),
64 |       errorMessage: status.errorMessage
65 |     });
66 | 
67 |   } catch (error) {
68 |     console.error('Error getting sync status:', error);
69 |     return json(
70 |       { 
71 |         error: 'Failed to get sync status',
72 |         details: error instanceof Error ? error.message : 'Unknown error'
73 |       }, 
74 |       { status: 500 }
75 |     );
76 |   }
77 | };


--------------------------------------------------------------------------------
/src/routes/api/trade-compare/+server.ts:
--------------------------------------------------------------------------------
  1 | import { json } from '@sveltejs/kit';
  2 | import { tradeAnalyzer } from '$lib/server/services/tradeAnalyzer.js';
  3 | import type { RequestHandler } from './$types.js';
  4 | 
  5 | // Cache of setId -> Set of standardized card keys (matches TradeAnalyzer key format `card_<id>`)
  6 | const setCardKeyCache: Map<string, Set<string>> = new Map();
  7 | 
  8 | async function extractUserProfile(input: string, request: Request) {
  9 |   console.log(`Extracting profile for: ${input}`);
 10 |   
 11 |   // Get the origin from the request to handle both dev and production
 12 |   const origin = new URL(request.url).origin;
 13 |   const extractUrl = `${origin}/api/extract`;
 14 |   
 15 |   // Use the existing extract API endpoint internally
 16 |   const extractResponse = await fetch(extractUrl, {
 17 |     method: 'POST',
 18 |     headers: {
 19 |       'Content-Type': 'application/json'
 20 |     },
 21 |     body: JSON.stringify({ 
 22 |       username: input,
 23 |       method: 'auto' 
 24 |     })
 25 |   });
 26 |   
 27 |   if (!extractResponse.ok) {
 28 |     throw new Error(`Failed to extract profile for ${input}: ${extractResponse.status}`);
 29 |   }
 30 |   
 31 |   const extractData = await extractResponse.json();
 32 |   
 33 |   console.log(`Profile extracted for ${extractData.username}: ${extractData.extractedData.profile?.digital_cards?.length || 0} cards`);
 34 |   
 35 |   return {
 36 |     username: extractData.username,
 37 |     id: extractData.resolvedUserId,
 38 |     profile: extractData.extractedData.profile,
 39 |     cards: extractData.extractedData.profile?.digital_cards || []
 40 |   };
 41 | }
 42 | 
 43 | // Shared function to perform complete trade analysis for two users
 44 | async function getTradeAnalysisForUsers(userA_input: string, userB_input: string, request: Request) {
 45 |   if (!userA_input || !userB_input) {
 46 |     throw new Error('Both userA and userB are required');
 47 |   }
 48 |   
 49 |   if (userA_input === userB_input) {
 50 |     throw new Error('Cannot compare user with themselves');
 51 |   }
 52 |   
 53 |   console.log(`Starting trade analysis between "${userA_input}" and "${userB_input}"`);
 54 |   
 55 |   // Extract both user profiles in parallel
 56 |   const [profileA, profileB] = await Promise.all([
 57 |     extractUserProfile(userA_input, request),
 58 |     extractUserProfile(userB_input, request)
 59 |   ]);
 60 |   
 61 |   console.log(`Profile extraction complete:`);
 62 |   console.log(`- ${profileA.username} (ID: ${profileA.id}): ${profileA.cards.length} cards`);
 63 |   console.log(`- ${profileB.username} (ID: ${profileB.id}): ${profileB.cards.length} cards`);
 64 |   
 65 |   // Create user collections for trade analysis
 66 |   const collectionA = tradeAnalyzer.createUserCollection(
 67 |     profileA.username, 
 68 |     profileA.id, 
 69 |     profileA.profile, 
 70 |     profileA.cards
 71 |   );
 72 |   
 73 |   const collectionB = tradeAnalyzer.createUserCollection(
 74 |     profileB.username,
 75 |     profileB.id, 
 76 |     profileB.profile,
 77 |     profileB.cards
 78 |   );
 79 |   
 80 |   // Analyze trade opportunities
 81 |   console.log('Analyzing trade opportunities...');
 82 |   const tradeAnalysis = tradeAnalyzer.analyzeTrades(collectionA, collectionB);
 83 |   
 84 |   console.log(`Trade analysis complete:`);
 85 |   console.log(`- Perfect trades: ${tradeAnalysis.summary.totalPerfectTrades}`);
 86 |   console.log(`- ${collectionA.username} can receive: ${tradeAnalysis.summary.totalOneWayToA}`);
 87 |   console.log(`- ${collectionA.username} can give: ${tradeAnalysis.summary.totalOneWayToB}`);
 88 |   console.log(`- Impossible trades: ${tradeAnalysis.summary.totalImpossible}`);
 89 |   
 90 |   // Build lightweight per-user owned counts by set (unique cards only)
 91 |   const ownedBySetA: Record<string, number> = {};
 92 |   for (const card of collectionA.ownedCards.values()) {
 93 |     const sid = card.set_id;
 94 |     if (!sid) continue;
 95 |     ownedBySetA[sid] = (ownedBySetA[sid] || 0) + 1;
 96 |   }
 97 |   const ownedBySetB: Record<string, number> = {};
 98 |   for (const card of collectionB.ownedCards.values()) {
 99 |     const sid = card.set_id;
100 |     if (!sid) continue;
101 |     ownedBySetB[sid] = (ownedBySetB[sid] || 0) + 1;
102 |   }
103 | 
104 |   // Build accurate per-user missing counts by set using official set lists
105 |   const origin = new URL(request.url).origin;
106 | 
107 |   async function getSetKeys(setId: string): Promise<Set<string>> {
108 |     if (setCardKeyCache.has(setId)) return setCardKeyCache.get(setId)!;
109 |     try {
110 |       const res = await fetch(`${origin}/api/set/${setId}`);
111 |       const data = await res.json();
112 |       const keys = new Set<string>();
113 |       const cards = Array.isArray(data?.cards) ? data.cards : [];
114 |       for (const c of cards) {
115 |         const id = c?.card?.id || c?.id;
116 |         if (!id) continue;
117 |         keys.add(`card_${id}`);
118 |       }
119 |       setCardKeyCache.set(setId, keys);
120 |       return keys;
121 |     } catch (e) {
122 |       console.error(`Failed to load set ${setId} for missing calc:`, e);
123 |       const empty = new Set<string>();
124 |       setCardKeyCache.set(setId, empty);
125 |       return empty;
126 |     }
127 |   }
128 | 
129 |   async function computeMissingBySet(collection: typeof collectionA, ownedBySet: Record<string, number>): Promise<Record<string, number>> {
130 |     const result: Record<string, number> = {};
131 |     const setIds = Object.keys(ownedBySet);
132 |     // Preload all
133 |     await Promise.all(setIds.map((sid) => getSetKeys(sid)));
134 |     for (const sid of setIds) {
135 |       const setKeys = await getSetKeys(sid);
136 |       if (setKeys.size === 0) {
137 |         result[sid] = 0;
138 |         continue;
139 |       }
140 |       // Count how many of the set's keys the user already owns
141 |       let ownedInSet = 0;
142 |       for (const key of setKeys) {
143 |         if (collection.ownedCards.has(key)) ownedInSet += 1;
144 |       }
145 |       result[sid] = Math.max(0, setKeys.size - ownedInSet);
146 |     }
147 |     return result;
148 |   }
149 | 
150 |   const [missingBySetA, missingBySetB] = await Promise.all([
151 |     computeMissingBySet(collectionA, ownedBySetA),
152 |     computeMissingBySet(collectionB, ownedBySetB)
153 |   ]);
154 | 
155 |   return {
156 |     tradeAnalysis,
157 |     collectionA,
158 |     collectionB,
159 |     profiles: { profileA, profileB },
160 |     ownedBySetA,
161 |     ownedBySetB,
162 |     missingBySetA,
163 |     missingBySetB
164 |   };
165 | }
166 | 
167 | export const POST: RequestHandler = async ({ request }) => {
168 |   try {
169 |     const { userA, userB } = await request.json();
170 |     
171 |     // Use the shared analysis function
172 |     const { tradeAnalysis, collectionA, collectionB, ownedBySetA, ownedBySetB, missingBySetA, missingBySetB } = await getTradeAnalysisForUsers(userA, userB, request);
173 |     
174 |     // Get available sets for filtering
175 |     const availableSets = tradeAnalyzer.getAvailableSets(collectionA, collectionB);
176 |     
177 |     // Generate recommendations
178 |     const recommendations = tradeAnalyzer.generateTradeRecommendations(tradeAnalysis, collectionA, collectionB);
179 |     
180 |     console.log(`- Available sets: ${availableSets.length}`);
181 |     
182 |     return json({
183 |       success: true,
184 |       userA: {
185 |         username: collectionA.username,
186 |         id: collectionA.id,
187 |         totalCards: collectionA.ownedCards.size,
188 |         profile: collectionA.profile
189 |       },
190 |       userB: {
191 |         username: collectionB.username,
192 |         id: collectionB.id,
193 |         totalCards: collectionB.ownedCards.size,
194 |         profile: collectionB.profile
195 |       },
196 |       tradeAnalysis,
197 |       ownedBySetA,
198 |       ownedBySetB,
199 |       missingBySetA,
200 |       missingBySetB,
201 |       availableSets,
202 |       recommendations,
203 |       timestamp: new Date().toISOString()
204 |     });
205 |     
206 |   } catch (error) {
207 |     console.error('Trade comparison failed:', error);
208 |     return json({ 
209 |       error: 'Trade comparison failed', 
210 |       details: error instanceof Error ? error.message : 'Unknown error' 
211 |     }, { status: 500 });
212 |   }
213 | };
214 | 
215 | export const GET: RequestHandler = async ({ url, request }) => {
216 |   try {
217 |     const userA = url.searchParams.get('userA');
218 |     const userB = url.searchParams.get('userB');
219 |     const setId = url.searchParams.get('set');
220 |     const page = parseInt(url.searchParams.get('page') || '1');
221 |     const limit = parseInt(url.searchParams.get('limit') || '50');
222 |     
223 |     // Use the shared analysis function
224 |     let { tradeAnalysis } = await getTradeAnalysisForUsers(userA!, userB!, request);
225 |     
226 |     // Filter by set if specified
227 |     if (setId && setId !== 'all') {
228 |       tradeAnalysis = tradeAnalyzer.filterBySet(tradeAnalysis, setId);
229 |     }
230 |     
231 |     // Paginate results
232 |     const allTrades = [
233 |       ...tradeAnalysis.perfectTrades,
234 |       ...tradeAnalysis.userACanReceive,
235 |       ...tradeAnalysis.userACanGive
236 |     ];
237 |     
238 |     const startIndex = (page - 1) * limit;
239 |     const endIndex = startIndex + limit;
240 |     const paginatedTrades = allTrades.slice(startIndex, endIndex);
241 |     
242 |     const totalPages = Math.ceil(allTrades.length / limit);
243 |     
244 |     return json({
245 |       success: true,
246 |       trades: paginatedTrades,
247 |       pagination: {
248 |         currentPage: page,
249 |         totalPages,
250 |         totalItems: allTrades.length,
251 |         itemsPerPage: limit,
252 |         hasMore: endIndex < allTrades.length
253 |       },
254 |       summary: tradeAnalysis.summary,
255 |       setFilter: setId || 'all'
256 |     });
257 |     
258 |   } catch (error) {
259 |     console.error('Trade filtering failed:', error);
260 |     return json({ 
261 |       error: 'Trade filtering failed', 
262 |       details: error instanceof Error ? error.message : 'Unknown error' 
263 |     }, { status: 500 });
264 |   }
265 | };


--------------------------------------------------------------------------------
/src/routes/api/warm-cache/+server.ts:
--------------------------------------------------------------------------------
 1 | import { json } from '@sveltejs/kit';
 2 | import type { RequestHandler } from './$types';
 3 | 
 4 | // Simple cache warming endpoint for production
 5 | export const POST: RequestHandler = async () => {
 6 |   try {
 7 |     // Only warm a few essential sets to avoid long response times
 8 |     const essentialSets = ['sv3pt5', 'sv1', 'sv7', 'swsh7', 'cel25'];
 9 |     
10 |     const results = await Promise.all(
11 |       essentialSets.map(async (setId) => {
12 |         try {
13 |           const response = await fetch(`/api/set/${setId}`);
14 |           return { setId, success: response.ok };
15 |         } catch {
16 |           return { setId, success: false };
17 |         }
18 |       })
19 |     );
20 |     
21 |     return json({
22 |       success: true,
23 |       message: 'Essential sets warmed',
24 |       results,
25 |       timestamp: new Date().toISOString()
26 |     });
27 |   } catch (error) {
28 |     return json({
29 |       success: false,
30 |       error: error instanceof Error ? error.message : 'Unknown error'
31 |     }, { status: 500 });
32 |   }
33 | };


--------------------------------------------------------------------------------
/src/routes/extract/+page.svelte:
--------------------------------------------------------------------------------
   1 | <script lang="ts">
   2 |   import * as cacheUtils from '$lib/utils/cacheUtils.js';
   3 |   import CardFilters from '$lib/components/CardFilters.svelte';
   4 |   import CardGrid from '$lib/components/CardGrid.svelte';
   5 |   import CardTable from '$lib/components/CardTable.svelte';
   6 |   import PackManager from '$lib/components/PackManager.svelte';
   7 |   import { getSetNameFromCard } from '$lib/utils/card';
   8 |   import { getMarketValue, getListedPrice } from '$lib/utils/pricing';
   9 | 
  10 |   // Wrapper functions for cache operations with in-memory state management
  11 |   function clearAllSetCaches(): void {
  12 |     // Only clear in-memory cache since Redis handles persistent caching
  13 |     setCardsData = {};
  14 |     console.log('Cleared in-memory set cache');
  15 |   }
  16 | 
  17 |   function clearAllCaches(): void {
  18 |     // Clear user data from localStorage but not set data (handled by Redis)
  19 |     cacheUtils.clearAllCaches();
  20 |     setCardsData = {}; // Clear in-memory set cache too
  21 |     console.log('Cleared all caches');
  22 |   }
  23 | 
  24 |   // Resolve set name with cache fallback and ignore numeric-only names like "151"
  25 |   function resolveSetName(card: any): string {
  26 |     const numericOnly = (s: any) => typeof s === 'string' && /^\d+$/.test(s.trim());
  27 |     const setId = card?.set?.id || card?.card?.set_id || card?.set_id;
  28 |     const primary = getSetNameFromCard(card);
  29 | 
  30 |     // Known mappings for sets where name is provided as a numeric code
  31 |     const knownSetNames: Record<string, string> = {
  32 |       sv3pt5: 'Scarlet & Violet 151'
  33 |     };
  34 |     if (setId && knownSetNames[setId]) return knownSetNames[setId];
  35 | 
  36 |     // If primary is a non-numeric, prefer it
  37 |     if (primary && !numericOnly(primary) && primary !== setId && primary !== 'Unknown Set') return primary;
  38 | 
  39 |     // Prefer cached set metadata name if available
  40 |     const cachedName = setId && (setCardsData?.[setId]?.set?.name || setCardsData?.[setId]?.cards?.[0]?.set?.name);
  41 |     if (cachedName && !numericOnly(cachedName)) return cachedName;
  42 | 
  43 |     // Fall back to top-level digital card set.name if non-numeric
  44 |     const topLevelName = card?.set?.name;
  45 |     if (topLevelName && !numericOnly(topLevelName)) return topLevelName;
  46 | 
  47 |     // Last resort: primary or setId or Unknown
  48 |     return primary && !numericOnly(primary) ? primary : (setId || 'Unknown Set');
  49 |   }
  50 | 
  51 |   // Set name resolution now handled in components via $lib/utils/card.ts
  52 | 
  53 |   let ripUserId = $state('');
  54 |   let searchResults = $state<any[]>([]);
  55 |   let showSearchResults = $state(false);
  56 |   let searchLoading = $state(false);
  57 |   let syncStatus = $state<any>(null);
  58 |   let syncLoading = $state(false);
  59 |   let extractedData = $state<any>(null);
  60 |   let loading = $state(false);
  61 |   let error = $state('');
  62 |   let extractionInfo = $state<any>(null);
  63 |   let forceRefresh = $state(false);
  64 |   let showCachePrompt = $state(false);
  65 |   let cachedDataInfo = $state<any>(null);
  66 |   let retryAttempt = $state(0);
  67 |   let loadingMessage = $state('Starting extraction...');
  68 |   
  69 |   // Cards display state
  70 |   let selectedSet = $state('all');
  71 |   let viewMode = $state<'grid' | 'table'>('table');
  72 |   let searchQuery = $state('');
  73 |   let selectedRarity = $state('all');
  74 |   let sortColumn = $state('card_number');
  75 |   let sortDirection = $state<'asc' | 'desc'>('asc');
  76 |   let selectedCard = $state<any>(null);
  77 |   let showCardModal = $state(false);
  78 |   
  79 |   // Pagination state
  80 |   let currentPage = $state(1);
  81 |   let pageSize = $state(50);
  82 |   let pageSizeOptions = [10, 20, 50, 100];
  83 |   
  84 |   // Missing cards state
  85 |   let showMissingCards = $state(false);
  86 |   let onlyMissingCards = $state(false);
  87 |   let availableOnly = $state(false);
  88 |   let setCardsData = $state<any>({});
  89 |   let loadingSetData = $state<any>({});
  90 |   let setDataErrors = $state<any>({});
  91 |   let fetchingAllSets = $state(false);
  92 |   let bulkFetchErrors = $state<string[]>([]);
  93 |   
  94 |   // JSON display toggle
  95 |   let showJsonData = $state(false);
  96 |   
  97 |   // Sorting function
  98 |   function sortCards(cards: any[]) {
  99 |     return [...cards].sort((a, b) => {
 100 |       let aValue, bValue;
 101 |       
 102 |       switch (sortColumn) {
 103 |         case 'card_number':
 104 |           aValue = parseInt(a.card?.card_number || '0');
 105 |           bValue = parseInt(b.card?.card_number || '0');
 106 |           break;
 107 |         case 'name':
 108 |           aValue = a.card?.name || '';
 109 |           bValue = b.card?.name || '';
 110 |           break;
 111 |         case 'set':
 112 |           aValue = resolveSetName(a);
 113 |           bValue = resolveSetName(b);
 114 |           break;
 115 |         case 'rarity':
 116 |           aValue = a.card?.rarity || '';
 117 |           bValue = b.card?.rarity || '';
 118 |           break;
 119 |         case 'type':
 120 |           aValue = a.card?.types?.join(', ') || '';
 121 |           bValue = b.card?.types?.join(', ') || '';
 122 |           break;
 123 |         case 'value':
 124 |           aValue = getMarketValue(a);
 125 |           bValue = getMarketValue(b);
 126 |           break;
 127 |         case 'listedPrice':
 128 |           aValue = getListedPrice(a);
 129 |           bValue = getListedPrice(b);
 130 |           break;
 131 |         default:
 132 |           return 0;
 133 |       }
 134 |       
 135 |       if (typeof aValue === 'string' && typeof bValue === 'string') {
 136 |         const result = aValue.localeCompare(bValue);
 137 |         return sortDirection === 'asc' ? result : -result;
 138 |       } else {
 139 |         const result = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
 140 |         return sortDirection === 'asc' ? result : -result;
 141 |       }
 142 |     });
 143 |   }
 144 |   
 145 |   // Handle column header clicks for sorting
 146 |   function handleSort(column: string) {
 147 |     if (sortColumn === column) {
 148 |       sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
 149 |     } else {
 150 |       sortColumn = column;
 151 |       sortDirection = 'asc';
 152 |     }
 153 |     // Reset to first page when sorting changes
 154 |     currentPage = 1;
 155 |   }
 156 |   
 157 |   // Pagination functions
 158 |   function goToPage(page: number) {
 159 |     currentPage = page;
 160 |   }
 161 |   
 162 |   function goToFirstPage() {
 163 |     currentPage = 1;
 164 |   }
 165 |   
 166 |   function goToLastPage(totalPages: number) {
 167 |     currentPage = totalPages;
 168 |   }
 169 |   
 170 |   function previousPage() {
 171 |     if (currentPage > 1) {
 172 |       currentPage--;
 173 |     }
 174 |   }
 175 |   
 176 |   function nextPage(totalPages: number) {
 177 |     if (currentPage < totalPages) {
 178 |       currentPage++;
 179 |     }
 180 |   }
 181 |   
 182 |   // Handle page size change
 183 |   function handlePageSizeChange(newSize: number) {
 184 |     pageSize = newSize;
 185 |     currentPage = 1; // Reset to first page when page size changes
 186 |   }
 187 | 
 188 |   function handleSetChange() {
 189 |     currentPage = 1; // Reset to first page when set changes
 190 |   }
 191 | 
 192 |   function handleRarityChange() {
 193 |     currentPage = 1; // Reset to first page when rarity changes
 194 |   }
 195 |   
 196 |   // Paginate cards
 197 |   function paginateCards(cards: any[]) {
 198 |     const startIndex = (currentPage - 1) * pageSize;
 199 |     const endIndex = startIndex + pageSize;
 200 |     return cards.slice(startIndex, endIndex);
 201 |   }
 202 |   
 203 |   // Filter cards by search query and rarity
 204 |   function filterCards(cards: any[]) {
 205 |     return cards.filter(card => {
 206 |       const matchesSearch = !searchQuery || 
 207 |         (card.card?.name || '').toLowerCase().includes(searchQuery.toLowerCase()) ||
 208 |         (card.card?.card_number || '').includes(searchQuery) ||
 209 |         resolveSetName(card).toLowerCase().includes(searchQuery.toLowerCase());
 210 |       
 211 |       const matchesRarity = selectedRarity === 'all' || card.card?.rarity === selectedRarity;
 212 |       
 213 |       // Available only filter - only applies to missing cards
 214 |       const matchesAvailable = !availableOnly || !card.isMissing || card.is_listed;
 215 |       
 216 |       return matchesSearch && matchesRarity && matchesAvailable;
 217 |     });
 218 |   }
 219 |   
 220 |   // Reset pagination when filters change
 221 |   $effect(() => {
 222 |     // Access the dependencies to track them
 223 |     searchQuery;
 224 |     selectedRarity;
 225 |     selectedSet;
 226 |     onlyMissingCards;
 227 |     availableOnly;
 228 |     currentPage = 1;
 229 |   });
 230 |   
 231 |   // Handle card click to show modal
 232 |   function openCardModal(card: any, allCardsOfSameType: any[] = []) {
 233 |     selectedCard = card;
 234 |     showCardModal = true;
 235 |   }
 236 |   
 237 |   function closeCardModal() {
 238 |     showCardModal = false;
 239 |     selectedCard = null;
 240 |   }
 241 | 
 242 |   // Function to fetch complete set data from rip.fun API
 243 |   async function fetchCompleteSetData(setId: string) {
 244 |     if (setCardsData[setId]) {
 245 |       return setCardsData[setId]; // Return cached data if available
 246 |     }
 247 | 
 248 |     // Skip localStorage check - Redis handles caching on backend
 249 | 
 250 |     loadingSetData[setId] = true;
 251 |     setDataErrors[setId] = null;
 252 | 
 253 |     try {
 254 |       const response = await fetch(`/api/set/${setId}?page=1&limit=1000&sort=number-asc&all=true`);
 255 |       
 256 |       if (!response.ok) {
 257 |         const errorData = await response.json().catch(() => ({}));
 258 |         throw new Error(`Failed to fetch set data: ${response.status} ${response.statusText}. ${errorData.details || ''}`);
 259 |       }
 260 | 
 261 |       const data = await response.json();
 262 |       
 263 |       if (data.error) {
 264 |         throw new Error(data.details || data.error);
 265 |       }
 266 | 
 267 |       // Cache the data in memory only (Redis handles persistent caching)
 268 |       setCardsData[setId] = data;
 269 |       console.log(`Set data fetched: ${setId} (cached: ${data.cached ? 'yes' : 'no'})`);
 270 |       
 271 |       return data;
 272 |     } catch (err) {
 273 |       console.error(`Error fetching set ${setId} data:`, err);
 274 |       setDataErrors[setId] = err instanceof Error ? err.message : 'Failed to fetch set data';
 275 |       throw err;
 276 |     } finally {
 277 |       loadingSetData[setId] = false;
 278 |     }
 279 |   }
 280 | 
 281 |   // Function to get missing cards for a specific set
 282 |   async function getMissingCards(setId: string, userCards: any[]) {
 283 |     try {
 284 |       const completeSetData = await fetchCompleteSetData(setId);
 285 |       
 286 |       if (!completeSetData?.cards) {
 287 |         return [];
 288 |       }
 289 | 
 290 |       // Get all card IDs that the user owns from this set
 291 |       const userCardIds = new Set(userCards.map(card => card.card?.id).filter(Boolean));
 292 |       
 293 |       // Find cards from the complete set that the user doesn't have
 294 |       // Note: Complete set cards have ID at root level, user cards have nested structure
 295 |       const missingCards = completeSetData.cards.filter((setCard: any) => {
 296 |         return setCard.id && !userCardIds.has(setCard.id);
 297 |       });
 298 | 
 299 |       // Transform missing cards and fetch listing data for each
 300 |       const missingCardsWithListings = await Promise.all(
 301 |         missingCards.map(async (card: any) => {
 302 |           let listingData = null;
 303 |           let isListed = false;
 304 |           let lowestPrice = null;
 305 |           
 306 |           try {
 307 |             // Fetch listing data for this missing card
 308 |             const listingResponse = await fetch(`/api/card/${card.id}/listings`);
 309 |             if (listingResponse.ok) {
 310 |               listingData = await listingResponse.json();
 311 |               
 312 |               // Check if there are any active listings
 313 |               if (listingData.listings && listingData.listings.length > 0) {
 314 |                 isListed = true;
 315 |                 // Find the lowest price from active listings using usd_price
 316 |                 const prices = listingData.listings
 317 |                   .filter((listing: any) => listing.usd_price)
 318 |                   .map((listing: any) => parseFloat(listing.usd_price));
 319 |                   
 320 |                 if (prices.length > 0) {
 321 |                   lowestPrice = Math.min(...prices);
 322 |                 }
 323 |               }
 324 |             }
 325 |           } catch (err) {
 326 |             console.error(`Error fetching listings for card ${card.id}:`, err);
 327 |           }
 328 |           
 329 |           return {
 330 |             card: card, // Wrap the card data in a 'card' property to match user card structure
 331 |             isMissing: true, // Mark as missing for UI purposes
 332 |             is_listed: isListed, // Whether the card has active listings
 333 |             listing: listingData, // Full listing data
 334 |             lowestPrice: lowestPrice, // Lowest available price
 335 |             marketValue: card.market_price || card.raw_price // Market value for missing cards
 336 |           };
 337 |         })
 338 |       );
 339 |       
 340 |       return missingCardsWithListings;
 341 |     } catch (err) {
 342 |       console.error(`Error getting missing cards for set ${setId}:`, err);
 343 |       return [];
 344 |     }
 345 |   }
 346 | 
 347 |   // Function to get all missing cards for the current set selection
 348 |   async function getAllMissingCards() {
 349 |     if (!extractedData?.profile?.digital_cards || selectedSet === 'all') {
 350 |       return [];
 351 |     }
 352 | 
 353 |     // Find the set ID for the selected set
 354 |     const userCardsForSet = cardsBySet[selectedSet]?.cards || [];
 355 |     
 356 |     // Get the set ID from the first card in the set
 357 |     const setId = userCardsForSet[0]?.card?.set_id;
 358 |     
 359 |     if (!setId) {
 360 |       return [];
 361 |     }
 362 | 
 363 |     return await getMissingCards(setId, userCardsForSet);
 364 |   }
 365 | 
 366 |   // Function to fetch complete set data for all sets the user owns
 367 |   async function fetchAllUserSets() {
 368 |     if (!extractedData?.profile?.digital_cards) {
 369 |       return;
 370 |     }
 371 | 
 372 |     fetchingAllSets = true;
 373 |     bulkFetchErrors = [];
 374 | 
 375 |     // Get all unique set IDs from user's cards
 376 |     const userSetIds = new Set<string>();
 377 |     extractedData.profile.digital_cards.forEach((card: any) => {
 378 |       const setId = card.card?.set_id;
 379 |       if (setId) {
 380 |         userSetIds.add(setId);
 381 |       }
 382 |     });
 383 | 
 384 |     console.log('Fetching complete set data for sets:', Array.from(userSetIds));
 385 | 
 386 |     // Fetch complete set data for each unique set
 387 |     const fetchPromises = Array.from(userSetIds).map(async (setId) => {
 388 |       try {
 389 |         await fetchCompleteSetData(setId);
 390 |       } catch (err) {
 391 |         const errorMsg = err instanceof Error ? err.message : 'Unknown error';
 392 |         console.error(`Failed to fetch complete set data for ${setId}:`, err);
 393 |         bulkFetchErrors = [...bulkFetchErrors, `Set ${setId}: ${errorMsg}`];
 394 |       }
 395 |     });
 396 | 
 397 |     await Promise.all(fetchPromises);
 398 |     console.log('All set data fetching completed');
 399 |     fetchingAllSets = false;
 400 |   }
 401 | 
 402 |   // Reactive state for combined cards (owned + missing)
 403 |   let combinedCards = $state<any[]>([]);
 404 |   
 405 |   // Reactive cardsBySet calculation
 406 |   let cardsBySet = $state<any>({});
 407 |   let setNameById = $state<Record<string, string>>({});
 408 | 
 409 |   // Calculate cardsBySet when extractedData changes
 410 |   $effect(() => {
 411 |     if (!extractedData?.profile?.digital_cards) {
 412 |       cardsBySet = {};
 413 |       return;
 414 |     }
 415 | 
 416 |     cardsBySet = extractedData.profile.digital_cards.reduce((sets: any, card: any) => {
 417 |       const setName = resolveSetName(card);
 418 |       const setId = card.set?.id || card.card?.set_id || 'unknown';
 419 |       if (!sets[setName]) {
 420 |         sets[setName] = {
 421 |           name: setName,
 422 |           id: setId,
 423 |           cards: [],
 424 |           totalValue: 0,
 425 |           listedCount: 0,
 426 |           ownedCount: 0,
 427 |           releaseDate: card.card?.set?.release_date
 428 |         };
 429 |       }
 430 |       
 431 |       sets[setName].cards.push(card);
 432 |       sets[setName].totalValue += parseFloat(card.listing?.usd_price || card.card?.raw_price || '0');
 433 |       
 434 |       if (card.is_listed) {
 435 |         sets[setName].listedCount++;
 436 |       } else {
 437 |         sets[setName].ownedCount++;
 438 |       }
 439 |       
 440 |       return sets;
 441 |     }, {});
 442 | 
 443 |     // Build setNameById from setCardsData cache, preferring set metadata name and skipping numeric-only names
 444 |     const numericOnly = (s: any) => typeof s === 'string' && /^\d+$/.test(s.trim());
 445 |     const map: Record<string, string> = {};
 446 |     for (const [id, data] of Object.entries(setCardsData || {})) {
 447 |       const metaName = (data as any)?.set?.name as string | undefined;
 448 |       const cardName = (data as any)?.cards?.[0]?.set?.name as string | undefined;
 449 |       const chosen = metaName && !numericOnly(metaName) ? metaName : (cardName && !numericOnly(cardName) ? cardName : undefined);
 450 |       if (id && chosen) map[id] = chosen;
 451 |     }
 452 |     // Ensure known mappings exist even if cache lacks proper names
 453 |     map['sv3pt5'] = map['sv3pt5'] || 'Scarlet & Violet 151';
 454 |     setNameById = map;
 455 |   });
 456 | 
 457 |   // Update combined cards when relevant state changes
 458 |   $effect(async () => {
 459 |     if (!extractedData?.profile?.digital_cards) {
 460 |       combinedCards = [];
 461 |       return;
 462 |     }
 463 | 
 464 |     // Get base owned cards (deduplicated for cleaner display)
 465 |     const ownedCards = selectedSet === 'all'
 466 |       ? Object.values(extractedData.profile.digital_cards.reduce((unique: any, card: any) => {
 467 |           const cardId = card.card?.id;
 468 |           if (!unique[cardId] || unique[cardId].listing) {
 469 |             unique[cardId] = card;
 470 |           }
 471 |           return unique;
 472 |         }, {})) as any[]
 473 |       : Object.values((cardsBySet[selectedSet]?.cards || []).reduce((unique: any, card: any) => {
 474 |           const cardId = card.card?.id;
 475 |           if (!unique[cardId] || unique[cardId].listing) {
 476 |             unique[cardId] = card;
 477 |           }
 478 |           return unique;
 479 |         }, {})) as any[];
 480 | 
 481 |     // Handle missing cards based on toggles
 482 |     if (selectedSet !== 'all' && (showMissingCards || onlyMissingCards)) {
 483 |       console.log('Missing cards logic triggered:', { showMissingCards, onlyMissingCards, selectedSet });
 484 |       try {
 485 |         const missingCards = await getAllMissingCards();
 486 |         console.log('Got missing cards:', missingCards.length);
 487 |         
 488 |         if (onlyMissingCards) {
 489 |           // Show only missing cards
 490 |           console.log('Showing only missing cards');
 491 |           combinedCards = missingCards;
 492 |         } else if (showMissingCards && !onlyMissingCards) {
 493 |           // Show both owned and missing cards
 494 |           console.log('Showing owned + missing cards');
 495 |           combinedCards = [...ownedCards, ...missingCards];
 496 |         }
 497 |       } catch (err) {
 498 |         console.error('Error loading missing cards:', err);
 499 |         combinedCards = ownedCards;
 500 |       }
 501 |     } else {
 502 |       console.log('Not showing missing cards:', { selectedSet, showMissingCards, onlyMissingCards });
 503 |       combinedCards = ownedCards;
 504 |     }
 505 |   });
 506 | 
 507 |   async function runExtraction() {
 508 |     if (!ripUserId.trim()) {
 509 |       error = 'Please enter a rip.fun user ID';
 510 |       return;
 511 |     }
 512 | 
 513 |     // Check cache first unless force refresh is requested
 514 |     if (!forceRefresh) {
 515 |       const cached = cacheUtils.loadFromCache(ripUserId.trim());
 516 |       if (cached) {
 517 |         // Calculate cache age
 518 |         const cacheAge = Date.now() - new Date(cached.timestamp).getTime();
 519 |         const ageInMinutes = Math.floor(cacheAge / 60000);
 520 |         const ageInHours = Math.floor(ageInMinutes / 60);
 521 |         
 522 |         // Store cache info for prompt
 523 |         cachedDataInfo = {
 524 |           data: cached.data,
 525 |           timestamp: cached.timestamp,
 526 |           ageInMinutes,
 527 |           ageInHours,
 528 |           ageText: ageInHours > 0 ? `${ageInHours} hour${ageInHours > 1 ? 's' : ''} ago` : `${ageInMinutes} minute${ageInMinutes !== 1 ? 's' : ''} ago`
 529 |         };
 530 |         
 531 |         // Show smart prompt for cache freshness
 532 |         showCachePrompt = true;
 533 |         return;
 534 |       }
 535 |     }
 536 |     
 537 |     // Proceed with fresh extraction
 538 |     await performExtraction();
 539 |   }
 540 |   
 541 |   function useCachedData() {
 542 |     if (cachedDataInfo) {
 543 |       console.log('Using cached data for user:', ripUserId.trim());
 544 |       extractedData = cachedDataInfo.data;
 545 |       extractionInfo = {
 546 |         source: 'cache',
 547 |         timestamp: cachedDataInfo.timestamp,
 548 |         userId: ripUserId.trim(),
 549 |         cached: true,
 550 |         cacheAge: cachedDataInfo.ageText
 551 |       };
 552 |       showCachePrompt = false;
 553 |       cachedDataInfo = null;
 554 |     }
 555 |   }
 556 |   
 557 |   async function getFreshData() {
 558 |     showCachePrompt = false;
 559 |     forceRefresh = true;
 560 |     await performExtraction();
 561 |   }
 562 |   
 563 |   async function performExtraction() {
 564 | 
 565 |     loading = true;
 566 |     error = '';
 567 |     extractedData = null;
 568 |     extractionInfo = null;
 569 |     retryAttempt = 0;
 570 |     showCachePrompt = false;
 571 |     cachedDataInfo = null;
 572 |     loadingMessage = forceRefresh ? 'Refreshing profile data from rip.fun...' : 'Fetching profile data from rip.fun...';
 573 | 
 574 |     // Set up periodic message updates to show progress
 575 |     const messageInterval = setInterval(() => {
 576 |       if (loading) {
 577 |         retryAttempt++;
 578 |         if (retryAttempt <= 15) {
 579 |           loadingMessage = 'Fetching profile data from rip.fun...';
 580 |         } else if (retryAttempt <= 30) {
 581 |           loadingMessage = 'Page is taking longer than expected, please wait...';
 582 |         } else if (retryAttempt <= 45) {
 583 |           loadingMessage = 'Still loading... rip.fun may be experiencing high traffic...';
 584 |         } else {
 585 |           loadingMessage = 'This is taking unusually long. The request may timeout soon...';
 586 |         }
 587 |       }
 588 |     }, 1000);
 589 | 
 590 |     try {
 591 |       const response = await fetch('/api/extract', {
 592 |         method: 'POST',
 593 |         headers: {
 594 |           'Content-Type': 'application/json',
 595 |         },
 596 |         body: JSON.stringify({
 597 |           username: ripUserId.trim(),
 598 |           method: 'api'
 599 |         }),
 600 |       });
 601 | 
 602 |       if (!response.ok) {
 603 |         const errorData = await response.json();
 604 |         throw new Error(errorData.error || 'Extraction failed');
 605 |       }
 606 | 
 607 |       const result = await response.json();
 608 |       extractedData = result.extractedData;
 609 |       extractionInfo = {
 610 |         username: result.username,
 611 |         targetUrl: result.targetUrl,
 612 |         timestamp: result.timestamp,
 613 |         cached: false,
 614 |         source: 'live'
 615 |       };
 616 |       
 617 |       // Save to cache
 618 |       cacheUtils.saveToCache(ripUserId.trim(), extractedData);
 619 |       console.log('Saved user data to cache for:', ripUserId.trim());
 620 |       
 621 |       loadingMessage = 'Extraction completed successfully!';
 622 |       
 623 |       // Automatically fetch complete set data for all sets the user owns
 624 |       loadingMessage = 'Loading complete set information...';
 625 |       try {
 626 |         await fetchAllUserSets();
 627 |         loadingMessage = 'All data loaded successfully!';
 628 |       } catch (err) {
 629 |         console.warn('Some set data failed to load:', err);
 630 |         loadingMessage = 'Extraction completed (some set data may be incomplete)';
 631 |       }
 632 |     } catch (err) {
 633 |       const errorMsg = err instanceof Error ? err.message : 'An error occurred';
 634 |       
 635 |       // Provide more helpful error messages based on the error type
 636 |       if (errorMsg.includes('timed out')) {
 637 |         error = `Request timed out: The rip.fun profile page took too long to load. This might be due to:\n• High server load on rip.fun\n• Network connectivity issues\n• The profile contains a large amount of data\n\nPlease try again in a moment.`;
 638 |       } else if (errorMsg.includes('HTTP error! status: 404')) {
 639 |         error = `Profile not found: The user ID "${ripUserId.trim()}" doesn't exist on rip.fun. Please check the user ID and try again.`;
 640 |       } else if (errorMsg.includes('HTTP error! status: 500')) {
 641 |         error = `Server error: rip.fun is experiencing technical difficulties. Please try again later.`;
 642 |       } else if (errorMsg.includes('Failed to fetch')) {
 643 |         error = `Network error: Unable to connect to rip.fun. Please check your internet connection and try again.`;
 644 |       } else {
 645 |         error = errorMsg;
 646 |       }
 647 |     } finally {
 648 |       clearInterval(messageInterval);
 649 |       loading = false;
 650 |       retryAttempt = 0;
 651 |       forceRefresh = false; // Reset force refresh flag
 652 |     }
 653 |   }
 654 | 
 655 |   function downloadJSON() {
 656 |     if (!extractedData) return;
 657 |     
 658 |     const blob = new Blob([JSON.stringify(extractedData, null, 2)], {
 659 |       type: 'application/json',
 660 |     });
 661 |     const url = URL.createObjectURL(blob);
 662 |     const link = document.createElement('a');
 663 |     link.href = url;
 664 |     link.download = `rip-fun-${extractionInfo?.username || 'profile'}-${new Date().toISOString().split('T')[0]}.json`;
 665 |     document.body.appendChild(link);
 666 |     link.click();
 667 |     document.body.removeChild(link);
 668 |     URL.revokeObjectURL(url);
 669 |   }
 670 | 
 671 |   function copyToClipboard() {
 672 |     if (!extractedData) return;
 673 |     
 674 |     navigator.clipboard.writeText(JSON.stringify(extractedData, null, 2)).then(() => {
 675 |       // Could add a toast notification here
 676 |       console.log('Copied to clipboard');
 677 |     });
 678 |   }
 679 | 
 680 |   // Username search functionality
 681 |   let searchTimeout: number;
 682 |   
 683 |   function handleUsernameInput() {
 684 |     clearTimeout(searchTimeout);
 685 |     
 686 |     if (ripUserId.trim().length < 2) {
 687 |       searchResults = [];
 688 |       showSearchResults = false;
 689 |       return;
 690 |     }
 691 |     
 692 |     searchTimeout = setTimeout(async () => {
 693 |       await searchUsers(ripUserId.trim());
 694 |     }, 300);
 695 |   }
 696 |   
 697 |   async function searchUsers(query: string) {
 698 |     try {
 699 |       searchLoading = true;
 700 |       const response = await fetch(`/api/search-users?q=${encodeURIComponent(query)}&limit=5`);
 701 |       
 702 |       if (response.ok) {
 703 |         const data = await response.json();
 704 |         searchResults = data.results;
 705 |         showSearchResults = true;
 706 |       } else {
 707 |         searchResults = [];
 708 |         showSearchResults = false;
 709 |       }
 710 |     } catch (err) {
 711 |       console.warn('User search failed:', err);
 712 |       searchResults = [];
 713 |       showSearchResults = false;
 714 |     } finally {
 715 |       searchLoading = false;
 716 |     }
 717 |   }
 718 |   
 719 |   function selectUser(user: any) {
 720 |     ripUserId = user.username;
 721 |     showSearchResults = false;
 722 |     searchResults = [];
 723 |   }
 724 |   
 725 |   function hideSearchResults() {
 726 |     setTimeout(() => {
 727 |       showSearchResults = false;
 728 |     }, 200);
 729 |   }
 730 | 
 731 |   // Sync functionality
 732 |   async function triggerSync() {
 733 |     try {
 734 |       syncLoading = true;
 735 |       const response = await fetch('/api/sync-users', {
 736 |         method: 'POST',
 737 |         headers: {
 738 |           'Content-Type': 'application/json'
 739 |         }
 740 |       });
 741 |       
 742 |       if (response.ok) {
 743 |         const data = await response.json();
 744 |         console.log('Sync started:', data);
 745 |         await checkSyncStatus();
 746 |       } else {
 747 |         const errorData = await response.json();
 748 |         console.error('Sync failed:', errorData);
 749 |       }
 750 |     } catch (err) {
 751 |       console.error('Sync request failed:', err);
 752 |     } finally {
 753 |       syncLoading = false;
 754 |     }
 755 |   }
 756 |   
 757 |   async function checkSyncStatus() {
 758 |     try {
 759 |       const response = await fetch('/api/sync-users');
 760 |       if (response.ok) {
 761 |         const data = await response.json();
 762 |         syncStatus = data;
 763 |       }
 764 |     } catch (err) {
 765 |       console.warn('Failed to check sync status:', err);
 766 |     }
 767 |   }
 768 |   
 769 |   // Check sync status on component mount
 770 |   $effect(() => {
 771 |     checkSyncStatus();
 772 |   });
 773 | </script>
 774 | 
 775 | <div class="px-4 py-8">
 776 |   <div class="max-w-6xl mx-auto">
 777 |     <div class="text-center mb-8">
 778 |       <h1 class="text-3xl font-bold text-gray-900 mb-4">rip.fun Data Extractor</h1>
 779 |       <p class="text-lg text-gray-600 max-w-2xl mx-auto">
 780 |         Extract complete profile data from any rip.fun user. Get all profile information, digital cards, packs, and collection data with clip_embedding data automatically filtered out.
 781 |       </p>
 782 |     </div>
 783 | 
 784 |     <div class="max-w-2xl mx-auto mb-8">
 785 |       <div class="bg-white shadow rounded-lg p-6">
 786 |         <h2 class="text-lg font-medium text-gray-900 mb-4">Extract Profile Data</h2>
 787 |         
 788 |         <div class="space-y-4">
 789 |           <div class="relative">
 790 |             <label for="ripUsername" class="block text-sm font-medium text-gray-700">
 791 |               rip.fun Username or User ID
 792 |             </label>
 793 |             <div class="mt-1 flex rounded-md shadow-sm">
 794 |               <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
 795 |                 👤
 796 |               </span>
 797 |               <input
 798 |                 type="text"
 799 |                 id="ripUsername"
 800 |                 bind:value={ripUserId}
 801 |                 oninput={handleUsernameInput}
 802 |                 onblur={hideSearchResults}
 803 |                 class="block w-full rounded-none rounded-r-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
 804 |                 placeholder="username (e.g., Poketard) or user ID (e.g., 2010)"
 805 |                 autocomplete="off"
 806 |               />
 807 |             </div>
 808 |             
 809 |             <!-- Search Results Dropdown -->
 810 |             {#if showSearchResults && (searchResults.length > 0 || searchLoading)}
 811 |               <div class="absolute z-10 mt-1 w-full bg-white shadow-lg border border-gray-300 rounded-md max-h-60 overflow-auto">
 812 |                 {#if searchLoading}
 813 |                   <div class="px-4 py-3 text-sm text-gray-500">
 814 |                     <div class="flex items-center">
 815 |                       <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24">
 816 |                         <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 817 |                         <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
 818 |                       </svg>
 819 |                       Searching...
 820 |                     </div>
 821 |                   </div>
 822 |                 {:else if searchResults.length > 0}
 823 |                   {#each searchResults as user}
 824 |                     <button
 825 |                       onmousedown={() => selectUser(user)}
 826 |                       class="w-full px-4 py-3 text-left hover:bg-gray-50 focus:bg-gray-50 border-b border-gray-100 last:border-b-0"
 827 |                     >
 828 |                       <div class="flex items-center space-x-3">
 829 |                         {#if user.avatar}
 830 |                           <img src={user.avatar} alt={user.username} class="w-8 h-8 rounded-full">
 831 |                         {:else}
 832 |                           <div class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
 833 |                             <span class="text-xs text-gray-500">👤</span>
 834 |                           </div>
 835 |                         {/if}
 836 |                         <div class="flex-1 min-w-0">
 837 |                           <p class="text-sm font-medium text-gray-900 truncate">{user.username}</p>
 838 |                           <p class="text-xs text-gray-500">ID: {user.id}</p>
 839 |                         </div>
 840 |                       </div>
 841 |                     </button>
 842 |                   {/each}
 843 |                 {:else}
 844 |                   <div class="px-4 py-3 text-sm text-gray-500">
 845 |                     No users found. Try running a sync to update the database.
 846 |                   </div>
 847 |                 {/if}
 848 |               </div>
 849 |             {/if}
 850 |             
 851 |             <div class="mt-2 flex justify-between items-start">
 852 |               <p class="text-sm text-gray-500">
 853 |                 Enter a username (e.g., "Poketard") or user ID (e.g., "2010") to extract their complete card collection.
 854 |               </p>
 855 |               
 856 |               <!-- Sync Button -->
 857 |               <div class="flex items-center space-x-2">
 858 |                 {#if syncStatus}
 859 |                   <span class="text-xs text-gray-500">
 860 |                     Last sync: {syncStatus.status === 'never_run' ? 'Never' : new Date(syncStatus.lastSyncAt).toLocaleDateString()}
 861 |                   </span>
 862 |                 {/if}
 863 |                 <button
 864 |                   onclick={triggerSync}
 865 |                   disabled={syncLoading}
 866 |                   class="inline-flex items-center px-2 py-1 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
 867 |                   title="Sync blockchain data to update username database"
 868 |                 >
 869 |                   {#if syncLoading}
 870 |                     <svg class="animate-spin -ml-1 mr-1 h-3 w-3 text-gray-500" fill="none" viewBox="0 0 24 24">
 871 |                       <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
 872 |                       <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
 873 |                     </svg>
 874 |                   {:else}
 875 |                     <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 876 |                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
 877 |                     </svg>
 878 |                   {/if}
 879 |                   Sync
 880 |                 </button>
 881 |               </div>
 882 |             </div>
 883 |           </div>
 884 | 
 885 |           {#if error}
 886 |             <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
 887 |               <div class="flex">
 888 |                 <div class="flex-shrink-0">
 889 |                   <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
 890 |                     <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
 891 |                   </svg>
 892 |                 </div>
 893 |                 <div class="ml-3">
 894 |                   <div class="text-sm font-medium">
 895 |                     {#if error.includes('\n')}
 896 |                       {#each error.split('\n') as line}
 897 |                         <div class="mb-1">{line}</div>
 898 |                       {/each}
 899 |                     {:else}
 900 |                       {error}
 901 |                     {/if}
 902 |                   </div>
 903 |                 </div>
 904 |               </div>
 905 |             </div>
 906 |           {/if}
 907 | 
 908 |           {#if showCachePrompt && cachedDataInfo}
 909 |             <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
 910 |               <div class="flex items-start">
 911 |                 <div class="flex-shrink-0">
 912 |                   <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
 913 |                     <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
 914 |                   </svg>
 915 |                 </div>
 916 |                 <div class="ml-3 flex-1">
 917 |                   <h3 class="text-sm font-medium text-blue-800">
 918 |                     💡 Cached data available
 919 |                   </h3>
 920 |                   <div class="mt-2 text-sm text-blue-700">
 921 |                     <p>We have cached data for this user from <strong>{cachedDataInfo.ageText}</strong>.</p>
 922 |                     <p class="mt-2">
 923 |                       {#if cachedDataInfo.ageInMinutes < 30}
 924 |                         The data is still fresh! Use cached unless you just made changes.
 925 |                       {:else if cachedDataInfo.ageInMinutes < 120}
 926 |                         Just opened packs or traded cards? Get fresh data. Otherwise, cached is fine.
 927 |                       {:else if cachedDataInfo.ageInHours < 24}
 928 |                         Data is {cachedDataInfo.ageInHours} hours old. Consider refreshing if you've been active.
 929 |                       {:else}
 930 |                         Data is over a day old. We recommend getting fresh data.
 931 |                       {/if}
 932 |                     </p>
 933 |                   </div>
 934 |                   <div class="mt-4 flex space-x-3">
 935 |                     <button
 936 |                       onclick={getFreshData}
 937 |                       class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
 938 |                     >
 939 |                       🔄 Get Fresh Data
 940 |                       <span class="ml-2 text-xs opacity-90">(slower)</span>
 941 |                     </button>
 942 |                     <button
 943 |                       onclick={useCachedData}
 944 |                       class="inline-flex items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md text-blue-700 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
 945 |                     >
 946 |                       📦 Use Cached
 947 |                       <span class="ml-2 text-xs text-blue-600">({cachedDataInfo.ageText}, instant)</span>
 948 |                     </button>
 949 |                   </div>
 950 |                 </div>
 951 |               </div>
 952 |             </div>
 953 |           {/if}
 954 | 
 955 |           <div class="flex space-x-3">
 956 |             <button
 957 |               onclick={runExtraction}
 958 |               disabled={loading}
 959 |               class="flex-1 inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 disabled:opacity-50"
 960 |             >
 961 |               {#if loading}
 962 |                 <div class="flex items-center">
 963 |                   <div class="animate-spin -ml-1 mr-3 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
 964 |                   <div class="flex flex-col items-start">
 965 |                     <span class="font-medium">{loadingMessage}</span>
 966 |                     {#if retryAttempt > 15}
 967 |                       <span class="text-xs text-indigo-200 mt-1">Elapsed: {retryAttempt}s</span>
 968 |                     {/if}
 969 |                   </div>
 970 |                 </div>
 971 |               {:else}
 972 |                 Extract Profile Data
 973 |               {/if}
 974 |             </button>
 975 |             
 976 |             {#if extractedData}
 977 |               <button
 978 |                 onclick={async () => { 
 979 |                   forceRefresh = true; 
 980 |                   cacheUtils.clearUserCache(ripUserId.trim());
 981 |                   // Note: We don't clear set caches since set data is static and doesn't change
 982 |                   await performExtraction(); 
 983 |                 }}
 984 |                 disabled={loading}
 985 |                 class="inline-flex justify-center items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
 986 |                 title="Refresh user data from server (preserves set data cache)"
 987 |               >
 988 |                 <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 989 |                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
 990 |                 </svg>
 991 |                 Refresh
 992 |               </button>
 993 |             {/if}
 994 |           </div>
 995 |         </div>
 996 |       </div>
 997 |     </div>
 998 | 
 999 |     {#if extractedData}
1000 |       <div class="space-y-6">
1001 |         <div class="bg-white shadow rounded-lg p-6">
1002 |           <div class="flex justify-between items-center mb-4">
1003 |             <h2 class="text-lg font-medium text-gray-900">Extracted Data</h2>
1004 |             <div class="flex items-center space-x-3">
1005 |               <label class="flex items-center">
1006 |                 <input
1007 |                   type="checkbox"
1008 |                   bind:checked={showJsonData}
1009 |                   class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
1010 |                 />
1011 |                 <span class="ml-2 text-sm text-gray-700">Show JSON Data</span>
1012 |               </label>
1013 |               <div class="flex space-x-2">
1014 |                 <button
1015 |                   onclick={copyToClipboard}
1016 |                   class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
1017 |                 >
1018 |                   📋 Copy
1019 |                 </button>
1020 |                 <button
1021 |                   onclick={downloadJSON}
1022 |                   class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
1023 |                 >
1024 |                   📁 Download JSON
1025 |                 </button>
1026 |               </div>
1027 |             </div>
1028 |           </div>
1029 |           
1030 |           {#if extractionInfo}
1031 |             <div class="bg-gray-50 rounded p-4 mb-4">
1032 |               <dl class="grid grid-cols-1 gap-x-4 gap-y-2 sm:grid-cols-4">
1033 |                 <div>
1034 |                   <dt class="text-sm font-medium text-gray-500">Username</dt>
1035 |                   <dd class="text-sm text-gray-900">{extractionInfo.username || ripUserId}</dd>
1036 |                 </div>
1037 |                 <div>
1038 |                   <dt class="text-sm font-medium text-gray-500">Source</dt>
1039 |                   <dd class="text-sm text-gray-900">
1040 |                     {#if extractionInfo.source === 'cache'}
1041 |                       <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800" title="{extractionInfo.cacheAge ? `Data from ${extractionInfo.cacheAge}` : 'Cached data'}">
1042 |                         📦 Cached {extractionInfo.cacheAge ? `(${extractionInfo.cacheAge})` : ''}
1043 |                       </span>
1044 |                     {:else}
1045 |                       <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800" title="Fresh data from rip.fun">
1046 |                         🌐 Live
1047 |                       </span>
1048 |                     {/if}
1049 |                   </dd>
1050 |                 </div>
1051 |                 <div>
1052 |                   <dt class="text-sm font-medium text-gray-500">Profile URL</dt>
1053 |                   <dd class="text-sm text-gray-900">
1054 |                     {#if extractionInfo.targetUrl}
1055 |                       <a href={extractionInfo.targetUrl} target="_blank" class="text-indigo-600 hover:text-indigo-900">
1056 |                         View Profile
1057 |                       </a>
1058 |                     {:else}
1059 |                       <a href="https://www.rip.fun/user/{ripUserId}" target="_blank" class="text-indigo-600 hover:text-indigo-900">
1060 |                         View Profile
1061 |                       </a>
1062 |                     {/if}
1063 |                   </dd>
1064 |                 </div>
1065 |                 <div>
1066 |                   <dt class="text-sm font-medium text-gray-500">Last Updated</dt>
1067 |                   <dd class="text-sm text-gray-900">{new Date(extractionInfo.timestamp).toLocaleString()}</dd>
1068 |                 </div>
1069 |               </dl>
1070 |               
1071 |               <!-- Advanced Cache Management -->
1072 |               <div class="mt-3 pt-3 border-t border-gray-200">
1073 |                 <details class="text-sm">
1074 |                   <summary class="cursor-pointer text-gray-600 hover:text-gray-900 select-none">
1075 |                     Advanced Cache Options
1076 |                   </summary>
1077 |                   <div class="mt-2 space-x-2">
1078 |                     <button
1079 |                       onclick={clearAllSetCaches}
1080 |                       class="text-xs px-2 py-1 border border-gray-300 rounded text-gray-600 hover:text-gray-900 hover:bg-gray-50"
1081 |                       title="Clear all Pokemon TCG set data caches"
1082 |                     >
1083 |                       Clear Set Caches
1084 |                     </button>
1085 |                     <button
1086 |                       onclick={clearAllCaches}
1087 |                       class="text-xs px-2 py-1 border border-red-300 rounded text-red-600 hover:text-red-900 hover:bg-red-50"
1088 |                       title="Clear all cached data (user + set data)"
1089 |                     >
1090 |                       Clear All Caches
1091 |                     </button>
1092 |                   </div>
1093 |                 </details>
1094 |               </div>
1095 |             </div>
1096 |           {/if}
1097 |           
1098 |           {#if showJsonData}
1099 |             <div class="bg-gray-900 rounded p-4 overflow-auto max-h-96">
1100 |               <pre class="text-xs text-green-400 font-mono whitespace-pre-wrap">{JSON.stringify(extractedData, null, 2)}</pre>
1101 |             </div>
1102 |           {/if}
1103 |         </div>
1104 | 
1105 |         {#if extractedData.profile}
1106 |           <div class="space-y-6">
1107 |             <div class="bg-white shadow rounded-lg p-6">
1108 |               <h2 class="text-lg font-medium text-gray-900 mb-4">Profile Summary</h2>
1109 |               <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
1110 |                 <div>
1111 |                   <h3 class="font-medium text-gray-900 mb-2">Basic Information</h3>
1112 |                   <dl class="space-y-1">
1113 |                     {#if extractedData.profile.username}
1114 |                       <div class="flex">
1115 |                         <dt class="text-sm text-gray-500 w-24">Username:</dt>
1116 |                         <dd class="text-sm text-gray-900">{extractedData.profile.username}</dd>
1117 |                       </div>
1118 |                     {/if}
1119 |                     {#if extractedData.profile.email}
1120 |                       <div class="flex">
1121 |                         <dt class="text-sm text-gray-500 w-24">Email:</dt>
1122 |                         <dd class="text-sm text-gray-900">{extractedData.profile.email}</dd>
1123 |                       </div>
1124 |                     {/if}
1125 |                     {#if extractedData.profile.bio}
1126 |                       <div class="flex">
1127 |                         <dt class="text-sm text-gray-500 w-24">Bio:</dt>
1128 |                         <dd class="text-sm text-gray-900">{extractedData.profile.bio}</dd>
1129 |                       </div>
1130 |                     {/if}
1131 |                     {#if extractedData.profile.login_provider}
1132 |                       <div class="flex">
1133 |                         <dt class="text-sm text-gray-500 w-24">Provider:</dt>
1134 |                         <dd class="text-sm text-gray-900 capitalize">{extractedData.profile.login_provider}</dd>
1135 |                       </div>
1136 |                     {/if}
1137 |                     {#if extractedData.profile.verified !== undefined}
1138 |                       <div class="flex">
1139 |                         <dt class="text-sm text-gray-500 w-24">Verified:</dt>
1140 |                         <dd class="text-sm text-gray-900">
1141 |                           <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {extractedData.profile.verified ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
1142 |                             {extractedData.profile.verified ? '✅ Verified' : '❌ Not Verified'}
1143 |                           </span>
1144 |                         </dd>
1145 |                       </div>
1146 |                     {/if}
1147 |                   </dl>
1148 |                   
1149 |                   {#if extractedData.profile.smart_wallet_address || extractedData.profile.owner_wallet_address}
1150 |                     <h3 class="font-medium text-gray-900 mb-2 mt-4">Wallet Addresses</h3>
1151 |                     <dl class="space-y-1">
1152 |                       {#if extractedData.profile.smart_wallet_address}
1153 |                         <div class="flex">
1154 |                           <dt class="text-sm text-gray-500 w-24">Smart:</dt>
1155 |                           <dd class="text-xs text-gray-900 font-mono break-all">{extractedData.profile.smart_wallet_address}</dd>
1156 |                         </div>
1157 |                       {/if}
1158 |                       {#if extractedData.profile.owner_wallet_address && extractedData.profile.owner_wallet_address !== extractedData.profile.smart_wallet_address}
1159 |                         <div class="flex">
1160 |                           <dt class="text-sm text-gray-500 w-24">Owner:</dt>
1161 |                           <dd class="text-xs text-gray-900 font-mono break-all">{extractedData.profile.owner_wallet_address}</dd>
1162 |                         </div>
1163 |                       {/if}
1164 |                     </dl>
1165 |                   {/if}
1166 |                 </div>
1167 |                 
1168 |                 <div>
1169 |                   <h3 class="font-medium text-gray-900 mb-2">Collection Stats</h3>
1170 |                   <dl class="space-y-1">
1171 |                     {#if extractedData.profile.digital_cards?.length}
1172 |                       <div class="flex">
1173 |                         <dt class="text-sm text-gray-500 w-32">Digital Cards:</dt>
1174 |                         <dd class="text-sm text-gray-900">{extractedData.profile.digital_cards.length}</dd>
1175 |                       </div>
1176 |                     {/if}
1177 |                     {#if extractedData.profile.digital_products?.length}
1178 |                       <div class="flex">
1179 |                         <dt class="text-sm text-gray-500 w-32">Digital Products:</dt>
1180 |                         <dd class="text-sm text-gray-900">{extractedData.profile.digital_products.length}</dd>
1181 |                       </div>
1182 |                     {/if}
1183 |                     {#if extractedData.stats?.totalCards}
1184 |                       <div class="flex">
1185 |                         <dt class="text-sm text-gray-500 w-32">Total Cards:</dt>
1186 |                         <dd class="text-sm text-gray-900">{extractedData.stats.totalCards}</dd>
1187 |                       </div>
1188 |                     {/if}
1189 |                     {#if extractedData.stats?.totalValue}
1190 |                       <div class="flex">
1191 |                         <dt class="text-sm text-gray-500 w-32">Total Value:</dt>
1192 |                         <dd class="text-sm text-gray-900">{extractedData.stats.totalValue}</dd>
1193 |                       </div>
1194 |                     {/if}
1195 |                   </dl>
1196 |                 </div>
1197 |               </div>
1198 |             </div>
1199 | 
1200 |             <!-- Set Statistics -->
1201 |             {#if extractedData.profile.digital_cards && extractedData.profile.digital_cards.length > 0}
1202 |               {@const setStats = extractedData.profile.digital_cards.reduce((stats: any, card: any) => {
1203 |                 const setName = resolveSetName(card);
1204 |                 const rarity = card.card?.rarity || 'Unknown';
1205 |                 const value = parseFloat(card.listing?.usd_price || card.card?.raw_price || '0');
1206 |                 
1207 |                 if (!stats[setName]) {
1208 |                   stats[setName] = {
1209 |                     name: setName,
1210 |                     count: 0,
1211 |                     totalValue: 0,
1212 |                     rarities: {},
1213 |                     releaseDate: card.card?.set?.release_date,
1214 |                     setId: card.card?.set_id
1215 |                   };
1216 |                 }
1217 |                 
1218 |                 stats[setName].count++;
1219 |                 stats[setName].totalValue += value;
1220 |                 stats[setName].rarities[rarity] = (stats[setName].rarities[rarity] || 0) + 1;
1221 |                 
1222 |                 return stats;
1223 |               }, {})}
1224 | 
1225 |               <div class="bg-white shadow rounded-lg p-6">
1226 |                 <h2 class="text-lg font-medium text-gray-900 mb-4">Collection Overview</h2>
1227 |                 
1228 |                 <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
1229 |                   {#each Object.values(setStats) as set}
1230 |                     {@const setData = set as any}
1231 |                     <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
1232 |                       <div class="flex justify-between items-start mb-2">
1233 |                         <h3 class="font-medium text-gray-900 text-sm">{setData.name}</h3>
1234 |                         <span class="text-xs text-gray-500">{setData.count} cards</span>
1235 |                       </div>
1236 |                       
1237 |                       <div class="space-y-1 text-xs text-gray-600">
1238 |                         <div class="flex justify-between">
1239 |                           <span>Total Value:</span>
1240 |                           <span class="font-medium text-gray-900">${setData.totalValue.toFixed(2)}</span>
1241 |                         </div>
1242 |                         {#if setData.releaseDate}
1243 |                           <div class="flex justify-between">
1244 |                             <span>Released:</span>
1245 |                             <span>{new Date(setData.releaseDate).getFullYear()}</span>
1246 |                           </div>
1247 |                         {/if}
1248 |                       </div>
1249 |                       
1250 |                       <div class="mt-2 pt-2 border-t border-blue-200">
1251 |                         <div class="flex flex-wrap gap-1">
1252 |                           {#each Object.entries(setData.rarities) as [rarity, count]}
1253 |                             <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800">
1254 |                               {rarity}: {count}
1255 |                             </span>
1256 |                           {/each}
1257 |                         </div>
1258 |                       </div>
1259 |                     </div>
1260 |                   {/each}
1261 |                 </div>
1262 |               </div>
1263 | 
1264 |               <!-- Digital Cards Section -->
1265 |               {@const baseCards = combinedCards}
1266 |               {@const filteredCards = filterCards(baseCards)}
1267 |               {@const sortedCards = sortCards(filteredCards)}
1268 |               {@const totalCards = sortedCards.length}
1269 |               {@const totalPages = Math.ceil(totalCards / pageSize)}
1270 |               {@const paginatedCards = paginateCards(sortedCards)}
1271 |               {@const allRarities = [...new Set(extractedData.profile.digital_cards.map((card: any) => card.card?.rarity).filter(Boolean))].sort()}
1272 |                 
1273 |               <div class="bg-white shadow rounded-lg p-6">
1274 |                 
1275 |                 <div class="mb-6">
1276 |                   <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
1277 |                     <h2 class="text-lg font-medium text-gray-900">
1278 |                       Digital Cards 
1279 |                       <span class="text-base text-gray-500">
1280 |                         (Showing {paginatedCards.length} of {totalCards} cards)
1281 |                       </span>
1282 |                     </h2>
1283 |                     
1284 |                     <div class="flex flex-wrap items-center gap-3">
1285 |                       <div class="text-sm text-gray-500">
1286 |                         Page Value: ${paginatedCards.reduce((sum: number, card: any) => {
1287 |                           const price = parseFloat(card.listing?.usd_price || card.card?.raw_price || '0');
1288 |                           return sum + price;
1289 |                         }, 0).toFixed(2)}
1290 |                       </div>
1291 |                       <div class="text-sm text-gray-500">
1292 |                         Total Value: ${sortedCards.reduce((sum: number, card: any) => {
1293 |                           const price = parseFloat(card.listing?.usd_price || card.card?.raw_price || '0');
1294 |                           return sum + price;
1295 |                         }, 0).toFixed(2)}
1296 |                       </div>
1297 |                     </div>
1298 |                   </div>
1299 |                   
1300 |                   <!-- Filters Component -->
1301 |                   <CardFilters
1302 |                     bind:selectedSet
1303 |                     bind:selectedRarity
1304 |                     bind:viewMode
1305 |                     bind:showMissingCards
1306 |                     bind:onlyMissingCards
1307 |                     bind:availableOnly
1308 |                     bind:searchTerm={searchQuery}
1309 |                     bind:pageSize
1310 |                     maxPageSize={filteredCards.length}
1311 |                     {cardsBySet}
1312 |                     {allRarities}
1313 |                     {fetchingAllSets}
1314 |                     {loadingSetData}
1315 |                     {setDataErrors}
1316 |                     {bulkFetchErrors}
1317 |                     on:searchChange={(e) => searchQuery = e.detail}
1318 |                     on:setChange={() => handleSetChange()}
1319 |                     on:rarityChange={() => handleRarityChange()}
1320 |                     on:viewModeChange={(e) => viewMode = e.detail}
1321 |                     on:missingCardsToggle={(e) => showMissingCards = e.detail}
1322 |                     on:onlyMissingToggle={(e) => onlyMissingCards = e.detail}
1323 |                     on:availableOnlyToggle={(e) => availableOnly = e.detail}
1324 |                     on:pageSizeChange={(e) => handlePageSizeChange(e.detail)}
1325 |                   />
1326 | 
1327 |                 <!-- Cards Display -->
1328 |                 {#if viewMode === 'grid'}
1329 |                   <CardGrid
1330 |                     {selectedSet}
1331 |                     {cardsBySet}
1332 |                     paginatedCards={paginatedCards}
1333 |                     on:cardClick={(e) => openCardModal(e.detail)}
1334 |                   />
1335 |                 {:else}
1336 |                   <CardTable
1337 |                     paginatedCards={paginatedCards}
1338 |                     {sortColumn}
1339 |                     {sortDirection}
1340 |                     {setNameById}
1341 |                     {resolveSetName}
1342 |                     on:cardClick={(e) => openCardModal(e.detail)}
1343 |                     on:sort={(e) => handleSort(e.detail.column)}
1344 |                   />
1345 |                 {/if}
1346 | 
1347 |                 <!-- Pagination -->
1348 |                 {#if totalPages > 1}
1349 |                   <div class="mt-6 flex flex-col sm:flex-row justify-between items-center gap-4">
1350 |                     <div class="text-sm text-gray-700">
1351 |                       Showing page {currentPage} of {totalPages}
1352 |                     </div>
1353 |                     
1354 |                     <div class="flex items-center gap-2">
1355 |                       <button
1356 |                         onclick={() => goToFirstPage()}
1357 |                         disabled={currentPage === 1}
1358 |                         class="px-3 py-1 text-sm border rounded-md {currentPage === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50'}"
1359 |                       >
1360 |                         First
1361 |                       </button>
1362 |                       
1363 |                       <button
1364 |                         onclick={() => previousPage()}
1365 |                         disabled={currentPage === 1}
1366 |                         class="px-3 py-1 text-sm border rounded-md {currentPage === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50'}"
1367 |                       >
1368 |                         Previous
1369 |                       </button>
1370 |                       
1371 |                       <span class="px-3 py-1 text-sm text-gray-700">
1372 |                         {currentPage}
1373 |                       </span>
1374 |                       
1375 |                       <button
1376 |                         onclick={() => nextPage(totalPages)}
1377 |                         disabled={currentPage === totalPages}
1378 |                         class="px-3 py-1 text-sm border rounded-md {currentPage === totalPages ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50'}"
1379 |                       >
1380 |                         Next
1381 |                       </button>
1382 |                       
1383 |                       <button
1384 |                         onclick={() => goToLastPage(totalPages)}
1385 |                         disabled={currentPage === totalPages}
1386 |                         class="px-3 py-1 text-sm border rounded-md {currentPage === totalPages ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50'}"
1387 |                       >
1388 |                         Last
1389 |                       </button>
1390 |                     </div>
1391 |                   </div>
1392 |                 {/if}
1393 |               </div>
1394 | 
1395 |               <!-- Digital Products Section -->
1396 |               {#if extractedData.profile.digital_products && extractedData.profile.digital_products.length > 0}
1397 |                 <PackManager digitalProducts={extractedData.profile.digital_products} />
1398 |               {/if}
1399 |             </div>
1400 |             {/if}
1401 |           </div>
1402 |         {/if}
1403 |       </div>
1404 |     {/if}
1405 | 
1406 | <!-- Card Detail Modal -->
1407 | {#if showCardModal && selectedCard}
1408 |   <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" onclick={closeCardModal}>
1409 |     <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white" onclick={(e) => e.stopPropagation()}>
1410 |       <!-- Modal Header -->
1411 |       <div class="flex items-center justify-between mb-4">
1412 |         <h3 class="text-lg font-semibold text-gray-900">
1413 |           {selectedCard.card?.name || 'Unknown Card'}
1414 |           {#if selectedCard.card?.card_number}
1415 |             <span class="text-gray-500">#{selectedCard.card.card_number}</span>
1416 |           {/if}
1417 |         </h3>
1418 |         <button onclick={closeCardModal} class="text-gray-400 hover:text-gray-600">
1419 |           <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
1420 |             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
1421 |           </svg>
1422 |         </button>
1423 |       </div>
1424 |       
1425 |       <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
1426 |         <!-- Card Image -->
1427 |         <div class="flex flex-col items-center">
1428 |           {#if selectedCard.card?.large_image_url}
1429 |             <div class="relative group">
1430 |               <img 
1431 |                 src={selectedCard.card.large_image_url} 
1432 |                 alt={selectedCard.card?.name} 
1433 |                 class="max-w-full h-auto rounded-lg shadow-md cursor-pointer hover:shadow-lg transition-shadow"
1434 |                 onclick={() => window.open(selectedCard.card.large_image_url, '_blank')}
1435 |               />
1436 |               <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded-lg transition-all flex items-center justify-center">
1437 |                 <div class="opacity-0 group-hover:opacity-100 bg-white bg-opacity-90 px-3 py-1 rounded-full text-sm text-gray-800 transition-opacity">
1438 |                   Click to enlarge
1439 |                 </div>
1440 |               </div>
1441 |             </div>
1442 |           {:else if selectedCard.card?.small_image_url}
1443 |             <div class="relative group">
1444 |               <img 
1445 |                 src={selectedCard.card.small_image_url} 
1446 |                 alt={selectedCard.card?.name} 
1447 |                 class="max-w-full h-auto rounded-lg shadow-md cursor-pointer hover:shadow-lg transition-shadow"
1448 |                 onclick={() => window.open(selectedCard.card.small_image_url, '_blank')}
1449 |               />
1450 |               <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded-lg transition-all flex items-center justify-center">
1451 |                 <div class="opacity-0 group-hover:opacity-100 bg-white bg-opacity-90 px-3 py-1 rounded-full text-sm text-gray-800 transition-opacity">
1452 |                   Click to enlarge
1453 |                 </div>
1454 |               </div>
1455 |             </div>
1456 |           {:else}
1457 |             <div class="w-64 h-96 bg-gray-200 rounded-lg flex items-center justify-center">
1458 |               <span class="text-gray-500">No Image Available</span>
1459 |             </div>
1460 |           {/if}
1461 |           <p class="text-xs text-gray-500 mt-2 text-center">
1462 |             {selectedCard.card?.large_image_url ? 'High resolution image' : 'Standard resolution image'}
1463 |           </p>
1464 |         </div>
1465 |         
1466 |         <!-- Card Details -->
1467 |         <div class="space-y-4">
1468 |           <!-- Basic Info -->
1469 |           <div class="bg-gray-50 p-4 rounded-lg">
1470 |             <h4 class="font-semibold text-gray-900 mb-3">Card Information</h4>
1471 |             <dl class="space-y-2 text-sm">
1472 |               <div class="flex justify-between">
1473 |                 <dt class="text-gray-500">Set:</dt>
1474 |                 <dd class="text-gray-900">{resolveSetName(selectedCard)}</dd>
1475 |               </div>
1476 |               <div class="flex justify-between">
1477 |                 <dt class="text-gray-500">Rarity:</dt>
1478 |                 <dd class="text-gray-900">
1479 |                   <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
1480 |                     {selectedCard.card?.rarity || 'Unknown'}
1481 |                   </span>
1482 |                 </dd>
1483 |               </div>
1484 |               {#if selectedCard.card?.types?.length}
1485 |                 <div class="flex justify-between">
1486 |                   <dt class="text-gray-500">Type:</dt>
1487 |                   <dd class="text-gray-900">{selectedCard.card.types.join(', ')}</dd>
1488 |                 </div>
1489 |               {/if}
1490 |               {#if selectedCard.card?.hp}
1491 |                 <div class="flex justify-between">
1492 |                   <dt class="text-gray-500">HP:</dt>
1493 |                   <dd class="text-gray-900">{selectedCard.card.hp}</dd>
1494 |                 </div>
1495 |               {/if}
1496 |               {#if selectedCard.card?.supertype}
1497 |                 <div class="flex justify-between">
1498 |                   <dt class="text-gray-500">Supertype:</dt>
1499 |                   <dd class="text-gray-900">{selectedCard.card.supertype}</dd>
1500 |                 </div>
1501 |               {/if}
1502 |               {#if selectedCard.card?.subtype?.length}
1503 |                 <div class="flex justify-between">
1504 |                   <dt class="text-gray-500">Subtype:</dt>
1505 |                   <dd class="text-gray-900">{selectedCard.card.subtype.join(', ')}</dd>
1506 |                 </div>
1507 |               {/if}
1508 |             </dl>
1509 |           </div>
1510 |           
1511 |           <!-- Card Features -->
1512 |           {#if selectedCard.card?.is_reverse || selectedCard.card?.is_holo || selectedCard.card?.is_first_edition || selectedCard.card?.is_shadowless || selectedCard.card?.is_unlimited || selectedCard.card?.is_promo}
1513 |             <div class="bg-purple-50 p-4 rounded-lg">
1514 |               <h4 class="font-semibold text-gray-900 mb-3">Special Features</h4>
1515 |               <div class="flex flex-wrap gap-2">
1516 |                 {#if selectedCard.card?.is_reverse}
1517 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
1518 |                     🔄 Reverse Holo
1519 |                   </span>
1520 |                 {/if}
1521 |                 {#if selectedCard.card?.is_holo}
1522 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-rainbow-100 text-rainbow-800 bg-gradient-to-r from-pink-100 to-blue-100">
1523 |                     ✨ Holographic
1524 |                   </span>
1525 |                 {/if}
1526 |                 {#if selectedCard.card?.is_first_edition}
1527 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
1528 |                     🥇 First Edition
1529 |                   </span>
1530 |                 {/if}
1531 |                 {#if selectedCard.card?.is_shadowless}
1532 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
1533 |                     👤 Shadowless
1534 |                   </span>
1535 |                 {/if}
1536 |                 {#if selectedCard.card?.is_unlimited}
1537 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
1538 |                     ♾️ Unlimited
1539 |                   </span>
1540 |                 {/if}
1541 |                 {#if selectedCard.card?.is_promo}
1542 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
1543 |                     🎁 Promo
1544 |                   </span>
1545 |                 {/if}
1546 |               </div>
1547 |             </div>
1548 |           {/if}
1549 |           
1550 |           <!-- Market Info -->
1551 |           <div class="bg-green-50 p-4 rounded-lg">
1552 |             <h4 class="font-semibold text-gray-900 mb-3">Market Information</h4>
1553 |             <dl class="space-y-2 text-sm">
1554 |               <div class="flex justify-between">
1555 |                 <dt class="text-gray-500">Status:</dt>
1556 |                 <dd class="text-gray-900">
1557 |                   <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium {selectedCard.is_listed ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
1558 |                     {selectedCard.is_listed ? 'Listed' : 'Owned'}
1559 |                   </span>
1560 |                 </dd>
1561 |               </div>
1562 |               {#if selectedCard.listing?.usd_price}
1563 |                 <div class="flex justify-between">
1564 |                   <dt class="text-gray-500">Listed Price:</dt>
1565 |                   <dd class="text-green-600 font-semibold">${selectedCard.listing.usd_price}</dd>
1566 |                 </div>
1567 |               {/if}
1568 |               {#if selectedCard.card?.raw_price}
1569 |                 <div class="flex justify-between">
1570 |                   <dt class="text-gray-500">Market Value:</dt>
1571 |                   <dd class="text-gray-900">${selectedCard.card.raw_price}</dd>
1572 |                 </div>
1573 |               {/if}
1574 |             </dl>
1575 |           </div>
1576 |           
1577 |           <!-- Technical Details -->
1578 |           <div class="bg-blue-50 p-4 rounded-lg">
1579 |             <h4 class="font-semibold text-gray-900 mb-3">Technical Details</h4>
1580 |             <dl class="space-y-2 text-sm">
1581 |               <div class="flex justify-between">
1582 |                 <dt class="text-gray-500">Card ID:</dt>
1583 |                 <dd class="text-gray-900 font-mono">{selectedCard.card?.id || selectedCard.id}</dd>
1584 |               </div>
1585 |               <div class="flex justify-between">
1586 |                 <dt class="text-gray-500">Token ID:</dt>
1587 |                 <dd class="text-gray-900 font-mono">{selectedCard.token_id}</dd>
1588 |               </div>
1589 |               <div class="flex justify-between">
1590 |                 <dt class="text-gray-500">Unique ID:</dt>
1591 |                 <dd class="text-gray-900 font-mono text-xs">{selectedCard.unique_id}</dd>
1592 |               </div>
1593 |             </dl>
1594 |           </div>
1595 |         </div>
1596 |       </div>
1597 |     </div>
1598 |   </div>
1599 | {/if}
1600 | 
1601 |   </div>
1602 | </div>


--------------------------------------------------------------------------------
/src/routes/profiles/+page.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { onMount } from 'svelte';
  3 |   
  4 |   let profiles: any[] = $state([]);
  5 |   let loading = $state(false);
  6 |   let error = $state('');
  7 | 
  8 |   onMount(async () => {
  9 |     await loadProfiles();
 10 |   });
 11 | 
 12 |   async function loadProfiles() {
 13 |     loading = true;
 14 |     error = '';
 15 |     
 16 |     try {
 17 |       const response = await fetch('/api/profiles');
 18 |       if (!response.ok) {
 19 |         throw new Error('Failed to load profiles');
 20 |       }
 21 |       profiles = await response.json();
 22 |     } catch (err) {
 23 |       error = err instanceof Error ? err.message : 'An error occurred';
 24 |     } finally {
 25 |       loading = false;
 26 |     }
 27 |   }
 28 | 
 29 |   async function deleteProfile(id: string) {
 30 |     if (!confirm('Are you sure you want to delete this profile?')) return;
 31 |     
 32 |     try {
 33 |       const response = await fetch(`/api/profiles/${id}`, {
 34 |         method: 'DELETE'
 35 |       });
 36 |       
 37 |       if (!response.ok) {
 38 |         throw new Error('Failed to delete profile');
 39 |       }
 40 |       
 41 |       await loadProfiles();
 42 |     } catch (err) {
 43 |       error = err instanceof Error ? err.message : 'Failed to delete profile';
 44 |     }
 45 |   }
 46 | </script>
 47 | 
 48 | <div class="px-4 py-8">
 49 |   <div class="flex justify-between items-center mb-8">
 50 |     <h1 class="text-3xl font-bold text-gray-900">Profiles</h1>
 51 |     <a 
 52 |       href="/profiles/new" 
 53 |       class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
 54 |     >
 55 |       Create Profile
 56 |     </a>
 57 |   </div>
 58 | 
 59 |   {#if error}
 60 |     <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
 61 |       {error}
 62 |     </div>
 63 |   {/if}
 64 | 
 65 |   {#if loading}
 66 |     <div class="text-center py-12">
 67 |       <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
 68 |       <p class="mt-2 text-gray-600">Loading profiles...</p>
 69 |     </div>
 70 |   {:else if profiles.length === 0}
 71 |     <div class="text-center py-12">
 72 |       <div class="text-gray-400 mb-4">
 73 |         <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
 74 |           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
 75 |         </svg>
 76 |       </div>
 77 |       <h3 class="text-lg font-medium text-gray-900 mb-2">No profiles yet</h3>
 78 |       <p class="text-gray-500 mb-6">Get started by creating your first profile.</p>
 79 |       <a 
 80 |         href="/profiles/new" 
 81 |         class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
 82 |       >
 83 |         Create Your First Profile
 84 |       </a>
 85 |     </div>
 86 |   {:else}
 87 |     <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
 88 |       {#each profiles as profile (profile.id)}
 89 |         <div class="bg-white overflow-hidden shadow rounded-lg">
 90 |           <div class="p-6">
 91 |             <div class="flex items-center justify-between mb-4">
 92 |               <h3 class="text-lg font-medium text-gray-900">{profile.name}</h3>
 93 |               <div class="flex space-x-2">
 94 |                 <a 
 95 |                   href="/profiles/{profile.id}" 
 96 |                   class="text-indigo-600 hover:text-indigo-900 text-sm"
 97 |                 >
 98 |                   View
 99 |                 </a>
100 |                 <a 
101 |                   href="/profiles/{profile.id}/edit" 
102 |                   class="text-indigo-600 hover:text-indigo-900 text-sm"
103 |                 >
104 |                   Edit
105 |                 </a>
106 |                 <button 
107 |                   onclick={() => deleteProfile(profile.id)}
108 |                   class="text-red-600 hover:text-red-900 text-sm"
109 |                 >
110 |                   Delete
111 |                 </button>
112 |               </div>
113 |             </div>
114 |             
115 |             {#if profile.bio}
116 |               <p class="text-gray-600 text-sm mb-3 line-clamp-2">{profile.bio}</p>
117 |             {/if}
118 |             
119 |             <div class="space-y-1 text-sm text-gray-500">
120 |               {#if profile.email}
121 |                 <p>✉️ {profile.email}</p>
122 |               {/if}
123 |               {#if profile.location}
124 |                 <p>📍 {profile.location}</p>
125 |               {/if}
126 |               {#if profile.website}
127 |                 <p>🌐 <a href={profile.website} class="text-indigo-600 hover:text-indigo-900" target="_blank">{profile.website}</a></p>
128 |               {/if}
129 |             </div>
130 |             
131 |             <div class="mt-4 flex space-x-2">
132 |               {#if profile.twitter}
133 |                 <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
134 |                   Twitter
135 |                 </span>
136 |               {/if}
137 |               {#if profile.github}
138 |                 <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
139 |                   GitHub
140 |                 </span>
141 |               {/if}
142 |               {#if profile.linkedin}
143 |                 <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
144 |                   LinkedIn
145 |                 </span>
146 |               {/if}
147 |             </div>
148 |           </div>
149 |         </div>
150 |       {/each}
151 |     </div>
152 |   {/if}
153 | </div>


--------------------------------------------------------------------------------
/src/routes/profiles/[id]/+page.server.ts:
--------------------------------------------------------------------------------
 1 | import { error } from '@sveltejs/kit';
 2 | import { getProfile } from '$lib/server/db/profiles.js';
 3 | import type { PageServerLoad } from './$types.js';
 4 | 
 5 | export const load: PageServerLoad = async ({ params }) => {
 6 |   const profile = await getProfile(params.id);
 7 |   
 8 |   if (!profile) {
 9 |     throw error(404, 'Profile not found');
10 |   }
11 |   
12 |   return {
13 |     profile
14 |   };
15 | };


--------------------------------------------------------------------------------
/src/routes/profiles/[id]/+page.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   let { data } = $props();
  3 |   
  4 |   let ripUsername = $state('');
  5 |   let comparisonResult = $state<any>(null);
  6 |   let extractedData = $state(null);
  7 |   let loading = $state(false);
  8 |   let error = $state('');
  9 | 
 10 |   async function runComparison() {
 11 |     if (!ripUsername.trim()) {
 12 |       error = 'Please enter a rip.fun username';
 13 |       return;
 14 |     }
 15 | 
 16 |     const targetUrl = `https://www.rip.fun/profile/${ripUsername.trim()}`;
 17 | 
 18 |     loading = true;
 19 |     error = '';
 20 |     comparisonResult = null;
 21 |     extractedData = null;
 22 | 
 23 |     try {
 24 |       const response = await fetch('/api/compare', {
 25 |         method: 'POST',
 26 |         headers: {
 27 |           'Content-Type': 'application/json',
 28 |         },
 29 |         body: JSON.stringify({
 30 |           profileId: data.profile.id,
 31 |           targetUrl: targetUrl,
 32 |         }),
 33 |       });
 34 | 
 35 |       if (!response.ok) {
 36 |         const errorData = await response.json();
 37 |         throw new Error(errorData.error || 'Comparison failed');
 38 |       }
 39 | 
 40 |       const result = await response.json();
 41 |       comparisonResult = result.comparison;
 42 |       extractedData = result.extractedData;
 43 |     } catch (err) {
 44 |       error = err instanceof Error ? err.message : 'An error occurred';
 45 |     } finally {
 46 |       loading = false;
 47 |     }
 48 |   }
 49 | 
 50 |   function getStatusColor(type: string): string {
 51 |     switch (type) {
 52 |       case 'matched': return 'bg-green-100 text-green-800';
 53 |       case 'different': return 'bg-yellow-100 text-yellow-800';
 54 |       case 'missing': return 'bg-red-100 text-red-800';
 55 |       default: return 'bg-gray-100 text-gray-800';
 56 |     }
 57 |   }
 58 | </script>
 59 | 
 60 | <div class="px-4 py-8">
 61 |   <div class="max-w-6xl mx-auto">
 62 |     <div class="flex justify-between items-start mb-8">
 63 |       <div>
 64 |         <h1 class="text-3xl font-bold text-gray-900">{data.profile.name}</h1>
 65 |         {#if data.profile.bio}
 66 |           <p class="mt-2 text-gray-600">{data.profile.bio}</p>
 67 |         {/if}
 68 |       </div>
 69 |       <div class="flex space-x-3">
 70 |         <a
 71 |           href="/profiles/{data.profile.id}/edit"
 72 |           class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
 73 |         >
 74 |           Edit Profile
 75 |         </a>
 76 |         <a
 77 |           href="/profiles"
 78 |           class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
 79 |         >
 80 |           All Profiles
 81 |         </a>
 82 |       </div>
 83 |     </div>
 84 | 
 85 |     <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
 86 |       <div class="lg:col-span-1">
 87 |         <div class="bg-white shadow rounded-lg p-6">
 88 |           <h2 class="text-lg font-medium text-gray-900 mb-4">Profile Information</h2>
 89 |           <dl class="space-y-3">
 90 |             {#if data.profile.email}
 91 |               <div>
 92 |                 <dt class="text-sm font-medium text-gray-500">Email</dt>
 93 |                 <dd class="text-sm text-gray-900">{data.profile.email}</dd>
 94 |               </div>
 95 |             {/if}
 96 |             {#if data.profile.location}
 97 |               <div>
 98 |                 <dt class="text-sm font-medium text-gray-500">Location</dt>
 99 |                 <dd class="text-sm text-gray-900">{data.profile.location}</dd>
100 |               </div>
101 |             {/if}
102 |             {#if data.profile.website}
103 |               <div>
104 |                 <dt class="text-sm font-medium text-gray-500">Website</dt>
105 |                 <dd class="text-sm text-gray-900">
106 |                   <a href={data.profile.website} class="text-indigo-600 hover:text-indigo-900" target="_blank">
107 |                     {data.profile.website}
108 |                   </a>
109 |                 </dd>
110 |               </div>
111 |             {/if}
112 |             {#if data.profile.twitter}
113 |               <div>
114 |                 <dt class="text-sm font-medium text-gray-500">Twitter</dt>
115 |                 <dd class="text-sm text-gray-900">@{data.profile.twitter}</dd>
116 |               </div>
117 |             {/if}
118 |             {#if data.profile.github}
119 |               <div>
120 |                 <dt class="text-sm font-medium text-gray-500">GitHub</dt>
121 |                 <dd class="text-sm text-gray-900">{data.profile.github}</dd>
122 |               </div>
123 |             {/if}
124 |             {#if data.profile.linkedin}
125 |               <div>
126 |                 <dt class="text-sm font-medium text-gray-500">LinkedIn</dt>
127 |                 <dd class="text-sm text-gray-900">{data.profile.linkedin}</dd>
128 |               </div>
129 |             {/if}
130 |             {#if data.profile.wallet}
131 |               <div>
132 |                 <dt class="text-sm font-medium text-gray-500">Wallet</dt>
133 |                 <dd class="text-sm text-gray-900 font-mono break-all">{data.profile.wallet}</dd>
134 |               </div>
135 |             {/if}
136 |           </dl>
137 |         </div>
138 |       </div>
139 | 
140 |       <div class="lg:col-span-2">
141 |         <div class="bg-white shadow rounded-lg p-6 mb-6">
142 |           <h2 class="text-lg font-medium text-gray-900 mb-4">Compare with rip.fun Profile</h2>
143 |           
144 |           <div class="space-y-4">
145 |             <div>
146 |               <label for="ripUsername" class="block text-sm font-medium text-gray-700">
147 |                 rip.fun Username
148 |               </label>
149 |               <div class="mt-1 flex rounded-md shadow-sm">
150 |                 <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
151 |                   https://www.rip.fun/profile/
152 |                 </span>
153 |                 <input
154 |                   type="text"
155 |                   id="ripUsername"
156 |                   bind:value={ripUsername}
157 |                   class="block w-full rounded-none rounded-r-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
158 |                   placeholder="username"
159 |                 />
160 |               </div>
161 |               <p class="mt-1 text-sm text-gray-500">
162 |                 Enter the username from a rip.fun profile to extract profile data including username, bio, email, avatar, wallet addresses, verification status, and collection statistics.
163 |               </p>
164 |             </div>
165 | 
166 |             {#if error}
167 |               <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
168 |                 {error}
169 |               </div>
170 |             {/if}
171 | 
172 |             <button
173 |               onclick={runComparison}
174 |               disabled={loading}
175 |               class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 disabled:opacity-50"
176 |             >
177 |               {#if loading}
178 |                 <div class="animate-spin -ml-1 mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
179 |                 Running Comparison...
180 |               {:else}
181 |                 Compare Profile
182 |               {/if}
183 |             </button>
184 |           </div>
185 |         </div>
186 | 
187 |         {#if comparisonResult}
188 |           <div class="bg-white shadow rounded-lg p-6 mb-6">
189 |             <h2 class="text-lg font-medium text-gray-900 mb-4">Extracted Data from rip.fun</h2>
190 |             <div class="bg-gray-50 rounded p-4">
191 |               <details class="cursor-pointer">
192 |                 <summary class="font-medium text-gray-700 hover:text-gray-900 select-none">
193 |                   View Raw Extracted Data (Click to expand)
194 |                 </summary>
195 |                 <pre class="mt-3 text-xs text-gray-600 overflow-x-auto whitespace-pre-wrap">{JSON.stringify(extractedData, null, 2)}</pre>
196 |               </details>
197 |             </div>
198 |           </div>
199 | 
200 |           <div class="bg-white shadow rounded-lg p-6">
201 |             <h2 class="text-lg font-medium text-gray-900 mb-4">Comparison Results</h2>
202 |             
203 |             <div class="space-y-6">
204 |               {#if Object.keys(comparisonResult.matched).length > 0}
205 |                 <div>
206 |                   <h3 class="text-md font-medium text-green-800 mb-2">✅ Matched Fields</h3>
207 |                   <div class="space-y-2">
208 |                     {#each Object.entries(comparisonResult.matched) as [key, value]}
209 |                       <div class="flex items-center justify-between p-2 bg-green-50 rounded">
210 |                         <span class="font-medium text-sm text-gray-700 capitalize">{key}:</span>
211 |                         <span class="text-sm text-gray-900">{value}</span>
212 |                       </div>
213 |                     {/each}
214 |                   </div>
215 |                 </div>
216 |               {/if}
217 | 
218 |               {#if Object.keys(comparisonResult.different).length > 0}
219 |                 <div>
220 |                   <h3 class="text-md font-medium text-yellow-800 mb-2">⚠️ Different Values</h3>
221 |                   <div class="space-y-3">
222 |                     {#each Object.entries(comparisonResult.different) as [key, values]}
223 |                       <div class="p-3 bg-yellow-50 rounded">
224 |                         <h4 class="font-medium text-sm text-gray-700 mb-2 capitalize">{key}</h4>
225 |                         <div class="grid grid-cols-2 gap-4 text-sm">
226 |                           <div>
227 |                             <span class="font-medium text-gray-600">Your Profile:</span>
228 |                             <p class="text-gray-900 mt-1">{(values as any).profile}</p>
229 |                           </div>
230 |                           <div>
231 |                             <span class="font-medium text-gray-600">Extracted:</span>
232 |                             <p class="text-gray-900 mt-1">{(values as any).extracted}</p>
233 |                           </div>
234 |                         </div>
235 |                       </div>
236 |                     {/each}
237 |                   </div>
238 |                 </div>
239 |               {/if}
240 | 
241 |               {#if Object.keys(comparisonResult.missing).length > 0}
242 |                 <div>
243 |                   <h3 class="text-md font-medium text-red-800 mb-2">❌ Missing from Target</h3>
244 |                   <div class="space-y-2">
245 |                     {#each Object.entries(comparisonResult.missing) as [key, value]}
246 |                       <div class="flex items-center justify-between p-2 bg-red-50 rounded">
247 |                         <span class="font-medium text-sm text-gray-700 capitalize">{key}:</span>
248 |                         <span class="text-sm text-gray-900">{value}</span>
249 |                       </div>
250 |                     {/each}
251 |                   </div>
252 |                 </div>
253 |               {/if}
254 | 
255 |               {#if Object.keys(comparisonResult.matched).length === 0 && Object.keys(comparisonResult.different).length === 0 && Object.keys(comparisonResult.missing).length === 0}
256 |                 <div class="text-center py-8">
257 |                   <p class="text-gray-500">No data could be compared. The target page may not contain SvelteKit data or the data structure doesn't match your profile fields.</p>
258 |                 </div>
259 |               {/if}
260 |             </div>
261 |           </div>
262 |         {/if}
263 |       </div>
264 |     </div>
265 | 
266 |     {#if data.profile.comparisons && data.profile.comparisons.length > 0}
267 |       <div class="mt-8 bg-white shadow rounded-lg p-6">
268 |         <h2 class="text-lg font-medium text-gray-900 mb-4">Recent Comparisons</h2>
269 |         <div class="space-y-3">
270 |           {#each data.profile.comparisons as comparison}
271 |             <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
272 |               <div>
273 |                 <p class="text-sm font-medium text-gray-900">{comparison.targetUrl}</p>
274 |                 <p class="text-xs text-gray-500">{new Date(comparison.createdAt).toLocaleString()}</p>
275 |               </div>
276 |             </div>
277 |           {/each}
278 |         </div>
279 |       </div>
280 |     {/if}
281 |   </div>
282 | </div>


--------------------------------------------------------------------------------
/src/routes/profiles/[id]/edit/+page.server.ts:
--------------------------------------------------------------------------------
 1 | import { error } from '@sveltejs/kit';
 2 | import { getProfile } from '$lib/server/db/profiles.js';
 3 | import type { PageServerLoad } from './$types.js';
 4 | 
 5 | export const load: PageServerLoad = async ({ params }) => {
 6 |   const profile = await getProfile(params.id);
 7 |   
 8 |   if (!profile) {
 9 |     throw error(404, 'Profile not found');
10 |   }
11 |   
12 |   return {
13 |     profile
14 |   };
15 | };


--------------------------------------------------------------------------------
/src/routes/profiles/[id]/edit/+page.svelte:
--------------------------------------------------------------------------------
 1 | <script lang="ts">
 2 |   import { goto } from '$app/navigation';
 3 |   import ProfileForm from '$lib/components/ProfileForm.svelte';
 4 |   
 5 |   let { data } = $props();
 6 |   
 7 |   let loading = $state(false);
 8 |   let error = $state('');
 9 | 
10 |   async function handleSubmit(profileData: any) {
11 |     loading = true;
12 |     error = '';
13 |     
14 |     try {
15 |       const response = await fetch(`/api/profiles/${data.profile.id}`, {
16 |         method: 'PUT',
17 |         headers: {
18 |           'Content-Type': 'application/json',
19 |         },
20 |         body: JSON.stringify(profileData),
21 |       });
22 | 
23 |       if (!response.ok) {
24 |         const errorData = await response.json();
25 |         throw new Error(errorData.error || 'Failed to update profile');
26 |       }
27 | 
28 |       goto(`/profiles/${data.profile.id}`);
29 |     } catch (err) {
30 |       error = err instanceof Error ? err.message : 'An error occurred';
31 |     } finally {
32 |       loading = false;
33 |     }
34 |   }
35 | </script>
36 | 
37 | <div class="px-4 py-8">
38 |   <div class="max-w-3xl mx-auto">
39 |     <div class="mb-8">
40 |       <h1 class="text-3xl font-bold text-gray-900">Edit Profile</h1>
41 |       <p class="mt-2 text-gray-600">
42 |         Update your profile information.
43 |       </p>
44 |     </div>
45 | 
46 |     {#if error}
47 |       <div class="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
48 |         {error}
49 |       </div>
50 |     {/if}
51 | 
52 |     <div class="bg-white shadow rounded-lg p-6">
53 |       <ProfileForm profile={{
54 |         name: data.profile.name,
55 |         bio: data.profile.bio || undefined,
56 |         website: data.profile.website || undefined,
57 |         twitter: data.profile.twitter || undefined,
58 |         github: data.profile.github || undefined,
59 |         linkedin: data.profile.linkedin || undefined,
60 |         wallet: data.profile.wallet || undefined,
61 |         email: data.profile.email || undefined,
62 |         location: data.profile.location || undefined,
63 |         avatar: data.profile.avatar || undefined,
64 |       }} {loading} onSubmit={handleSubmit} />
65 |     </div>
66 |   </div>
67 | </div>


--------------------------------------------------------------------------------
/src/routes/profiles/new/+page.svelte:
--------------------------------------------------------------------------------
 1 | <script lang="ts">
 2 |   import { goto } from '$app/navigation';
 3 |   import ProfileForm from '$lib/components/ProfileForm.svelte';
 4 |   
 5 |   let loading = $state(false);
 6 |   let error = $state('');
 7 | 
 8 |   async function handleSubmit(profileData: any) {
 9 |     loading = true;
10 |     error = '';
11 |     
12 |     try {
13 |       const response = await fetch('/api/profiles', {
14 |         method: 'POST',
15 |         headers: {
16 |           'Content-Type': 'application/json',
17 |         },
18 |         body: JSON.stringify(profileData),
19 |       });
20 | 
21 |       if (!response.ok) {
22 |         const errorData = await response.json();
23 |         throw new Error(errorData.error || 'Failed to create profile');
24 |       }
25 | 
26 |       const profile = await response.json();
27 |       goto(`/profiles/${profile.id}`);
28 |     } catch (err) {
29 |       error = err instanceof Error ? err.message : 'An error occurred';
30 |     } finally {
31 |       loading = false;
32 |     }
33 |   }
34 | </script>
35 | 
36 | <div class="px-4 py-8">
37 |   <div class="max-w-3xl mx-auto">
38 |     <div class="mb-8">
39 |       <h1 class="text-3xl font-bold text-gray-900">Create Profile</h1>
40 |       <p class="mt-2 text-gray-600">
41 |         Add your personal information to create a new profile for synchronization.
42 |       </p>
43 |     </div>
44 | 
45 |     {#if error}
46 |       <div class="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
47 |         {error}
48 |       </div>
49 |     {/if}
50 | 
51 |     <div class="bg-white shadow rounded-lg p-6">
52 |       <ProfileForm {loading} onSubmit={handleSubmit} />
53 |     </div>
54 |   </div>
55 | </div>


--------------------------------------------------------------------------------
/src/routes/trade-finder/+page.svelte:
--------------------------------------------------------------------------------
  1 | <script lang="ts">
  2 |   import { onMount } from 'svelte';
  3 |   import TradeTable from '$lib/components/TradeTable.svelte';
  4 |   import UserSearchInput from '$lib/components/UserSearchInput.svelte';
  5 |   import SetSummaryTable from '$lib/components/trade/SetSummaryTable.svelte';
  6 |   import { buildUserSetSummaryFromCounts } from '$lib/utils/trade/summaries';
  7 |   
  8 |   let userA = '';
  9 |   let userB = '';
 10 |   let tradeResults: any = null;
 11 |   let loading = false;
 12 |   let error = '';
 13 | 
 14 |   // Filtering and pagination
 15 |   let selectedSet = 'all';
 16 |   let selectedRarity = 'all';
 17 |   let selectedTradeType = 'all';
 18 |   let currentPage = 1;
 19 |   let itemsPerPage = 50;
 20 |   let filteredTrades: any[] = [];
 21 |   let availableSets: any[] = [];
 22 |   let availableRarities: string[] = [];
 23 |   let totalPages = 1;
 24 | 
 25 |   // Caches and derived data for summaries
 26 |   let setTotals: Record<string, number> = {};
 27 |   let setNameById: Record<string, string> = {};
 28 |   let userSummaryA: any[] = [];
 29 |   let userSummaryB: any[] = [];
 30 |   let summariesLoading = false;
 31 | 
 32 |   function getSetName(id: string): string {
 33 |     // Special-case mapping consistent with extract page
 34 |     if (id === 'sv3pt5') return 'Scarlet & Violet 151';
 35 |     return setNameById[id] || id || 'Unknown Set';
 36 |   }
 37 | 
 38 |   async function getSetTotal(id: string): Promise<number> {
 39 |     if (!id) return 0;
 40 |     if (setTotals[id] !== undefined) return setTotals[id];
 41 |     try {
 42 |       const res = await fetch(`/api/set/${id}`);
 43 |       const data = await res.json();
 44 |       const total = Array.isArray(data?.cards) ? data.cards.length : 0;
 45 |       setTotals[id] = total;
 46 |       return total;
 47 |     } catch (e) {
 48 |       setTotals[id] = 0;
 49 |       return 0;
 50 |     }
 51 |   }
 52 | 
 53 |   async function refreshSummaries(): Promise<void> {
 54 |     if (!tradeResults) return;
 55 |     // Ensure setNameById from availableSets
 56 |     setNameById = Object.fromEntries((availableSets || []).map((s: any) => [s.id, s.name]));
 57 | 
 58 |     const ownedA: Record<string, number> = tradeResults.ownedBySetA || {};
 59 |     const ownedB: Record<string, number> = tradeResults.ownedBySetB || {};
 60 |     const missingA: Record<string, number> = tradeResults.missingBySetA || {};
 61 |     const missingB: Record<string, number> = tradeResults.missingBySetB || {};
 62 | 
 63 |     summariesLoading = true;
 64 |     try {
 65 |       // Preload totals for all involved set ids (owned or missing)
 66 |       const ids = Array.from(new Set([
 67 |         ...Object.keys(ownedA),
 68 |         ...Object.keys(ownedB),
 69 |         ...Object.keys(missingA),
 70 |         ...Object.keys(missingB)
 71 |       ]));
 72 |       await Promise.all(ids.map((id) => getSetTotal(id)));
 73 | 
 74 |       // Build from owned counts but enforce Owned = Total - Missing (unique)
 75 |       userSummaryA = buildUserSetSummaryFromCounts(ownedA, {
 76 |         getSetName,
 77 |         getSetTotal: (id: string) => setTotals[id] || 0,
 78 |       }).map((row: any) => {
 79 |         const total = setTotals[row.setId] ?? row.total ?? 0;
 80 |         const missing = Number(missingA[row.setId] || 0);
 81 |         const owned = Math.max(0, total - missing);
 82 |         const percent = total > 0 ? Math.min(100, Math.round((owned / total) * 100)) : 0;
 83 |         return { ...row, owned, total, percent };
 84 |       }).sort((a: any, b: any) => (b.percent - a.percent) || a.setName.localeCompare(b.setName));
 85 | 
 86 |       userSummaryB = buildUserSetSummaryFromCounts(ownedB, {
 87 |         getSetName,
 88 |         getSetTotal: (id: string) => setTotals[id] || 0,
 89 |       }).map((row: any) => {
 90 |         const total = setTotals[row.setId] ?? row.total ?? 0;
 91 |         const missing = Number(missingB[row.setId] || 0);
 92 |         const owned = Math.max(0, total - missing);
 93 |         const percent = total > 0 ? Math.min(100, Math.round((owned / total) * 100)) : 0;
 94 |         return { ...row, owned, total, percent };
 95 |       }).sort((a: any, b: any) => (b.percent - a.percent) || a.setName.localeCompare(b.setName));
 96 |     } finally {
 97 |       summariesLoading = false;
 98 |     }
 99 |   }
100 | 
101 | 
102 |   async function compareUsers(): Promise<void> {
103 |     if (!userA || !userB) {
104 |       error = 'Please enter both usernames';
105 |       return;
106 |     }
107 | 
108 |     if (userA === userB) {
109 |       error = 'Cannot compare user with themselves';
110 |       return;
111 |     }
112 | 
113 |     loading = true;
114 |     error = '';
115 |     tradeResults = null;
116 | 
117 |     try {
118 |       const response = await fetch('/api/trade-compare', {
119 |         method: 'POST',
120 |         headers: {
121 |           'Content-Type': 'application/json',
122 |         },
123 |         body: JSON.stringify({ userA, userB })
124 |       });
125 | 
126 |       const data = await response.json();
127 | 
128 |       if (response.ok && data.success) {
129 |         tradeResults = data;
130 |         availableSets = data.availableSets || [];
131 |         
132 |         // Extract available rarities from trade results
133 |         const raritySet = new Set<string>();
134 |         const allTrades = [
135 |           ...(data.tradeAnalysis.perfectTrades || []),
136 |           ...(data.tradeAnalysis.userACanReceive || []),
137 |           ...(data.tradeAnalysis.userACanGive || [])
138 |         ];
139 |         
140 |         allTrades.forEach((trade: any) => {
141 |           if (trade.card.rarity) {
142 |             raritySet.add(trade.card.rarity);
143 |           }
144 |         });
145 |         
146 |         availableRarities = Array.from(raritySet).sort();
147 |         console.log('Trade comparison results:', data);
148 |         console.log('Available rarities:', availableRarities);
149 |         
150 |         // Load filtered trades for the first time
151 |         await loadFilteredTrades();
152 | 
153 |         // Build summaries
154 |         await refreshSummaries();
155 |       } else {
156 |         error = data.error || 'Failed to compare users';
157 |       }
158 |     } catch (err) {
159 |       error = 'Network error occurred';
160 |       console.error('Trade comparison error:', err);
161 |     } finally {
162 |       loading = false;
163 |     }
164 |   }
165 | 
166 |   async function loadFilteredTrades(): Promise<void> {
167 |     if (!userA || !userB) return;
168 | 
169 |     try {
170 |       const params = new URLSearchParams({
171 |         userA,
172 |         userB,
173 |         set: selectedSet,
174 |         page: currentPage.toString(),
175 |         limit: itemsPerPage.toString()
176 |       });
177 | 
178 |       const response = await fetch(`/api/trade-compare?${params}`);
179 |       const data = await response.json();
180 | 
181 |       if (response.ok && data.success) {
182 |         let trades = data.trades || [];
183 |         
184 |         // Apply client-side filtering for rarity and trade type
185 |         if (selectedRarity !== 'all') {
186 |           trades = trades.filter((trade: any) => trade.card.rarity === selectedRarity);
187 |         }
188 |         
189 |         if (selectedTradeType !== 'all') {
190 |           trades = trades.filter((trade: any) => trade.tradeType === selectedTradeType);
191 |         }
192 |         
193 |         filteredTrades = trades;
194 |         totalPages = data.pagination?.totalPages || 1;
195 |         console.log(`Loaded ${filteredTrades.length} trades for set ${selectedSet}, rarity ${selectedRarity}, type ${selectedTradeType}, page ${currentPage}`);
196 |       } else {
197 |         console.error('Failed to load filtered trades:', data.error);
198 |       }
199 |     } catch (err) {
200 |       console.error('Error loading filtered trades:', err);
201 |     }
202 |   }
203 | 
204 |   // Handle filter changes
205 |   async function handleSetChange(): Promise<void> {
206 |     currentPage = 1; // Reset to first page
207 |     await loadFilteredTrades();
208 |   }
209 | 
210 |   async function handleRarityChange(): Promise<void> {
211 |     currentPage = 1; // Reset to first page
212 |     await loadFilteredTrades();
213 |   }
214 | 
215 |   async function handleTradeTypeChange(): Promise<void> {
216 |     currentPage = 1; // Reset to first page
217 |     await loadFilteredTrades();
218 |   }
219 | 
220 |   // Handle page changes
221 |   async function goToPage(page: number): Promise<void> {
222 |     currentPage = page;
223 |     await loadFilteredTrades();
224 |   }
225 | 
226 |   function getTradeTypeColor(tradeType: string): string {
227 |     switch (tradeType) {
228 |       case 'perfect': return 'bg-green-100 text-green-800 border-green-300';
229 |       case 'receive': return 'bg-blue-100 text-blue-800 border-blue-300';
230 |       case 'give': return 'bg-orange-100 text-orange-800 border-orange-300';
231 |       case 'impossible': return 'bg-gray-100 text-gray-600 border-gray-300';
232 |       default: return 'bg-gray-100 text-gray-600 border-gray-300';
233 |     }
234 |   }
235 | 
236 |   function getTradeTypeIcon(tradeType: string): string {
237 |     switch (tradeType) {
238 |       case 'perfect': return '🎯';
239 |       case 'receive': return '⬅️';
240 |       case 'give': return '➡️';  
241 |       case 'impossible': return '❌';
242 |       default: return '❔';
243 |     }
244 |   }
245 | 
246 |   function formatCurrency(amount: number): string {
247 |     return new Intl.NumberFormat('en-US', {
248 |       style: 'currency',
249 |       currency: 'USD',
250 |       minimumFractionDigits: 2
251 |     }).format(amount);
252 |   }
253 | 
254 | 
255 | </script>
256 | 
257 | <svelte:head>
258 |   <title>Trade Finder - rip.fun Data Extractor</title>
259 | </svelte:head>
260 | 
261 | <div class="min-h-[90vh] container mx-auto px-6 py-12">
262 |   <div class="max-w-[1400px] mx-auto">
263 |     <!-- Header -->
264 |     <div class="text-center mb-12">
265 |       <h1 class="text-3xl font-bold text-gray-900 mb-4">🔄 Trade Finder</h1>
266 |       <p class="text-lg text-gray-600 max-w-2xl mx-auto">
267 |         Compare two rip.fun users to find perfect trading opportunities. See which cards you can trade with each other!
268 |       </p>
269 |     </div>
270 | 
271 |     <!-- User Input Form -->
272 |     <div class="bg-white rounded-lg shadow-md p-8 mb-12">
273 |       <div class="grid md:grid-cols-2 gap-8">
274 |         <!-- User A Input -->
275 |         <UserSearchInput
276 |           bind:value={userA}
277 |           label="First User (Username or ID)"
278 |           placeholder="Enter username..."
279 |           on:change={() => {}}
280 |         />
281 | 
282 |         <!-- User B Input -->
283 |         <UserSearchInput
284 |           bind:value={userB}
285 |           label="Second User (Username or ID)"
286 |           placeholder="Enter username..."
287 |           on:change={() => {}}
288 |         />
289 |       </div>
290 | 
291 |       <!-- Compare Button -->
292 |       <div class="mt-8 text-center">
293 |         <button
294 |           type="button"
295 |           on:click={compareUsers}
296 |           disabled={loading || !userA || !userB}
297 |           class="px-8 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
298 |         >
299 |           {#if loading}
300 |             <span class="flex items-center justify-center">
301 |               <div class="animate-spin -ml-1 mr-3 h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
302 |               Analyzing Trades...
303 |             </span>
304 |           {:else}
305 |             🔍 Find Trade Opportunities
306 |           {/if}
307 |         </button>
308 |       </div>
309 | 
310 |       {#if error}
311 |         <div class="mt-4 p-4 bg-red-100 border border-red-300 rounded-lg text-red-700">
312 |           {error}
313 |         </div>
314 |       {/if}
315 |     </div>
316 | 
317 |     <!-- Results -->
318 |     {#if tradeResults}
319 |       <div class="space-y-12">
320 |         <!-- User Summary -->
321 |         <div class="bg-white rounded-lg shadow-md p-8">
322 |           <h2 class="text-xl font-bold mb-4">👥 User Comparison</h2>
323 |           <div class="grid md:grid-cols-2 gap-8">
324 |             <div class="text-center p-6 bg-blue-50 rounded-lg">
325 |               <h3 class="text-lg font-semibold text-blue-900">{tradeResults.userA.username}</h3>
326 |               <p class="text-2xl font-bold text-blue-600">{tradeResults.userA.totalCards}</p>
327 |               <p class="text-sm text-blue-700">Cards Owned</p>
328 |             </div>
329 |             <div class="text-center p-6 bg-green-50 rounded-lg">
330 |               <h3 class="text-lg font-semibold text-green-900">{tradeResults.userB.username}</h3>
331 |               <p class="text-2xl font-bold text-green-600">{tradeResults.userB.totalCards}</p>
332 |               <p class="text-sm text-green-700">Cards Owned</p>
333 |             </div>
334 |           </div>
335 |         </div>
336 | 
337 |         <!-- Set Completion Summaries -->
338 |         <div class="bg-white rounded-lg shadow-md p-8">
339 |           <h2 class="text-xl font-bold mb-6">🗂️ Set Completion</h2>
340 |           {#if summariesLoading}
341 |             <div class="flex items-center text-gray-600">
342 |               <div class="animate-spin -ml-1 mr-3 h-4 w-4 border-2 border-gray-400 border-t-transparent rounded-full"></div>
343 |               Loading set summaries...
344 |             </div>
345 |           {:else if userSummaryA.length > 0 || userSummaryB.length > 0}
346 |             <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
347 |               <SetSummaryTable
348 |                 title={`${tradeResults.userA.username} — Sets Completed`}
349 |                 rows={userSummaryA}
350 |                 columns={[
351 |                   { key: 'setName', header: 'Set' },
352 |                   { key: 'owned', header: 'Owned', align: 'right' },
353 |                   { key: 'total', header: 'Total', align: 'right' },
354 |                   { key: 'percent', header: '%', align: 'right', formatter: (row) => `${row.percent}%` },
355 |                 ]}
356 |               />
357 |               <SetSummaryTable
358 |                 title={`${tradeResults.userB.username} — Sets Completed`}
359 |                 rows={userSummaryB}
360 |                 columns={[
361 |                   { key: 'setName', header: 'Set' },
362 |                   { key: 'owned', header: 'Owned', align: 'right' },
363 |                   { key: 'total', header: 'Total', align: 'right' },
364 |                   { key: 'percent', header: '%', align: 'right', formatter: (row) => `${row.percent}%` },
365 |                 ]}
366 |               />
367 |             </div>
368 |           {:else}
369 |             <div class="text-gray-600">No set summary data</div>
370 |           {/if}
371 |         </div>
372 | 
373 |         <!-- Trade Summary -->
374 |         <div class="bg-white rounded-lg shadow-md p-8">
375 |           <h2 class="text-xl font-bold mb-4">📊 Trade Summary</h2>
376 |           <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
377 |             <div class="text-center p-6 bg-green-50 rounded-lg border-2 border-green-200">
378 |               <p class="text-2xl font-bold text-green-600">{tradeResults.tradeAnalysis.summary.totalPerfectTrades}</p>
379 |               <p class="text-sm text-green-700">Perfect Trades</p>
380 |             </div>
381 |             <div class="text-center p-6 bg-blue-50 rounded-lg border-2 border-blue-200">
382 |               <p class="text-2xl font-bold text-blue-600">{tradeResults.tradeAnalysis.summary.totalOneWayToA}</p>
383 |               <p class="text-sm text-blue-700">Can Receive</p>
384 |             </div>
385 |             <div class="text-center p-6 bg-orange-50 rounded-lg border-2 border-orange-200">
386 |               <p class="text-2xl font-bold text-orange-600">{tradeResults.tradeAnalysis.summary.totalOneWayToB}</p>
387 |               <p class="text-sm text-orange-700">Can Give</p>
388 |             </div>
389 |             <div class="text-center p-6 bg-gray-50 rounded-lg border-2 border-gray-200">
390 |               <p class="text-2xl font-bold text-gray-600">{tradeResults.tradeAnalysis.summary.totalImpossible}</p>
391 |               <p class="text-sm text-gray-700">Both Missing</p>
392 |             </div>
393 |           </div>
394 |         </div>
395 | 
396 |         <!-- Recommendations -->
397 |         {#if tradeResults.recommendations && tradeResults.recommendations.length > 0}
398 |           <div class="bg-white rounded-lg shadow-md p-6">
399 |             <h2 class="text-xl font-bold mb-4">💡 Trade Recommendations</h2>
400 |             <div class="space-y-2">
401 |               {#each tradeResults.recommendations as recommendation}
402 |                 <div class="p-3 bg-blue-50 border border-blue-200 rounded-lg text-blue-800">
403 |                   {recommendation}
404 |                 </div>
405 |               {/each}
406 |             </div>
407 |           </div>
408 |         {/if}
409 | 
410 |         <!-- Trade Results Tables -->
411 |         {#if availableSets.length > 0}
412 |           <!-- Filters -->
413 |           <div class="bg-white rounded-lg shadow-md p-8 mb-8">
414 |             <h2 class="text-xl font-bold mb-4">🔄 Trade Opportunities</h2>
415 |             
416 |             <div class="flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-8 bg-gray-50 p-6 rounded-lg">
417 |               <!-- Set Filter -->
418 |               <div class="flex items-center space-x-2">
419 |                 <label for="setFilter" class="text-sm font-medium text-gray-700 whitespace-nowrap">Set:</label>
420 |                 <select 
421 |                   id="setFilter" 
422 |                   bind:value={selectedSet}
423 |                   on:change={handleSetChange}
424 |                   class="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
425 |                 >
426 |                   <option value="all">All Sets</option>
427 |                   {#each availableSets as set}
428 |                     <option value={set.id}>{set.name} ({set.count})</option>
429 |                   {/each}
430 |                 </select>
431 |               </div>
432 | 
433 |               <!-- Rarity Filter -->
434 |               <div class="flex items-center space-x-2">
435 |                 <label for="rarityFilter" class="text-sm font-medium text-gray-700 whitespace-nowrap">Rarity:</label>
436 |                 <select 
437 |                   id="rarityFilter" 
438 |                   bind:value={selectedRarity}
439 |                   on:change={handleRarityChange}
440 |                   class="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
441 |                 >
442 |                   <option value="all">All Rarities</option>
443 |                   {#each availableRarities as rarity}
444 |                     <option value={rarity}>{rarity.charAt(0).toUpperCase() + rarity.slice(1)}</option>
445 |                   {/each}
446 |                 </select>
447 |               </div>
448 | 
449 |               <!-- Clear Filters -->
450 |               <button
451 |                 type="button"
452 |                 on:click={() => {
453 |                   selectedSet = 'all';
454 |                   selectedRarity = 'all';
455 |                   selectedTradeType = 'all';
456 |                   handleSetChange();
457 |                 }}
458 |                 class="px-3 py-1 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded-md hover:bg-white transition-colors"
459 |               >
460 |                 Clear Filters
461 |               </button>
462 |             </div>
463 |           </div>
464 | 
465 |           <!-- Two Tables Side by Side -->
466 |           <div class="grid grid-cols-1 xl:grid-cols-2 gap-12">
467 |             {#if filteredTrades.length > 0}
468 |               {@const giveTrades = filteredTrades.filter(trade => trade.tradeType === 'give' || trade.tradeType === 'perfect')}
469 |               {#if giveTrades.length > 0}
470 |                 <TradeTable
471 |                   title="➡️ {tradeResults.userA.username} Can Give"
472 |                   trades={giveTrades}
473 |                   userCountField="userACount"
474 |                   titleColor="text-orange-600"
475 |                 />
476 |               {/if}
477 | 
478 |               {@const receiveTrades = filteredTrades.filter(trade => trade.tradeType === 'receive' || trade.tradeType === 'perfect')}
479 |               {#if receiveTrades.length > 0}
480 |                 <TradeTable
481 |                   title="⬅️ {tradeResults.userA.username} Can Receive"
482 |                   trades={receiveTrades}
483 |                   userCountField="userBCount"
484 |                   titleColor="text-blue-600"
485 |                 />
486 |               {/if}
487 | 
488 |               <!-- No Trades Message -->
489 |               {#if giveTrades.length === 0 && receiveTrades.length === 0}
490 |                 <div class="col-span-full">
491 |                   <div class="bg-white rounded-lg shadow-md p-8">
492 |                     <div class="text-center py-8">
493 |                       <div class="text-4xl mb-4">🔍</div>
494 |                       <h3 class="text-lg font-medium text-gray-900 mb-2">No trades found</h3>
495 |                       <p class="text-gray-600">Try selecting a different set or check if both users have cards.</p>
496 |                     </div>
497 |                   </div>
498 |                 </div>
499 |               {/if}
500 |             {/if}
501 |           </div>
502 |         {/if}
503 | 
504 |         <!-- Trade Balance Analysis -->
505 |         {#if tradeResults.tradeAnalysis.summary.estimatedPerfectTradeValue > 0 || tradeResults.tradeAnalysis.summary.estimatedOneWayToAValue > 0 || tradeResults.tradeAnalysis.summary.estimatedOneWayToBValue > 0}
506 |           <div class="bg-white rounded-lg shadow-md p-6">
507 |             <h2 class="text-xl font-bold mb-4">⚖️ Trade Value Analysis</h2>
508 |             <div class="grid md:grid-cols-3 gap-4">
509 |               <div class="text-center p-4 bg-green-50 rounded-lg border border-green-200">
510 |                 <p class="text-lg font-bold text-green-600">
511 |                   {formatCurrency(tradeResults.tradeAnalysis.summary.estimatedPerfectTradeValue)}
512 |                 </p>
513 |                 <p class="text-sm text-green-700">Perfect Trades Value</p>
514 |               </div>
515 |               <div class="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
516 |                 <p class="text-lg font-bold text-blue-600">
517 |                   {formatCurrency(tradeResults.tradeAnalysis.summary.estimatedOneWayToAValue)}
518 |                 </p>
519 |                 <p class="text-sm text-blue-700">{tradeResults.userA.username} Can Receive</p>
520 |               </div>
521 |               <div class="text-center p-4 bg-orange-50 rounded-lg border border-orange-200">
522 |                 <p class="text-lg font-bold text-orange-600">
523 |                   {formatCurrency(tradeResults.tradeAnalysis.summary.estimatedOneWayToBValue)}
524 |                 </p>
525 |                 <p class="text-sm text-orange-700">{tradeResults.userA.username} Can Give</p>
526 |               </div>
527 |             </div>
528 |             
529 |             <!-- Trade Balance Indicator -->
530 |             <div class="mt-4 p-4 rounded-lg {tradeResults.tradeAnalysis.summary.tradeBalance === 'even' ? 'bg-gray-50 border border-gray-200' : tradeResults.tradeAnalysis.summary.tradeBalance === 'favors_a' ? 'bg-blue-50 border border-blue-200' : 'bg-orange-50 border border-orange-200'}">
531 |               <div class="flex items-center justify-center space-x-2">
532 |                 <span class="text-lg">
533 |                   {#if tradeResults.tradeAnalysis.summary.tradeBalance === 'even'}
534 |                     ⚖️
535 |                   {:else if tradeResults.tradeAnalysis.summary.tradeBalance === 'favors_a'}
536 |                     ⬅️
537 |                   {:else}
538 |                     ➡️
539 |                   {/if}
540 |                 </span>
541 |                 <span class="font-medium {tradeResults.tradeAnalysis.summary.tradeBalance === 'even' ? 'text-gray-700' : tradeResults.tradeAnalysis.summary.tradeBalance === 'favors_a' ? 'text-blue-700' : 'text-orange-700'}">
542 |                   {#if tradeResults.tradeAnalysis.summary.tradeBalance === 'even'}
543 |                     Trade values are well balanced
544 |                   {:else if tradeResults.tradeAnalysis.summary.tradeBalance === 'favors_a'}
545 |                     Trade favors {tradeResults.userA.username}
546 |                   {:else}
547 |                     Trade favors {tradeResults.userB.username}
548 |                   {/if}
549 |                 </span>
550 |               </div>
551 |             </div>
552 |           </div>
553 |         {/if}
554 | 
555 |         <!-- Quick Action Buttons -->
556 |         <div class="bg-white rounded-lg shadow-md p-6">
557 |           <h2 class="text-xl font-bold mb-4">🚀 Quick Actions</h2>
558 |           <div class="flex flex-wrap gap-4">
559 |             <button 
560 |               type="button"
561 |               on:click={() => window.open(`https://www.rip.fun/profile/${tradeResults.userA.username}`, '_blank')}
562 |               class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
563 |             >
564 |               🔗 View {tradeResults.userA.username} on rip.fun
565 |             </button>
566 |             <button 
567 |               type="button"
568 |               on:click={() => window.open(`https://www.rip.fun/profile/${tradeResults.userB.username}`, '_blank')}
569 |               class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
570 |             >
571 |               🔗 View {tradeResults.userB.username} on rip.fun
572 |             </button>
573 |             <button 
574 |               type="button"
575 |               on:click={() => {
576 |                 const summary = `Trade Analysis: ${tradeResults.userA.username} vs ${tradeResults.userB.username}\n` +
577 |                                `Perfect Trades: ${tradeResults.tradeAnalysis.summary.totalPerfectTrades}\n` +
578 |                                `${tradeResults.userA.username} can receive: ${tradeResults.tradeAnalysis.summary.totalOneWayToA} cards\n` +
579 |                                `${tradeResults.userA.username} can give: ${tradeResults.tradeAnalysis.summary.totalOneWayToB} cards\n` +
580 |                                `Generated on: ${new Date().toLocaleDateString()}`;
581 |                 navigator.clipboard.writeText(summary);
582 |                 alert('Trade summary copied to clipboard!');
583 |               }}
584 |               class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
585 |             >
586 |               📋 Copy Trade Summary
587 |             </button>
588 |           </div>
589 |         </div>
590 | 
591 |         <!-- No Trades Available -->
592 |         {#if tradeResults && availableSets.length === 0}
593 |           <div class="bg-white rounded-lg shadow-md p-6">
594 |             <div class="text-center py-8">
595 |               <div class="text-4xl mb-4">😔</div>
596 |               <h2 class="text-xl font-bold text-gray-900 mb-2">No Trade Opportunities Found</h2>
597 |               <p class="text-gray-600 max-w-md mx-auto">
598 |                 Unfortunately, these users don't have any cards that the other needs. Try comparing with other users or check back after collections are updated.
599 |               </p>
600 |             </div>
601 |           </div>
602 |         {/if}
603 |       </div>
604 |     {/if}
605 |   </div>
606 | </div>


--------------------------------------------------------------------------------
/static/robots.txt:
--------------------------------------------------------------------------------
1 | # allow crawling everything by default
2 | User-agent: *
3 | Disallow:
4 | 


--------------------------------------------------------------------------------
/svelte.config.js:
--------------------------------------------------------------------------------
 1 | import adapter from '@sveltejs/adapter-node';
 2 | import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
 3 | 
 4 | /** @type {import('@sveltejs/kit').Config} */
 5 | const config = {
 6 | 	// Consult https://svelte.dev/docs/kit/integrations
 7 | 	// for more information about preprocessors
 8 | 	preprocess: vitePreprocess(),
 9 | 
10 | 	kit: {
11 | 		adapter: adapter({
12 | 			// Railway will set PORT environment variable
13 | 			envVars: {
14 | 				PORT: 'PORT'
15 | 			}
16 | 		})
17 | 	}
18 | };
19 | 
20 | export default config;
21 | 


--------------------------------------------------------------------------------
/tailwind.config.js:
--------------------------------------------------------------------------------
 1 | /** @type {import('tailwindcss').Config} */
 2 | export default {
 3 |   content: ['./src/**/*.{html,js,svelte,ts}'],
 4 |   theme: {
 5 |     extend: {},
 6 |   },
 7 |   plugins: [
 8 |     require('@tailwindcss/typography'),
 9 |   ],
10 | }


--------------------------------------------------------------------------------
/test-2.js:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * Processes the raw SvelteKit data structure to extract, clean, and 
  3 |  * structure digital products and cards.
  4 |  * 
  5 |  * @param {string} rawDataString - The complete raw data string from the script tag.
  6 |  * @returns {object} An object containing the structured digital_products and digital_cards.
  7 |  */
  8 | function extractAndStructureData(rawDataString) {
  9 | 
 10 |     // --- Step 1: Isolate the main data object string ---
 11 |     // The original regex failed because the `data` array is followed by "form:", not "uses:".
 12 |     // This updated regex correctly identifies the end of the data array in the provided structure.
 13 |     const dataRegex = /data:\s*(\[[\s\S]*?\]),\s*form:/; // <-- THE FIX IS HERE
 14 | 
 15 |     const match = rawDataString.match(dataRegex);
 16 | 
 17 |     if (!match || !match[1]) {
 18 |         // Added a more descriptive error message
 19 |         throw new Error("Could not find the data array in the provided script. The regex might need adjustment if the source structure changes.");
 20 |     }
 21 | 
 22 |     let dataString = match[1];
 23 | 
 24 |     // --- Step 2: Clean the string to make it parsable ---
 25 |     // Replace `new Date(timestamp)` with just the `timestamp` number.
 26 |     const cleanedString = dataString.replace(/new Date\(([^)]+)\)/g, '$1');
 27 | 
 28 |     // --- Step 3: Parse the cleaned string into a JavaScript object ---
 29 |     // Using Function constructor is a safer alternative to eval() for parsing.
 30 |     const dataArray = new Function(`return ${cleanedString}`)();
 31 | 
 32 |     // The main profile data is in the second element of the array.
 33 |     const profileData = dataArray[1]?.data?.profile;
 34 | 
 35 |     if (!profileData) {
 36 |         throw new Error("Profile data could not be located in the parsed object.");
 37 |     }
 38 | 
 39 |     // --- Step 4: Extract and create deep copies to avoid modifying the original ---
 40 |     const digital_products = JSON.parse(JSON.stringify(profileData.digital_products || []));
 41 |     const digital_cards = JSON.parse(JSON.stringify(profileData.digital_cards || []));
 42 | 
 43 |     // --- Step 5: Remove the 'clip_embedding' field ---
 44 |     digital_cards.forEach(item => {
 45 |         if (item.card && 'clip_embedding' in item.card) {
 46 |             delete item.card.clip_embedding;
 47 |         }
 48 |     });
 49 |     
 50 |     // Also check products for the same field
 51 |     digital_products.forEach(item => {
 52 |         if (item.product && 'clip_embedding' in item.product) {
 53 |             delete item.product.clip_embedding;
 54 |         }
 55 |     });
 56 | 
 57 |     // --- Step 6: Structure the final output ---
 58 |     const structuredData = {
 59 |         digital_products,
 60 |         digital_cards
 61 |     };
 62 | 
 63 |     return structuredData;
 64 | }
 65 | 
 66 | // --- USAGE ---
 67 | 
 68 | const rawScriptData = `				{
 69 | 					__sveltekit_owukj8 = {
 70 | 						base: new URL("..", location).pathname.slice(0, -1)
 71 | 					};
 72 | 
 73 | 					const element = document.currentScript.parentElement;
 74 | 
 75 | 					Promise.all([
 76 | 						import("../_app/immutable/entry/start.D0wnvtcD.js"),
 77 | 						import("../_app/immutable/entry/app.D6iWhGmV.js")
 78 | 					]).then(([kit, app]) => {
 79 | 						kit.start(app, element, {
 80 | 							node_ids: [0, 6, 67],
 81 | 							data: [{type:"data",data:{title:"Rip.fun | Rip, Collect, Redeem, Repeat.",isPasswordProtected:false,showBetaBanner:true},uses:{url:1}},{type:"data",data:{profile:{id:2010,nonce:"AR7PMCNFUj5ev6K4CUpijdXQziv+R6wo",smart_wallet_address:"0xeE2597C840385141032447f54ec385595f29C028",owner_wallet_address:"0xeE2597C840385141032447f54ec385595f29C028",phone_number:null,login_provider:"google",login_user:"ndw@castlelabs.io",type:"USER",notifications_active:false,username:"ndw",bio:"",avatar:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/rip-public/12.png",banner:"",email:"ndw@castlelabs.io",subscription:null,verified:false,created_at:new Date(1755898707669),updated_at:new Date(1755898707669),digital_products:[{id:13083,name:"Black Bolt Booster Pack",unique_id:"PACK-RIP2CAD721FA4DE",token_id:"11704",front_image_url:"packs/zsv10pt5/PACK-RIP3KF7KGSIXO400.front.png",owner:"0xeE2597C840385141032447f54ec385595f29C028",back_image_url:"",full_image_url:"",video_url:null,pack_artwork_id:221,hash:null,is_burned:false,is_listed:false,bin_location:"14-5-18",listing:null,offers:null,opening_pack_video_url:null,onchain_status:"ONCHAIN",open_status:"PENDING_OPEN",reveal_state:{is_opened:false,is_viewed:false,opened_at:null,opened_by:null,video_url:null,viewed_at:null,opened_hash:null},image_renders:null,set_id:"zsv10pt5",product_id:"zsv10pt5-bbbp",created_at:new Date(1755879967226),updated_at:new Date(1755902251747)}],digital_cards:[{id:70829,packet_id:7349,card_id:"sv3pt5-137",token_id:"72979",owner:"0xeE2597C840385141032447f54ec385595f29C028",front_image_url:"cards/sv3pt5/CARD-RIP8CFAEDA78FA7_1754464264531.png",back_image_url:"",full_image_url:"",video_url:null,hash:"0x2a7ff7f3f1b79a88896a89f22850e90ae910e97ec0ff33eb7d2f2a5891c80740",bin_location:"sv3pt5-24-3-54",is_burned:false,is_hidden:false,is_listed:false,listing:null,offers:null,unique_id:"CARD-RIP8CFAEDA78FA7",status:"ONCHAIN",reveal_state:{revealed:true,video_url:"pack-videos/sv3pt5/PACK-RIP12W70UFA2Z680/opening-video.webm",revealed_at:"2025-08-18T19:07:41.580Z"},image_renders:null,created_at:new Date(1754464368085),updated_at:new Date(1755975381764),card:{id:"sv3pt5-137",set_id:"sv3pt5",card_number:"137",supertype:"Pokémon",subtype:["Basic"],hp:60,types:["Colorless"],abilities:[],attacks:[{cost:["Colorless"],name:"Conversion 4",text:"Choose Grass, Fire, Water, Lightning, Psychic, Fighting, Darkness, Metal, or Dragon type. Until the Defending Pokémon leaves the Active Spot, its Weakness is now that type. (The amount of Weakness doesn't change.)",damage:0}],weaknesses:[{type:"Fighting",value:"×2"}],resistances:[],formatted_card_number:137,name:"Porygon",is_chase:false,raw_price:"0.04",illustrator:"5ban Graphics",is_reverse:false,is_holo:false,is_non_foil:true,is_variant:false,is_first_edition:false,tcgplayer_id:"516700",sku:"7432304",small_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv3pt5/137.small.png",large_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv3pt5/137.large.png",is_active:true,rarity:"Common",rip_rarity:"",created_at:new Date(1729921431083),updated_at:new Date(1755958779289),clip_embedding:[.6909699,.020226657,-.042171985,-.0018000603,.30558854,-.19641341,.544861,-.36426753,-.57842195,-.53602874,-.47814792,-.36668026,-.6301969,.4898988,-.37070388,-.09584427,.19014603,-.16658954,-.11601755,.50458443,.6370497,-.30722257,.117938876,-.4643912,-.6053061,.40490735,-.5468032,-.09771566,-.12330973,.19113535,.19285598,.6389584,-.9389874,.49208912,.5784685,.17166975,-.13703442,.19793779,-.20560566,.40965974,-.043939516,.3330474,.8535068,.16630213,-.36146972,.13833255,.009652078,-.99484897,.15997973,.45527178,-.17693958,.18601009,.74337995,.5827609,.6195984,.48832408,.40865678,-.23748145,-.35901672,.9681567,.5108411,.43089014,.16899571,.05171466,.41433102,.7795466,.06265357,.26634538,-.32973164,-.200963,-.30678922,-.08193672,.09021795,.2967993,1.0579491,-.33882394,.047324494,-.9417688,-.87311655,.08119109,.10128091,-.10418661,.3750478,-.6615658,-.7981886,-.3472184,.06613958,-.09083911,-.19933805,.32137278,-.99902105,-.084444076,.52801216,.120165296,-.2008775,-.12995562,-.03811656,.03759575,-.16396587,.18523636,.298663,-1.4586625,-.120935425,-.3508021,.60745096,.41334105,.12413409,-.91770077,-.3052821,.4785015,.3034878,-.25981218,-.8959055,-.01703021,-.5649775,-.15998343,-.17226742,-.33331734,.017512754,.28708696,.12275022,-.206364,.29389286,.42347273,.65528595,1.0537688,-.33463943,.9376362,-.33778843,.38282025,.77094007,-1.9732232,.3701715,-.73591876,-.2372242,-.09906363,-.14648843,.41712916,-.057232916,-.0911776,.3833808,.98308456,.29286698,-.3115158,-.3873585,-.5029448,-.014339507,-.8121815,-.4761074,.12647176,-.21862936,-.2992108,.06530833,.782161,.3981956,-.49700913,.56719077,-.19536011,-.3540366,-.9271766,-.101523995,.7140417,.20993853,.5506522,-.45628566,.155815,.16622381,-.3778955,.3865615,-.7716086,.062206566,-.417653,-.31549346,.19646049,-.12823898,-.40974128,-.9301712,-.5525829,.4531275,-.34747648,2.8634665,.4271805,.11211401,.10576663,.18320788,-.53283715,.71709526,.62461036,-.854423,-.64629483,.50699747,.4567737,-.5821499,-.20851049,-.5663067,-.73719037,-.30229664,.1655336,-.541689,-.56382453,-.9033044,-.33292168,.4633824,-.13350499,-.37377018,-.186361,.11711052,.23832357,.75726557,-.39130056,-.43358707,.10124686,-.14626166,.004356198,.80042624,-.08674219,-.5988208,.05930987,-.41526958,.20625918,.18621954,.93455344,-.5423496,-.6639395,.42878938,.052222162,-.13532537,.43064126,-.28790966,.10505982,.59680927,-.37730622,-.23653224,.15698147,.020776883,.15047742,-.08169728,.40735698,-.03721434,.41635227,-.6650302,-.9252496,-.36629522,-.8220975,-.01755312,.21137685,-.049848408,.7563392,-.0028129965,.04806848,-.5873288,-.078609996,.85848665,-1.2064254,-.017267615,-.044521824,.24394597,-.84009945,.31280392,-.11461258,-.1317603,.06105052,.11181849,.09456761,-.3213221,.82502425,.92275846,.3378762,-.3797322,.6741476,.120669484,-.8238549,-.23700681,-.1465554,-.041286513,.8694198,-.38852522,.097647786,.06524688,.21676783,.64000654,-1.1084449,-.112093106,.5083858,.13765442,.16306955,-.15455537,-.11584133,-.9110867,.012634352,.10834654,-.2063193,.568308,.08540255,-.46248156,-.33561045,-.40044534,-.83630407,.8269697,-.8824223,.47260508,-.25142077,-.044433966,-.026421137,-1.1333295,-.10452984,-.9605876,.2167339,.06843166,.51076424,-.1798808,-.38228184,-.25706953,.46463048,1.2943511,-.21751964,-.91899216,.6461561,-.22106688,-.38955015,-.2882611,.013745457,.64680904,-.22987297,-.24944244,.7730223,.49905714,.3357296,-.21781535,.48420832,-.22192189,.039818555,-.08038324,.16088718,-.46678072,-.07083988,.7256558,-.025532953,-.11965218,-.6212721,.71895874,.2073333,.047669113,.42172784,-.23887536,.8555663,-.11028677,.111533195,.17571801,-.17296018,.2161296,.5166198,-.8141625,-.35512492,-.5877366,.7216026,-.049905017,.5929866,.81407195,.75673866,-.119496554,.033414662,-.9397049,.34813514,-.8567399,-.24569803,-.17294368,.1357396,.28048047,.051882416,-.77543616,-.2954954,-.105976924,-.93544316,-.076290324,.5582422,.2578604,.05517751,-.13905434,.610691,1.0267452,.23809199,.29876524,-.17468861,-.29156697,.12883821,-.58408016,.4814266,-.5344509,-.09982999,-.5859248,1.4479544,1.0292826,-.374686,.18007226,.48547292,-.020796657,-.82428205,.8787176,-.28942314,.9027581,.17688331,.47012395,-.41737437,-.47543442,.005602017,-.39555168,-.97482944,-.7974438,.82756495,.67896986,-.83162147,-.5485949,-6.046235,.25984868,-.28710377,.101717725,.09151684,-.5008377,-.3035865,-.4689547,-.16762847,-.4718153,.45914763,-.3427296,-.6223549,.25269675,.16345535,.17229858,-.7023006,.17156395,.4373428,-.2506492,-.9182593,-.22135004,-.20214188,-.19274133,.065150775,.5997906,.45000133,.8586792,-.24755011,.38711023,-.5732844,.48727527,-.4375427,.2730939,.7884941,.73478854,.47484964,-.42615485,-1.1146165,.58245754,-.5418042,-.1350005,-.018161118,.31326613,.19625747,-.20880023,.17226988,.02303563,.32289302,.33145308,.1632411,.29749238,-.14138709,-.9389454,1.4861264,.4917176,1.0458792,-.07979589,-.143854,.47255456,-.20212343,.46547297,-.5116587,-.12135264,.18403532,-.20511091,-.23394418,-.6019937,-.6298704,-.9821929,-.2844424,.18556446,-.6205563,.07173805,-.022007309,.8307504,.2398647,.27329615,-.057066754,-.6170046,-.18281412,.064525366,-.4128791,.5384218,.08630912,.2291573,-.05563668,.041131377,-.7595298,-.87552243,.3630589,.24187396,-.11285691,.36417788,.6568192,.67872995,-1.0906942,.8501866,.15241629,1.5771585,.034203798,-.04829841,.17755097,.33530384,-.10392022,-.025763482,-.7366916,-.35234576,.17301635,.648288,.41672105,.584547,.93417865,.119660914,.048612952,-.9774155,.33235776,-.42641348,-.36433718,-.8401959,-.3800528,.64585644,.71643066,.55284256,.34301764,.19477645,.33658227,-.107228726,-.07072835,.46269244,-.006714642,.88475424,.6424387,-.2125201,-.36712503,.55526346,.6861501,.072459996,.31841087,-1.095395,-.8624381,-.36059988,-.539145,.095763266,.3428742,.41584563,.06485246,.46313077,.111477494,.2913282,-.50140727,.33043715,.22275099,1.1575077,.5953074,.08952449,-.27933887,.074890524,-.22032797,.18695623,-.015785113,-.19361854,-.61662257,.6406342,-.12314497,.9733267,.36902773,.10186365,.43850392,.01838842,.42083856,-.47467422,-.29752362,-.5508709,.10191822,.50682664,.67210406,-.18639839,-.24997029,-.44627753,-.13548976,-.54788554,-.9197036,.6241904,-.31769523,-.7725073,-.48669615,-.42857805,.6858481,.6244308,.56601816,.5200908,.99785984,-.44345897,.18239483,.21814863,-.26574883,.26763916,.3588921,.006809935,-.2263597,-1.1047328,.08538884,.08529422,-.2847923,.20598572,.18658875,.66170716,-.18817928,-.10439047,.109595925,-.92550886,.20771939,-.2980011,.133181,.07854297,.011963025,.4830106,.5942953,.2873773,-.24204594,-.17306536,.940765,.120746456,-.6200481,-.63029534,.09043699,.32508868,.37391543,1.3439574,.0063486844,6.4198427,.09870028,.99915206,.3163892,-.84823346,-.047817245,.55122775,.45128298,-.15865067,-.060951218,-.19905087,-.7978876,.68162334,-.48800224,-.46438444,.5639696,-.4390276,.40274486,.31355232,-.15143268,.021960244,-.20431101,-.3747681,.4611532,-.37543222,.204155,-.47412232,.35968205,.18737678,.8787203,-.5436473,.28562957,.51484835,-.09824777,-.39901277,1.1360676,.03271018,-.249024,-.3319438,.7978407,.9180618,-.480273,-.08384323,-.31197876,.06476681,.3274528,.22000453,.0028117597,.833701,.9360378,-.07571477,.82540715,-.80591464,-.24394345,.394223,.35094967,-.775366,-.38586023,.19943751,-.77138937,-.7524718,-.13893066,-.035132036,-.32393813,.009168863,.8979661,-.7103255,-.09811683,-.23044497,-.9180802,.191841,1.2281642,.000090032816,-.14664456,.34275103,.13192327,.28254837,-.36258072,-.66589093,-1.796519,-.41239756,-.028722525,-.4101399,-.3601289,-.5589785,.7890251,.7661139,-.8557986,-.7508529,-.6010324,.5239527,-.87830955,.7826338,1.1415995,.56383705,.25109586,.5292797,.3215892,.14344876,.2791199,.11554362,-.83637476,.9738017,.012896568,-.0118872225,.0819422,-.3915246,-.15967093,-.1103169,-.5760799,-.116239384,-.54852283,-.48679298,-.46551228,.6406912,.13414511,-.09600343,-.1398989,.43431017,.8066305,.61854386,.1640011,.07665421,-.09118277],is_price_stale:false}},{id:84129,packet_id:11096,card_id:"sv8pt5-66",token_id:"84900",owner:"0xeE2597C840385141032447f54ec385595f29C028",front_image_url:"cards/sv8pt5/CARD-RIPA5F47BAC2F14_1755407594716.png",back_image_url:"",full_image_url:"",video_url:null,hash:"0xeb9afc3cba4c7e5eea1c74f52cc87c955b4fa025dca0dc7e6d7874e6d66e470e",bin_location:"sv8pt5-25-1-115",is_burned:false,is_hidden:false,is_listed:true,listing:{nonce:"1755903174158982682",price:"10000000",chain_id:"8453",deadline:"1756548000",signature:"0x36e1ebe667e4f8130f6826435b85bbf56ed04d14f055d712d4da3d8cfaafccee0deb06c210a7096b80a2f0bff94bf266dd46b84e45e421d175181bff0eac99731b",usd_price:"10.00",charge_delegate:false,contract_address:"0xF4710eE68f151B6CB0c377400738c0De9B39284f",min_seller_amount:"9750000"},offers:null,unique_id:"CARD-RIPA5F47BAC2F14",status:"ONCHAIN",reveal_state:{revealed:true,video_url:"pack-videos/sv8pt5/PACK-RIP4005D75C68E6/opening-video.webm",revealed_at:"2025-08-17T05:20:45.790Z"},image_renders:null,created_at:new Date(1755408009933),updated_at:new Date(1755902463488),card:{id:"sv8pt5-66",set_id:"sv8pt5",card_number:"66",supertype:"Pokémon",subtype:["Basic"],hp:70,types:["Metal"],abilities:[],attacks:[{cost:["Metal","Colorless"],name:"Hammer In",text:"",damage:20}],weaknesses:[{type:"Fire",value:"×2"}],resistances:[{type:"Grass",value:"-30"}],formatted_card_number:66,name:"Bronzor",is_chase:false,raw_price:"0.02",illustrator:"",is_reverse:false,is_holo:false,is_non_foil:true,is_variant:false,is_first_edition:false,tcgplayer_id:"610421",sku:"8488983",small_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/66.small.png",large_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/66.large.png",is_active:true,rarity:"Common",rip_rarity:"",created_at:new Date(1737164931157),updated_at:new Date(1755958808484),clip_embedding:[.46369115,-.07859939,.5930115,1.1542466,.3705208,.6503925,.4770559,-.5753597,-1.009993,-.31127992,.5665172,-.5838204,-1.1325133,.622715,.15981472,.37039265,.19458947,.2370621,.025257945,.652942,.7655917,-.19248539,.24993324,-.5058757,-1.2209268,-.08497487,-.014502972,-.030635752,-.0564016,.090699986,-.30017692,.4252848,-.0832407,.11237602,.43449217,.1722754,-.18630789,.37551105,-.4815655,-.2795565,.5278235,-.121292606,.5636598,.047899798,-.38309026,.36353597,.11221197,-.31189656,.89900595,-.30572522,-.33609873,.52335036,.047729746,1.1454396,-.8381635,-.04976526,.5152152,-.39088032,-.010009445,.19751924,.06948358,.65077937,.25384235,.0012974143,.8872163,-.048028827,.40359735,-.11795366,-.39236486,.26402137,-.7709233,.4374706,.15797454,.23154871,.5911988,-.4021381,-.42592704,-.63979495,-.90849507,-.070353895,-.48683637,.42800725,.09512335,-.64627385,-.5103454,-.2768622,.45807147,-.010065079,-.10690832,.7888932,-.20818734,.28486842,-.017748684,-.38630128,.10409586,-.2735229,.32609302,-.5417154,-.14110738,.2546685,-.05124578,-.6156131,-.47254544,.2808553,-.022950232,.24293636,.027303182,-.19147828,.13307972,.52038914,-.02276817,.39489692,-.7733266,-.4565966,-.85444087,.17213878,-.4535386,-.09766655,.36361378,.46159965,.24659505,-.46694613,.47800326,.74724275,.74138,.4988766,-.3762383,.6947605,-.13226452,.4893911,.011683762,-2.4805791,-.15815848,-.46877846,-.31737852,-.053778604,-.3101764,.44039205,-.56023884,-.13569662,.23103844,-.35432082,.051036805,-.14921762,-.1545096,-.4652118,-.069200546,-.08520168,-.39421523,.27576298,-.25677282,-.89919406,.22730428,.013944745,.43694204,.0025570393,.2299689,-.18981776,-.36968562,-.51024425,.3468312,.47222716,-.28247595,.31482768,-.5736162,-.19946074,.028994493,-.29201028,.22174022,-.6730585,-.31561983,-.64896286,.032572083,-.16113904,-.5597651,.4254152,-.9565349,-.7514757,.105555855,-.099324316,1.8216288,.43661943,-.3147357,.9062691,-.015138436,-.014042877,.6435862,.07872264,-.62394464,-.5520791,-.25880232,.141966,-.56386065,.3558098,.333359,-1.3702555,-.2047187,.4885229,-.013857916,-1.2090235,-.36369246,-.2268475,.51270413,-.27559748,-.46678793,-.36557084,-.37118298,.14005408,.720827,-.28978792,-1.2893331,.39700913,.18412046,-.07575225,.9368956,-.09216553,-.40175462,-.5771357,.18974665,-.28151387,.12243734,.5868347,.20902106,.30230922,.5549904,-.25333744,.31198648,1.0948825,.1485022,-.052993275,.6038513,.26290554,-.36480498,-.4794562,-.29516304,.21683961,.48220024,.22333154,.6636195,.620702,-.5223414,-.6155687,.116624326,-1.2849289,.12929893,.6385262,.31568694,.8301852,.13798475,-.5861155,.19099104,.20716655,-.44246554,-.5455265,-.45386058,.47219557,.05889952,-.2490744,.062016174,-.2742216,.8055366,.10555208,.7996861,.3987708,-.22306466,.04182084,.64385605,.7523116,-1.1661096,.69961905,.34961492,-.53786516,.4590888,.25058952,-.32580924,.40287012,-.2977881,.06751174,.34411505,-.3764056,1.1099522,-1.3333666,.31773788,.32718122,-.12717965,.9917628,-.12972772,.3501248,-1.0470694,-.2409974,.57745844,-.80608547,.2746396,.50011915,-.62775654,-.18135932,-.04790587,-.19562455,.33261582,-.36844438,.82534075,-.20470446,-.71950656,.057911783,-.6708391,.29018083,-.47817823,-.0031964183,-.3607733,.8403166,.380827,-.15195161,-.2933217,-.35434818,1.1764501,-.3542049,-.7551645,.27897498,-.77229714,.20875204,-.79227585,-.5558148,.111404955,-.3898602,-.17580375,.33704636,.20644335,-.36702707,.09782052,.4348132,-.25648502,.057017356,-.23890004,-.23364362,-.5512183,-.2736243,.39720768,.08032181,-.47379193,-.75679433,-.2184808,-.023317188,-.014240075,-.12739384,-.23544839,-.10278241,-.6841259,-.0661087,.017106697,.12769541,-.47089192,.23054096,-.9196718,.24619472,-.31042758,-.32734728,-.36054763,.12961236,-.07554339,.46506003,-.38053998,.6585343,-1.2560596,.43148053,-.5919421,.29706374,-.48887634,-.078029096,-.7440518,.2909873,-.73355156,-.5180631,.23013584,-.766729,-.113175064,.46985647,.073954,-.19849975,-.2483697,.54098517,1.0546498,.22471908,-.023222998,.56645703,.46363196,-.19227916,-.5363936,.9391939,-.668339,.038636222,-.61319363,.39131913,.06377434,-1.4292498,-.14944848,.25931254,-.48094216,-.2341707,.36601624,-.4104449,.8675917,.19898857,.7559532,-.24845335,-.10911979,.074134216,-.55833924,-.95269126,-.39433563,-.08258046,.781072,-.7557202,-.4532581,-5.089872,-.20685104,-.23473829,.26355177,-.10399207,-.4864762,-.26854545,-1.4406865,-.18725231,-.07669617,-.13943475,-.56013584,-.08304024,-.028942883,-.3671196,-.23152882,-.5220278,-.49980515,.6747385,-.23507212,-.99632096,-.21322238,-.61690205,.09843141,.8945056,.38885504,.607074,.71837664,.24224186,.5564633,-.49709302,.39380506,-.923736,.4310009,.438397,.10598352,.60629845,-1.7727885,-1.4527493,-.34239477,-.7459463,.19451684,.2122087,1.114963,-.037752897,-.47950277,.5981985,.1629822,.48399833,.05504991,.7718417,.40393454,.63396204,-.28309715,1.44659,.16938844,.4915325,.5524707,.14484245,.54460526,-.62773544,.29333764,-.205609,-.55984414,.31549138,-.389176,.19284344,-.21885902,-.30114913,-1.042437,.24169308,-.45338282,-.46941757,-.10909665,.29626328,1.2181876,-.70013964,.081118315,-.38907897,.020156637,-.0858672,.3986177,-.12506258,.12695159,.0972328,.81415594,-.28721923,-.28763244,-.74416745,-.47673503,.009941049,.53765047,.6498183,-.032693848,.8824409,.35555592,.24459924,.36325553,-.36079383,.61674565,-.342575,.1354377,.06559232,.03170923,.6594311,.0858431,-.38150537,-.6422091,.03254634,.3781818,.4900239,-.22685575,.8939128,.12577452,.66533285,-1.2672946,.3277112,.06861543,-.20823371,-.386525,-1.0616235,-.0103882775,.90126586,.16377194,-.61365,.4524026,.2076508,-.29672298,.032695606,-.67797595,.37709326,.57647,.9397327,-.43037218,-.33845437,.13544528,.65932924,-.1591317,-.028198376,.27421397,-.4882071,-.50066805,.0018426329,-.15287532,-.17259535,-.057814807,.52424794,.5331067,-.41819006,-.25496018,-.5864047,.28041837,-.09873772,1.1250631,.712833,-.32962823,.27749014,-.03654185,-.44869667,-.3327193,.7322389,-.4813149,.012946546,.38998336,.14975859,.8334302,.050560787,.410844,.8334204,-.34340417,-.22913846,-.2197913,.08731398,-.82930064,.2890839,-.25911757,.26661158,.10648498,.0444915,-.43083385,-.10609561,.21567363,-.7988006,.52070355,.2755764,-.71910965,-.55511284,-.2664589,.8173429,.4232621,.40765253,.17386144,.8363877,-.43845826,-.015945137,-.22675075,-.43408573,.6540566,-1.2180803,-.62493324,-.73369807,-.13978784,.03562233,-.1965879,.051935077,-.29526094,.3018066,.5130079,-.536014,.12344301,-1.1873564,-1.6608741,-.014353678,.5916935,.011047594,.38856688,-.07633591,.85908216,.6458176,.36911374,-.11461192,-1.1135023,.7926632,-.6834049,-.76743424,-.4789437,.37120664,.2513959,.47341147,.42779684,-.0987056,5.4381227,-.10252586,.93630743,.10450955,-.2630658,-.18136415,-.46472472,-.16122779,-.31562325,-.78460586,-.96737355,-.6660814,-.027722627,-.71092343,-.802299,.63387305,.38889322,.30447793,.69714075,.2468276,.08916867,-.80684817,-.39252642,-.08222321,-.49937075,.07146709,-.73139477,.6179249,-.36322695,.75425136,.12086557,.44372404,.48222962,-.1454845,-.60928,1.1442332,.54141474,-.6204026,-.4928102,.0663495,-.15683272,-.19781126,.36716804,.404993,.43273485,.3530346,.37717715,.5047413,.27288234,-.2180525,.32318866,.1290378,.23340976,-.9770124,-.025528073,.24075758,.23889756,.059035182,.17746514,-1.9640949,-.7561447,-.12312905,-.17091236,-.69193923,-.22063665,.45100227,-.17894074,.26453078,-.48776263,-.27922058,.10598305,1.6504319,.31562153,.44388324,.32731277,.28699505,-.47093797,-.29316851,-.22006682,-1.5507449,.78097856,.20900932,-.16473317,.055311218,-.51617163,.3809191,.47225925,-.47963098,.24335194,-.83555484,.3763898,-.612064,.8619234,.90794027,.19750936,.07880658,.66652834,-.083116844,-.16495803,.20305072,.3441457,-.51402706,.17118675,-.11448681,-.14385015,-.105947345,-.26151294,-.47087958,-.29188973,-.7948978,-.6799716,-.31276804,-.7212505,-.7656472,.039660916,.024656475,-.29912767,.31399083,.47076762,.93585634,.2610824,.44995028,-.582746,-.44688725],is_price_stale:false}},{id:83997,packet_id:11066,card_id:"sv8pt5-69",token_id:"84768",owner:"0xeE2597C840385141032447f54ec385595f29C028",front_image_url:"cards/sv8pt5/CARD-RIP4146331A253E_1755403475638.png",back_image_url:"",full_image_url:"",video_url:null,hash:"0x8813235f1a5782597c89bdcaf1279e0c3ba7d274872339a7d5b02fa583c56fbf",bin_location:"sv8pt5-25-1-53",is_burned:false,is_hidden:false,is_listed:false,listing:null,offers:null,unique_id:"CARD-RIP4146331A253E",status:"ONCHAIN",reveal_state:{revealed:true,video_url:"pack-videos/sv8pt5/PACK-RIP20FE86485524/opening-video.webm",revealed_at:"2025-08-17T04:11:01.667Z"},image_renders:null,created_at:new Date(1755403821088),updated_at:new Date(1755975331611),card:{id:"sv8pt5-69",set_id:"sv8pt5",card_number:"69",supertype:"Pokémon",subtype:["Basic"],hp:130,types:["Metal"],abilities:[],attacks:[{cost:["Metal"],name:"Hammer In",text:"",damage:30},{cost:["Metal","Metal","Colorless"],name:"Raging Hammer",text:"This attack does 10 more damage for each damage counter on this Pokémon.",damage:80}],weaknesses:[{type:"Fire",value:"×2"}],resistances:[{type:"Grass",value:"-30"}],formatted_card_number:69,name:"Duraludon",is_chase:false,raw_price:"0.06",illustrator:"",is_reverse:false,is_holo:false,is_non_foil:true,is_variant:false,is_first_edition:false,tcgplayer_id:"610424",sku:"8489013",small_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/69.small.png",large_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/69.large.png",is_active:true,rarity:"Common",rip_rarity:"",created_at:new Date(1737164931273),updated_at:new Date(1755958807848),clip_embedding:[.40847832,-.56514615,.34280562,.41467097,.5034383,.26824412,.4728923,-.6050231,-.5083692,-.20695777,.56340325,-.06891081,-.97656685,.42819074,.16392316,.4574374,.4153028,.096429065,.019448206,-.0486598,.9464354,-.09424046,-.26030535,-.32902747,-1.2813689,-.35949063,-.39930254,-.12138981,-.5997125,.40632522,-.08602406,.962909,-.121387504,.3023517,.28292447,.3287384,-.10929313,.37310272,-.4933052,-.5835989,.44373012,.53882307,.28211543,.8578944,-.38350692,-.17310612,-.034349203,-.044370875,.2498738,-.37916058,-.23905616,.16605662,.11728454,.47042394,-.1316907,.35756028,1.2102959,.40782192,.17630875,.9438063,.24739705,.4904737,.032886103,.059471592,.5208355,-.067310154,.48381954,.2761153,-.737057,.106463075,-.5073763,.17058378,-.09107724,.39186394,.78706867,-.115891606,-.05908598,-.62499875,-.68003404,-.29307324,-.44190562,.92926514,.24193631,-.52993643,.07679558,.014093816,.40700936,.17231771,-.22624244,.4108714,-.28148746,.40667337,-.018273354,.004287988,-.1201489,.23122443,.1955438,-.6103152,-.12714666,.16962029,-.23690823,-1.1811626,-.71252406,.02401793,.21925506,.45641437,.17631176,-.5817324,-.0060052276,.07883361,-.28118578,.26270646,-.42928997,.23761906,-.74442023,-.6581675,.25287986,-.08947101,.3299753,.43548155,.21273947,-.1713076,.5055112,.17778862,.89266646,.7249126,-.49447015,.67978287,-.019887403,.90195453,.5521946,-1.5113035,.40576714,-.24748465,-.36752534,.29747006,-.50177705,.45183095,.14941238,.22772457,.18270929,.13012545,.3567936,-.33453926,-.29334816,-.4267701,-.042070985,-.44694054,-.32238203,.5608578,-.8385148,-1.2310141,.6388492,.0246896,.36759478,-.67490894,.4816802,-.10848558,-.16577606,-.6774781,.5460908,.45259783,-.43293315,.38352054,-.21718383,-.1753794,.2708807,-.388857,.13637343,-.5506218,.6899396,-.083086446,-.40703088,-.21250448,.30742928,.37277195,-.80115885,-.8678802,.6143874,-.1393438,1.9014724,.6287864,-.29007566,.24894527,-.084598936,-.10195434,.6725244,.1476504,-.81711125,-.23785153,-.2687558,-.08063117,-.64660716,-.29672796,.19803178,-1.0725876,-.48846015,.26117873,-.16448414,-.8135517,-.2396068,-.68538994,.46746972,.017147034,-.39721444,.5395615,-.68129456,-.68950176,.6379175,-.18879563,-.601441,-.14914659,.28257388,-.06801258,.87262344,.23851778,-.93659765,-.61057866,.3869648,-.54322064,.17621349,.39933562,-.26838356,-.6787574,.4542118,-.6214473,-.16286883,.33241832,.52009815,-.04389015,.43099433,-.18918994,-.0699583,-.4011423,-.4680562,-.08453421,.47990942,.68258685,.13868147,.09014508,-.96468496,-.3125278,.07021794,-.6256945,-.17518526,.5254323,.026043758,.7827423,.37593943,-.81099963,-.48589304,-.6181076,.3464076,-.65637887,-.9087095,.27802533,.42291033,-.71470517,-.024382427,-.34191424,.3715609,.29900515,-.15321466,.4223103,-.6810243,.9501056,.9660157,.5684314,-.6840457,.9011519,.4006058,-.054812297,-.3278045,.13269061,-.003270939,.7945267,-.35997283,.008919507,.04781963,.09879342,1.1716615,-1.6918949,-.0038376302,.3453554,-.44518936,1.0583606,-.24304189,-.39194727,-.8771078,.6252006,.90707165,-.23315008,.47497365,.4292472,-.1936692,.12913415,-.1475636,-.15928146,1.1760027,-.47877145,.2611896,-.23928192,-.2805072,-.26029187,-.53881466,.1463053,-.060448885,.3025133,-.7085141,1.0840682,.87900543,-.6089619,-1.0178206,-.1465635,1.4916542,-.47999573,-.78769577,.9324995,-.042144597,-.17385557,-.694552,-.73343325,.2113756,-.5617541,.002753675,.026878178,-.03304644,-.060428873,-.19045901,.07944143,-.17936926,.14255995,.26165277,.25363022,-.17156911,.31886804,.36477897,.31448266,-.4402247,-.6605383,-.29209277,-.02184701,.07129016,1.2041088,-.08607744,.6868062,-.11870214,.39767152,-.47376347,.49341673,-.4865569,.32344615,-.3304805,.34636128,-.13901542,.32009482,-.27254876,.01078175,.3152098,.46385923,-.22104949,.049352325,-1.4997485,.718936,-.8123848,-.14319927,-.28490943,-.34808922,-.08675116,.44241673,-.59815824,-.07229001,-.1410594,-.53053904,-.604408,.24715771,.45061332,.5246234,.15798728,.8007881,1.0782487,-.40670082,-.9810066,.37147605,.024882957,.35659164,-.6213065,.31156582,-.7462648,-.07881677,-.6464599,.55297613,-.027157247,-.73353577,.17943402,.15351228,-.35420698,-.61029816,.7510053,-.30832383,.93858385,.34071603,.3987522,-.1847787,-.1637178,.02768001,-.5354035,-.6667917,.24938802,.85312676,.65926206,-.6700324,-.5413718,-6.6603565,.33473808,-.79719985,.5672191,.40966862,-.8778815,-.79122424,-.84265536,-.054911867,.034035847,-.035450228,-.7115999,.13265315,.2853039,-.042418778,-.3857435,-.19576925,-.40516353,.90281695,-.14143735,-1.1416615,-.029246151,-.9500576,.18140188,.24237318,.048790812,.5556698,.7914316,.2495547,.52500474,-.4425726,.30772555,-1.1579999,.11761618,.37627977,.3699598,-.4064784,-.70195997,-1.0065365,.22727561,-.48447764,-.6922262,-.36559772,.33733815,.27402794,-.19242981,.8793957,.6324927,.6857877,.3402594,-.41365427,.8473201,.07122037,-.21966262,1.3530363,.16126359,.20483594,.047541887,-.13563412,.59878296,-.5222877,.23249048,.022053212,-.027995206,.45315766,-.27093852,.45001295,.37353158,-.4659841,-1.0557628,.29238224,-.615978,-.6061423,-.56772,.09222675,1.2289774,-.2608419,.33805326,-.30341062,-.23481514,-.15898935,.170041,.16101077,-.15624082,-.4120797,.52179575,-.4907847,.060272217,-.6232066,-.5026818,-.08406986,.1457738,.21825147,-.068150386,1.0083745,.046623915,-.28815505,.18114409,-.43560335,.68841815,-.21728098,-.03904757,.36197492,.32659656,.6258881,.27833712,-.45581207,-.23956256,-.03480515,.8282021,.41153115,-.14431608,.49786797,-.26332694,.32295832,-1.3503865,.3997446,-.5594292,-.22761418,-.80759275,-.66145134,.30638885,.6379153,.44339907,.20223261,.13254927,-.15584183,-.59257936,-.26050574,-.127828,.6298429,1.2286289,.446248,-.3683364,-.57343686,.64409995,.727667,.07726078,-.06948462,.07856369,-.2894051,-.37601364,-.52947044,-.5604656,-.024810776,-.1007294,.2326759,.02207733,-.62847537,-.21438701,-.14987782,.39942947,.10025895,1.0861416,.5236974,-.25878903,-.34411353,.3554512,-.13981228,-.25443503,.4212352,-.6016394,-.021476403,.8434148,.37521663,.5607296,-.08286813,.14120294,.35690963,-.3204405,.3156664,.48198363,-.5060003,-.42403144,-.14690426,-.0103046745,.5048769,-.22141436,.24258423,-.6422754,.24322656,-.43126827,-1.1802951,.39130136,-.07932167,-.91300964,-.72418,-.53930056,1.3650367,.2816636,.8360512,.035111547,1.0266368,-.6592778,-.20311683,-.86245996,-.11961725,.5289241,-.31791306,-.48852846,-.36820427,-1.1325517,-.172961,-.69658613,-.19654733,-.48604023,-.039546154,.27189648,-.5934818,.32894725,-.3464777,-1.2947841,.11832157,.057199597,.26814514,-.019387782,-.19241248,1.0733972,.5806271,.38309595,-.5962738,-.5991694,.0001809001,-.047461003,-.6104969,-.21187392,.3681571,.56478834,.31657338,.60445374,-.72324264,7.102296,.2320408,1.2788781,.39451483,-.38477656,.18585496,-.100402914,.12734093,-.062079042,-.17090957,-1.023449,-1.0438731,.5087607,-.11995703,-.6581255,-.0378467,.17184725,.32889995,.44024402,-.4910356,-.21709728,-.3552832,-.10108532,.67255217,-.26185948,-.33452994,-.9686227,.19499342,-.1010796,1.0840887,.106898844,-.35084283,.43648404,-.20369194,-.6644819,1.3143753,.6160634,-.7739917,-.8475234,.33090666,.64564764,.021771155,.2852819,-.27892023,.47342622,.08733651,-.24427167,.3342801,.8780564,.32256088,.042700186,-.123469636,-.6483467,-.07093936,-.1490322,.68972445,-.46431243,-.23367062,.07558803,-1.4903392,-.8174287,-.13574086,-.4515139,-.77248406,-.02985935,.29469693,.19764733,.1002135,-.5024662,.23806244,.12814781,.9761914,.02061516,-.13079715,-.17521717,.008743554,.24278867,-.11270741,-.06445181,-2.048985,1.2659411,-.20091164,-.052794524,-.05558747,-.7332828,1.0670618,.5501005,-.78713524,.13444223,-.5436457,.3966677,-1.1162032,.13205236,.67770827,.6064305,-.19848457,.6782849,-.25059327,.26677483,.19828254,.49251252,-.51555383,.60080767,-.05582097,-.41838056,-.29807913,-.52003455,-.2546904,.0057011843,-.2909273,-.55240405,-.4412741,.025383651,-1.0971302,.25295818,.14131472,-.099668816,.018698499,-.28353235,.92611885,-.39993376,.013562202,.060183506,.20493457],is_price_stale:false}}],favorited_items:[],showcase:[]},isOwnProfile:true,userExpProfile:{id:1891,user_id:2010,current_exp:55,rank_id:2,exp_multiplier:100,lifetime_exp:55,activity_streak:0,last_activity_date:new Date(1755975381796),metadata:null,created_at:new Date(1755898707993),updated_at:new Date(1755975381796),rank:{id:2,name:"Novice Collector",level:1,exp_required:0,icon_url:null,color:"#8E8E8E",benefits:{},created_at:new Date(1748819778061),updated_at:new Date(1748819778061)}},currentRankInfo:{level:1,currentExp:55,nextThreshold:500,progressInRank:55,maxProgressInRank:500}},uses:{params:["username"]}},(function(a,b,c){a.id=70829;a.unique_id="CARD-RIP8CFAEDA78FA7";a.owner="0xeE2597C840385141032447f54ec385595f29C028";a.is_listed=false;a.listing=null;a.created_at=new Date(1754464368085);a.front_image_url="cards/sv3pt5/CARD-RIP8CFAEDA78FA7_1754464264531.png";a.back_image_url="";a.full_image_url="";a.video_url=null;a.token_id="72979";a.card={id:"sv3pt5-137",set_id:"sv3pt5",card_number:"137",supertype:"Pokémon",subtype:["Basic"],hp:60,types:["Colorless"],abilities:[],attacks:[{cost:["Colorless"],name:"Conversion 4",text:"Choose Grass, Fire, Water, Lightning, Psychic, Fighting, Darkness, Metal, or Dragon type. Until the Defending Pokémon leaves the Active Spot, its Weakness is now that type. (The amount of Weakness doesn't change.)",damage:0}],weaknesses:[{type:"Fighting",value:"×2"}],resistances:[],formatted_card_number:137,name:"Porygon",is_chase:false,raw_price:"0.04",illustrator:"5ban Graphics",is_reverse:false,is_holo:false,is_non_foil:true,is_variant:false,is_first_edition:false,tcgplayer_id:"516700",sku:"7432304",small_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv3pt5/137.small.png",large_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv3pt5/137.large.png",is_active:true,rarity:"Common",rip_rarity:"",created_at:new Date(1729921431083),updated_at:new Date(1755958779289),clip_embedding:[.6909699,.020226657,-.042171985,-.0018000603,.30558854,-.19641341,.544861,-.36426753,-.57842195,-.53602874,-.47814792,-.36668026,-.6301969,.4898988,-.37070388,-.09584427,.19014603,-.16658954,-.11601755,.50458443,.6370497,-.30722257,.117938876,-.4643912,-.6053061,.40490735,-.5468032,-.09771566,-.12330973,.19113535,.19285598,.6389584,-.9389874,.49208912,.5784685,.17166975,-.13703442,.19793779,-.20560566,.40965974,-.043939516,.3330474,.8535068,.16630213,-.36146972,.13833255,.009652078,-.99484897,.15997973,.45527178,-.17693958,.18601009,.74337995,.5827609,.6195984,.48832408,.40865678,-.23748145,-.35901672,.9681567,.5108411,.43089014,.16899571,.05171466,.41433102,.7795466,.06265357,.26634538,-.32973164,-.200963,-.30678922,-.08193672,.09021795,.2967993,1.0579491,-.33882394,.047324494,-.9417688,-.87311655,.08119109,.10128091,-.10418661,.3750478,-.6615658,-.7981886,-.3472184,.06613958,-.09083911,-.19933805,.32137278,-.99902105,-.084444076,.52801216,.120165296,-.2008775,-.12995562,-.03811656,.03759575,-.16396587,.18523636,.298663,-1.4586625,-.120935425,-.3508021,.60745096,.41334105,.12413409,-.91770077,-.3052821,.4785015,.3034878,-.25981218,-.8959055,-.01703021,-.5649775,-.15998343,-.17226742,-.33331734,.017512754,.28708696,.12275022,-.206364,.29389286,.42347273,.65528595,1.0537688,-.33463943,.9376362,-.33778843,.38282025,.77094007,-1.9732232,.3701715,-.73591876,-.2372242,-.09906363,-.14648843,.41712916,-.057232916,-.0911776,.3833808,.98308456,.29286698,-.3115158,-.3873585,-.5029448,-.014339507,-.8121815,-.4761074,.12647176,-.21862936,-.2992108,.06530833,.782161,.3981956,-.49700913,.56719077,-.19536011,-.3540366,-.9271766,-.101523995,.7140417,.20993853,.5506522,-.45628566,.155815,.16622381,-.3778955,.3865615,-.7716086,.062206566,-.417653,-.31549346,.19646049,-.12823898,-.40974128,-.9301712,-.5525829,.4531275,-.34747648,2.8634665,.4271805,.11211401,.10576663,.18320788,-.53283715,.71709526,.62461036,-.854423,-.64629483,.50699747,.4567737,-.5821499,-.20851049,-.5663067,-.73719037,-.30229664,.1655336,-.541689,-.56382453,-.9033044,-.33292168,.4633824,-.13350499,-.37377018,-.186361,.11711052,.23832357,.75726557,-.39130056,-.43358707,.10124686,-.14626166,.004356198,.80042624,-.08674219,-.5988208,.05930987,-.41526958,.20625918,.18621954,.93455344,-.5423496,-.6639395,.42878938,.052222162,-.13532537,.43064126,-.28790966,.10505982,.59680927,-.37730622,-.23653224,.15698147,.020776883,.15047742,-.08169728,.40735698,-.03721434,.41635227,-.6650302,-.9252496,-.36629522,-.8220975,-.01755312,.21137685,-.049848408,.7563392,-.0028129965,.04806848,-.5873288,-.078609996,.85848665,-1.2064254,-.017267615,-.044521824,.24394597,-.84009945,.31280392,-.11461258,-.1317603,.06105052,.11181849,.09456761,-.3213221,.82502425,.92275846,.3378762,-.3797322,.6741476,.120669484,-.8238549,-.23700681,-.1465554,-.041286513,.8694198,-.38852522,.097647786,.06524688,.21676783,.64000654,-1.1084449,-.112093106,.5083858,.13765442,.16306955,-.15455537,-.11584133,-.9110867,.012634352,.10834654,-.2063193,.568308,.08540255,-.46248156,-.33561045,-.40044534,-.83630407,.8269697,-.8824223,.47260508,-.25142077,-.044433966,-.026421137,-1.1333295,-.10452984,-.9605876,.2167339,.06843166,.51076424,-.1798808,-.38228184,-.25706953,.46463048,1.2943511,-.21751964,-.91899216,.6461561,-.22106688,-.38955015,-.2882611,.013745457,.64680904,-.22987297,-.24944244,.7730223,.49905714,.3357296,-.21781535,.48420832,-.22192189,.039818555,-.08038324,.16088718,-.46678072,-.07083988,.7256558,-.025532953,-.11965218,-.6212721,.71895874,.2073333,.047669113,.42172784,-.23887536,.8555663,-.11028677,.111533195,.17571801,-.17296018,.2161296,.5166198,-.8141625,-.35512492,-.5877366,.7216026,-.049905017,.5929866,.81407195,.75673866,-.119496554,.033414662,-.9397049,.34813514,-.8567399,-.24569803,-.17294368,.1357396,.28048047,.051882416,-.77543616,-.2954954,-.105976924,-.93544316,-.076290324,.5582422,.2578604,.05517751,-.13905434,.610691,1.0267452,.23809199,.29876524,-.17468861,-.29156697,.12883821,-.58408016,.4814266,-.5344509,-.09982999,-.5859248,1.4479544,1.0292826,-.374686,.18007226,.48547292,-.020796657,-.82428205,.8787176,-.28942314,.9027581,.17688331,.47012395,-.41737437,-.47543442,.005602017,-.39555168,-.97482944,-.7974438,.82756495,.67896986,-.83162147,-.5485949,-6.046235,.25984868,-.28710377,.101717725,.09151684,-.5008377,-.3035865,-.4689547,-.16762847,-.4718153,.45914763,-.3427296,-.6223549,.25269675,.16345535,.17229858,-.7023006,.17156395,.4373428,-.2506492,-.9182593,-.22135004,-.20214188,-.19274133,.065150775,.5997906,.45000133,.8586792,-.24755011,.38711023,-.5732844,.48727527,-.4375427,.2730939,.7884941,.73478854,.47484964,-.42615485,-1.1146165,.58245754,-.5418042,-.1350005,-.018161118,.31326613,.19625747,-.20880023,.17226988,.02303563,.32289302,.33145308,.1632411,.29749238,-.14138709,-.9389454,1.4861264,.4917176,1.0458792,-.07979589,-.143854,.47255456,-.20212343,.46547297,-.5116587,-.12135264,.18403532,-.20511091,-.23394418,-.6019937,-.6298704,-.9821929,-.2844424,.18556446,-.6205563,.07173805,-.022007309,.8307504,.2398647,.27329615,-.057066754,-.6170046,-.18281412,.064525366,-.4128791,.5384218,.08630912,.2291573,-.05563668,.041131377,-.7595298,-.87552243,.3630589,.24187396,-.11285691,.36417788,.6568192,.67872995,-1.0906942,.8501866,.15241629,1.5771585,.034203798,-.04829841,.17755097,.33530384,-.10392022,-.025763482,-.7366916,-.35234576,.17301635,.648288,.41672105,.584547,.93417865,.119660914,.048612952,-.9774155,.33235776,-.42641348,-.36433718,-.8401959,-.3800528,.64585644,.71643066,.55284256,.34301764,.19477645,.33658227,-.107228726,-.07072835,.46269244,-.006714642,.88475424,.6424387,-.2125201,-.36712503,.55526346,.6861501,.072459996,.31841087,-1.095395,-.8624381,-.36059988,-.539145,.095763266,.3428742,.41584563,.06485246,.46313077,.111477494,.2913282,-.50140727,.33043715,.22275099,1.1575077,.5953074,.08952449,-.27933887,.074890524,-.22032797,.18695623,-.015785113,-.19361854,-.61662257,.6406342,-.12314497,.9733267,.36902773,.10186365,.43850392,.01838842,.42083856,-.47467422,-.29752362,-.5508709,.10191822,.50682664,.67210406,-.18639839,-.24997029,-.44627753,-.13548976,-.54788554,-.9197036,.6241904,-.31769523,-.7725073,-.48669615,-.42857805,.6858481,.6244308,.56601816,.5200908,.99785984,-.44345897,.18239483,.21814863,-.26574883,.26763916,.3588921,.006809935,-.2263597,-1.1047328,.08538884,.08529422,-.2847923,.20598572,.18658875,.66170716,-.18817928,-.10439047,.109595925,-.92550886,.20771939,-.2980011,.133181,.07854297,.011963025,.4830106,.5942953,.2873773,-.24204594,-.17306536,.940765,.120746456,-.6200481,-.63029534,.09043699,.32508868,.37391543,1.3439574,.0063486844,6.4198427,.09870028,.99915206,.3163892,-.84823346,-.047817245,.55122775,.45128298,-.15865067,-.060951218,-.19905087,-.7978876,.68162334,-.48800224,-.46438444,.5639696,-.4390276,.40274486,.31355232,-.15143268,.021960244,-.20431101,-.3747681,.4611532,-.37543222,.204155,-.47412232,.35968205,.18737678,.8787203,-.5436473,.28562957,.51484835,-.09824777,-.39901277,1.1360676,.03271018,-.249024,-.3319438,.7978407,.9180618,-.480273,-.08384323,-.31197876,.06476681,.3274528,.22000453,.0028117597,.833701,.9360378,-.07571477,.82540715,-.80591464,-.24394345,.394223,.35094967,-.775366,-.38586023,.19943751,-.77138937,-.7524718,-.13893066,-.035132036,-.32393813,.009168863,.8979661,-.7103255,-.09811683,-.23044497,-.9180802,.191841,1.2281642,.000090032816,-.14664456,.34275103,.13192327,.28254837,-.36258072,-.66589093,-1.796519,-.41239756,-.028722525,-.4101399,-.3601289,-.5589785,.7890251,.7661139,-.8557986,-.7508529,-.6010324,.5239527,-.87830955,.7826338,1.1415995,.56383705,.25109586,.5292797,.3215892,.14344876,.2791199,.11554362,-.83637476,.9738017,.012896568,-.0118872225,.0819422,-.3915246,-.15967093,-.1103169,-.5760799,-.116239384,-.54852283,-.48679298,-.46551228,.6406912,.13414511,-.09600343,-.1398989,.43431017,.8066305,.61854386,.1640011,.07665421,-.09118277],is_price_stale:false,set:{id:"sv3pt5",name:"151",logo:"https://gjnrvwqtdlspyfpezgox.supabase.co/storage/v1/object/public/tcg/sets/sv3pt5.logo.png",packet_type:2,is_onchain:true,background_image_url:"",value_score:null,symbol:"https://gjnrvwqtdlspyfpezgox.supabase.co/storage/v1/object/public/tcg/sets/sv3pt5.symbol.png",language:"en",tcg_type:"pokemon",is_active:true,card_count:{total:207,official:207},release_date:new Date(1695340800000),series_id:"scarlet-violet",created_at:new Date(1729917678318),updated_at:new Date(1749233214544),tcgplayer_id:"23237"}};a.digital_product={reveal_state:{is_opened:true,is_viewed:true,opened_at:"2025-08-18T19:07:41.580Z",opened_by:"0x236320f0104E61CAc317F49Bcc1F0d16C87dda01",video_url:"pack-videos/sv3pt5/PACK-RIP12W70UFA2Z680/opening-video.webm",viewed_at:"2025-08-18T19:10:12.696Z",opened_hash:"0x2a7ff7f3f1b79a88896a89f22850e90ae910e97ec0ff33eb7d2f2a5891c80740"}};b.id=84129;b.unique_id="CARD-RIPA5F47BAC2F14";b.owner="0xeE2597C840385141032447f54ec385595f29C028";b.is_listed=true;b.listing={nonce:"1755903174158982682",price:"10000000",chain_id:"8453",deadline:"1756548000",signature:"0x36e1ebe667e4f8130f6826435b85bbf56ed04d14f055d712d4da3d8cfaafccee0deb06c210a7096b80a2f0bff94bf266dd46b84e45e421d175181bff0eac99731b",usd_price:"10.00",charge_delegate:false,contract_address:"0xF4710eE68f151B6CB0c377400738c0De9B39284f",min_seller_amount:"9750000"};b.created_at=new Date(1755408009933);b.front_image_url="cards/sv8pt5/CARD-RIPA5F47BAC2F14_1755407594716.png";b.back_image_url="";b.full_image_url="";b.video_url=null;b.token_id="84900";b.card={id:"sv8pt5-66",set_id:"sv8pt5",card_number:"66",supertype:"Pokémon",subtype:["Basic"],hp:70,types:["Metal"],abilities:[],attacks:[{cost:["Metal","Colorless"],name:"Hammer In",text:"",damage:20}],weaknesses:[{type:"Fire",value:"×2"}],resistances:[{type:"Grass",value:"-30"}],formatted_card_number:66,name:"Bronzor",is_chase:false,raw_price:"0.02",illustrator:"",is_reverse:false,is_holo:false,is_non_foil:true,is_variant:false,is_first_edition:false,tcgplayer_id:"610421",sku:"8488983",small_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/66.small.png",large_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/66.large.png",is_active:true,rarity:"Common",rip_rarity:"",created_at:new Date(1737164931157),updated_at:new Date(1755958808484),clip_embedding:[.46369115,-.07859939,.5930115,1.1542466,.3705208,.6503925,.4770559,-.5753597,-1.009993,-.31127992,.5665172,-.5838204,-1.1325133,.622715,.15981472,.37039265,.19458947,.2370621,.025257945,.652942,.7655917,-.19248539,.24993324,-.5058757,-1.2209268,-.08497487,-.014502972,-.030635752,-.0564016,.090699986,-.30017692,.4252848,-.0832407,.11237602,.43449217,.1722754,-.18630789,.37551105,-.4815655,-.2795565,.5278235,-.121292606,.5636598,.047899798,-.38309026,.36353597,.11221197,-.31189656,.89900595,-.30572522,-.33609873,.52335036,.047729746,1.1454396,-.8381635,-.04976526,.5152152,-.39088032,-.010009445,.19751924,.06948358,.65077937,.25384235,.0012974143,.8872163,-.048028827,.40359735,-.11795366,-.39236486,.26402137,-.7709233,.4374706,.15797454,.23154871,.5911988,-.4021381,-.42592704,-.63979495,-.90849507,-.070353895,-.48683637,.42800725,.09512335,-.64627385,-.5103454,-.2768622,.45807147,-.010065079,-.10690832,.7888932,-.20818734,.28486842,-.017748684,-.38630128,.10409586,-.2735229,.32609302,-.5417154,-.14110738,.2546685,-.05124578,-.6156131,-.47254544,.2808553,-.022950232,.24293636,.027303182,-.19147828,.13307972,.52038914,-.02276817,.39489692,-.7733266,-.4565966,-.85444087,.17213878,-.4535386,-.09766655,.36361378,.46159965,.24659505,-.46694613,.47800326,.74724275,.74138,.4988766,-.3762383,.6947605,-.13226452,.4893911,.011683762,-2.4805791,-.15815848,-.46877846,-.31737852,-.053778604,-.3101764,.44039205,-.56023884,-.13569662,.23103844,-.35432082,.051036805,-.14921762,-.1545096,-.4652118,-.069200546,-.08520168,-.39421523,.27576298,-.25677282,-.89919406,.22730428,.013944745,.43694204,.0025570393,.2299689,-.18981776,-.36968562,-.51024425,.3468312,.47222716,-.28247595,.31482768,-.5736162,-.19946074,.028994493,-.29201028,.22174022,-.6730585,-.31561983,-.64896286,.032572083,-.16113904,-.5597651,.4254152,-.9565349,-.7514757,.105555855,-.099324316,1.8216288,.43661943,-.3147357,.9062691,-.015138436,-.014042877,.6435862,.07872264,-.62394464,-.5520791,-.25880232,.141966,-.56386065,.3558098,.333359,-1.3702555,-.2047187,.4885229,-.013857916,-1.2090235,-.36369246,-.2268475,.51270413,-.27559748,-.46678793,-.36557084,-.37118298,.14005408,.720827,-.28978792,-1.2893331,.39700913,.18412046,-.07575225,.9368956,-.09216553,-.40175462,-.5771357,.18974665,-.28151387,.12243734,.5868347,.20902106,.30230922,.5549904,-.25333744,.31198648,1.0948825,.1485022,-.052993275,.6038513,.26290554,-.36480498,-.4794562,-.29516304,.21683961,.48220024,.22333154,.6636195,.620702,-.5223414,-.6155687,.116624326,-1.2849289,.12929893,.6385262,.31568694,.8301852,.13798475,-.5861155,.19099104,.20716655,-.44246554,-.5455265,-.45386058,.47219557,.05889952,-.2490744,.062016174,-.2742216,.8055366,.10555208,.7996861,.3987708,-.22306466,.04182084,.64385605,.7523116,-1.1661096,.69961905,.34961492,-.53786516,.4590888,.25058952,-.32580924,.40287012,-.2977881,.06751174,.34411505,-.3764056,1.1099522,-1.3333666,.31773788,.32718122,-.12717965,.9917628,-.12972772,.3501248,-1.0470694,-.2409974,.57745844,-.80608547,.2746396,.50011915,-.62775654,-.18135932,-.04790587,-.19562455,.33261582,-.36844438,.82534075,-.20470446,-.71950656,.057911783,-.6708391,.29018083,-.47817823,-.0031964183,-.3607733,.8403166,.380827,-.15195161,-.2933217,-.35434818,1.1764501,-.3542049,-.7551645,.27897498,-.77229714,.20875204,-.79227585,-.5558148,.111404955,-.3898602,-.17580375,.33704636,.20644335,-.36702707,.09782052,.4348132,-.25648502,.057017356,-.23890004,-.23364362,-.5512183,-.2736243,.39720768,.08032181,-.47379193,-.75679433,-.2184808,-.023317188,-.014240075,-.12739384,-.23544839,-.10278241,-.6841259,-.0661087,.017106697,.12769541,-.47089192,.23054096,-.9196718,.24619472,-.31042758,-.32734728,-.36054763,.12961236,-.07554339,.46506003,-.38053998,.6585343,-1.2560596,.43148053,-.5919421,.29706374,-.48887634,-.078029096,-.7440518,.2909873,-.73355156,-.5180631,.23013584,-.766729,-.113175064,.46985647,.073954,-.19849975,-.2483697,.54098517,1.0546498,.22471908,-.023222998,.56645703,.46363196,-.19227916,-.5363936,.9391939,-.668339,.038636222,-.61319363,.39131913,.06377434,-1.4292498,-.14944848,.25931254,-.48094216,-.2341707,.36601624,-.4104449,.8675917,.19898857,.7559532,-.24845335,-.10911979,.074134216,-.55833924,-.95269126,-.39433563,-.08258046,.781072,-.7557202,-.4532581,-5.089872,-.20685104,-.23473829,.26355177,-.10399207,-.4864762,-.26854545,-1.4406865,-.18725231,-.07669617,-.13943475,-.56013584,-.08304024,-.028942883,-.3671196,-.23152882,-.5220278,-.49980515,.6747385,-.23507212,-.99632096,-.21322238,-.61690205,.09843141,.8945056,.38885504,.607074,.71837664,.24224186,.5564633,-.49709302,.39380506,-.923736,.4310009,.438397,.10598352,.60629845,-1.7727885,-1.4527493,-.34239477,-.7459463,.19451684,.2122087,1.114963,-.037752897,-.47950277,.5981985,.1629822,.48399833,.05504991,.7718417,.40393454,.63396204,-.28309715,1.44659,.16938844,.4915325,.5524707,.14484245,.54460526,-.62773544,.29333764,-.205609,-.55984414,.31549138,-.389176,.19284344,-.21885902,-.30114913,-1.042437,.24169308,-.45338282,-.46941757,-.10909665,.29626328,1.2181876,-.70013964,.081118315,-.38907897,.020156637,-.0858672,.3986177,-.12506258,.12695159,.0972328,.81415594,-.28721923,-.28763244,-.74416745,-.47673503,.009941049,.53765047,.6498183,-.032693848,.8824409,.35555592,.24459924,.36325553,-.36079383,.61674565,-.342575,.1354377,.06559232,.03170923,.6594311,.0858431,-.38150537,-.6422091,.03254634,.3781818,.4900239,-.22685575,.8939128,.12577452,.66533285,-1.2672946,.3277112,.06861543,-.20823371,-.386525,-1.0616235,-.0103882775,.90126586,.16377194,-.61365,.4524026,.2076508,-.29672298,.032695606,-.67797595,.37709326,.57647,.9397327,-.43037218,-.33845437,.13544528,.65932924,-.1591317,-.028198376,.27421397,-.4882071,-.50066805,.0018426329,-.15287532,-.17259535,-.057814807,.52424794,.5331067,-.41819006,-.25496018,-.5864047,.28041837,-.09873772,1.1250631,.712833,-.32962823,.27749014,-.03654185,-.44869667,-.3327193,.7322389,-.4813149,.012946546,.38998336,.14975859,.8334302,.050560787,.410844,.8334204,-.34340417,-.22913846,-.2197913,.08731398,-.82930064,.2890839,-.25911757,.26661158,.10648498,.0444915,-.43083385,-.10609561,.21567363,-.7988006,.52070355,.2755764,-.71910965,-.55511284,-.2664589,.8173429,.4232621,.40765253,.17386144,.8363877,-.43845826,-.015945137,-.22675075,-.43408573,.6540566,-1.2180803,-.62493324,-.73369807,-.13978784,.03562233,-.1965879,.051935077,-.29526094,.3018066,.5130079,-.536014,.12344301,-1.1873564,-1.6608741,-.014353678,.5916935,.011047594,.38856688,-.07633591,.85908216,.6458176,.36911374,-.11461192,-1.1135023,.7926632,-.6834049,-.76743424,-.4789437,.37120664,.2513959,.47341147,.42779684,-.0987056,5.4381227,-.10252586,.93630743,.10450955,-.2630658,-.18136415,-.46472472,-.16122779,-.31562325,-.78460586,-.96737355,-.6660814,-.027722627,-.71092343,-.802299,.63387305,.38889322,.30447793,.69714075,.2468276,.08916867,-.80684817,-.39252642,-.08222321,-.49937075,.07146709,-.73139477,.6179249,-.36322695,.75425136,.12086557,.44372404,.48222962,-.1454845,-.60928,1.1442332,.54141474,-.6204026,-.4928102,.0663495,-.15683272,-.19781126,.36716804,.404993,.43273485,.3530346,.37717715,.5047413,.27288234,-.2180525,.32318866,.1290378,.23340976,-.9770124,-.025528073,.24075758,.23889756,.059035182,.17746514,-1.9640949,-.7561447,-.12312905,-.17091236,-.69193923,-.22063665,.45100227,-.17894074,.26453078,-.48776263,-.27922058,.10598305,1.6504319,.31562153,.44388324,.32731277,.28699505,-.47093797,-.29316851,-.22006682,-1.5507449,.78097856,.20900932,-.16473317,.055311218,-.51617163,.3809191,.47225925,-.47963098,.24335194,-.83555484,.3763898,-.612064,.8619234,.90794027,.19750936,.07880658,.66652834,-.083116844,-.16495803,.20305072,.3441457,-.51402706,.17118675,-.11448681,-.14385015,-.105947345,-.26151294,-.47087958,-.29188973,-.7948978,-.6799716,-.31276804,-.7212505,-.7656472,.039660916,.024656475,-.29912767,.31399083,.47076762,.93585634,.2610824,.44995028,-.582746,-.44688725],is_price_stale:false,set:{id:"sv8pt5",name:"Prismatic Evolutions",logo:"https://gjnrvwqtdlspyfpezgox.supabase.co/storage/v1/object/public/tcg/sets/sv8pt5.logo.png",packet_type:3,is_onchain:true,background_image_url:"",value_score:null,symbol:"https://gjnrvwqtdlspyfpezgox.supabase.co/storage/v1/object/public/tcg/sets/sv8pt5.symbol.png",language:"en",tcg_type:"pokemon",is_active:true,card_count:{total:180,official:180},release_date:new Date(1737072000000),series_id:"scarlet-violet",created_at:new Date(1737158477393),updated_at:new Date(1749439691931),tcgplayer_id:"23821"}};b.digital_product={reveal_state:{is_opened:true,is_viewed:true,opened_at:"2025-08-17T05:20:45.790Z",opened_by:"0x06eC0E35de1E6957B1050a4edBaAF0CC9D3429a6",video_url:"pack-videos/sv8pt5/PACK-RIP4005D75C68E6/opening-video.webm",viewed_at:"2025-08-17T15:32:59.929Z",opened_hash:"0xeb9afc3cba4c7e5eea1c74f52cc87c955b4fa025dca0dc7e6d7874e6d66e470e"}};c.id=83997;c.unique_id="CARD-RIP4146331A253E";c.owner="0xeE2597C840385141032447f54ec385595f29C028";c.is_listed=false;c.listing=null;c.created_at=new Date(1755403821088);c.front_image_url="cards/sv8pt5/CARD-RIP4146331A253E_1755403475638.png";c.back_image_url="";c.full_image_url="";c.video_url=null;c.token_id="84768";c.card={id:"sv8pt5-69",set_id:"sv8pt5",card_number:"69",supertype:"Pokémon",subtype:["Basic"],hp:130,types:["Metal"],abilities:[],attacks:[{cost:["Metal"],name:"Hammer In",text:"",damage:30},{cost:["Metal","Metal","Colorless"],name:"Raging Hammer",text:"This attack does 10 more damage for each damage counter on this Pokémon.",damage:80}],weaknesses:[{type:"Fire",value:"×2"}],resistances:[{type:"Grass",value:"-30"}],formatted_card_number:69,name:"Duraludon",is_chase:false,raw_price:"0.06",illustrator:"",is_reverse:false,is_holo:false,is_non_foil:true,is_variant:false,is_first_edition:false,tcgplayer_id:"610424",sku:"8489013",small_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/69.small.png",large_image_url:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/tcg/cards/sv8pt5/69.large.png",is_active:true,rarity:"Common",rip_rarity:"",created_at:new Date(1737164931273),updated_at:new Date(1755958807848),clip_embedding:[.40847832,-.56514615,.34280562,.41467097,.5034383,.26824412,.4728923,-.6050231,-.5083692,-.20695777,.56340325,-.06891081,-.97656685,.42819074,.16392316,.4574374,.4153028,.096429065,.019448206,-.0486598,.9464354,-.09424046,-.26030535,-.32902747,-1.2813689,-.35949063,-.39930254,-.12138981,-.5997125,.40632522,-.08602406,.962909,-.121387504,.3023517,.28292447,.3287384,-.10929313,.37310272,-.4933052,-.5835989,.44373012,.53882307,.28211543,.8578944,-.38350692,-.17310612,-.034349203,-.044370875,.2498738,-.37916058,-.23905616,.16605662,.11728454,.47042394,-.1316907,.35756028,1.2102959,.40782192,.17630875,.9438063,.24739705,.4904737,.032886103,.059471592,.5208355,-.067310154,.48381954,.2761153,-.737057,.106463075,-.5073763,.17058378,-.09107724,.39186394,.78706867,-.115891606,-.05908598,-.62499875,-.68003404,-.29307324,-.44190562,.92926514,.24193631,-.52993643,.07679558,.014093816,.40700936,.17231771,-.22624244,.4108714,-.28148746,.40667337,-.018273354,.004287988,-.1201489,.23122443,.1955438,-.6103152,-.12714666,.16962029,-.23690823,-1.1811626,-.71252406,.02401793,.21925506,.45641437,.17631176,-.5817324,-.0060052276,.07883361,-.28118578,.26270646,-.42928997,.23761906,-.74442023,-.6581675,.25287986,-.08947101,.3299753,.43548155,.21273947,-.1713076,.5055112,.17778862,.89266646,.7249126,-.49447015,.67978287,-.019887403,.90195453,.5521946,-1.5113035,.40576714,-.24748465,-.36752534,.29747006,-.50177705,.45183095,.14941238,.22772457,.18270929,.13012545,.3567936,-.33453926,-.29334816,-.4267701,-.042070985,-.44694054,-.32238203,.5608578,-.8385148,-1.2310141,.6388492,.0246896,.36759478,-.67490894,.4816802,-.10848558,-.16577606,-.6774781,.5460908,.45259783,-.43293315,.38352054,-.21718383,-.1753794,.2708807,-.388857,.13637343,-.5506218,.6899396,-.083086446,-.40703088,-.21250448,.30742928,.37277195,-.80115885,-.8678802,.6143874,-.1393438,1.9014724,.6287864,-.29007566,.24894527,-.084598936,-.10195434,.6725244,.1476504,-.81711125,-.23785153,-.2687558,-.08063117,-.64660716,-.29672796,.19803178,-1.0725876,-.48846015,.26117873,-.16448414,-.8135517,-.2396068,-.68538994,.46746972,.017147034,-.39721444,.5395615,-.68129456,-.68950176,.6379175,-.18879563,-.601441,-.14914659,.28257388,-.06801258,.87262344,.23851778,-.93659765,-.61057866,.3869648,-.54322064,.17621349,.39933562,-.26838356,-.6787574,.4542118,-.6214473,-.16286883,.33241832,.52009815,-.04389015,.43099433,-.18918994,-.0699583,-.4011423,-.4680562,-.08453421,.47990942,.68258685,.13868147,.09014508,-.96468496,-.3125278,.07021794,-.6256945,-.17518526,.5254323,.026043758,.7827423,.37593943,-.81099963,-.48589304,-.6181076,.3464076,-.65637887,-.9087095,.27802533,.42291033,-.71470517,-.024382427,-.34191424,.3715609,.29900515,-.15321466,.4223103,-.6810243,.9501056,.9660157,.5684314,-.6840457,.9011519,.4006058,-.054812297,-.3278045,.13269061,-.003270939,.7945267,-.35997283,.008919507,.04781963,.09879342,1.1716615,-1.6918949,-.0038376302,.3453554,-.44518936,1.0583606,-.24304189,-.39194727,-.8771078,.6252006,.90707165,-.23315008,.47497365,.4292472,-.1936692,.12913415,-.1475636,-.15928146,1.1760027,-.47877145,.2611896,-.23928192,-.2805072,-.26029187,-.53881466,.1463053,-.060448885,.3025133,-.7085141,1.0840682,.87900543,-.6089619,-1.0178206,-.1465635,1.4916542,-.47999573,-.78769577,.9324995,-.042144597,-.17385557,-.694552,-.73343325,.2113756,-.5617541,.002753675,.026878178,-.03304644,-.060428873,-.19045901,.07944143,-.17936926,.14255995,.26165277,.25363022,-.17156911,.31886804,.36477897,.31448266,-.4402247,-.6605383,-.29209277,-.02184701,.07129016,1.2041088,-.08607744,.6868062,-.11870214,.39767152,-.47376347,.49341673,-.4865569,.32344615,-.3304805,.34636128,-.13901542,.32009482,-.27254876,.01078175,.3152098,.46385923,-.22104949,.049352325,-1.4997485,.718936,-.8123848,-.14319927,-.28490943,-.34808922,-.08675116,.44241673,-.59815824,-.07229001,-.1410594,-.53053904,-.604408,.24715771,.45061332,.5246234,.15798728,.8007881,1.0782487,-.40670082,-.9810066,.37147605,.024882957,.35659164,-.6213065,.31156582,-.7462648,-.07881677,-.6464599,.55297613,-.027157247,-.73353577,.17943402,.15351228,-.35420698,-.61029816,.7510053,-.30832383,.93858385,.34071603,.3987522,-.1847787,-.1637178,.02768001,-.5354035,-.6667917,.24938802,.85312676,.65926206,-.6700324,-.5413718,-6.6603565,.33473808,-.79719985,.5672191,.40966862,-.8778815,-.79122424,-.84265536,-.054911867,.034035847,-.035450228,-.7115999,.13265315,.2853039,-.042418778,-.3857435,-.19576925,-.40516353,.90281695,-.14143735,-1.1416615,-.029246151,-.9500576,.18140188,.24237318,.048790812,.5556698,.7914316,.2495547,.52500474,-.4425726,.30772555,-1.1579999,.11761618,.37627977,.3699598,-.4064784,-.70195997,-1.0065365,.22727561,-.48447764,-.6922262,-.36559772,.33733815,.27402794,-.19242981,.8793957,.6324927,.6857877,.3402594,-.41365427,.8473201,.07122037,-.21966262,1.3530363,.16126359,.20483594,.047541887,-.13563412,.59878296,-.5222877,.23249048,.022053212,-.027995206,.45315766,-.27093852,.45001295,.37353158,-.4659841,-1.0557628,.29238224,-.615978,-.6061423,-.56772,.09222675,1.2289774,-.2608419,.33805326,-.30341062,-.23481514,-.15898935,.170041,.16101077,-.15624082,-.4120797,.52179575,-.4907847,.060272217,-.6232066,-.5026818,-.08406986,.1457738,.21825147,-.068150386,1.0083745,.046623915,-.28815505,.18114409,-.43560335,.68841815,-.21728098,-.03904757,.36197492,.32659656,.6258881,.27833712,-.45581207,-.23956256,-.03480515,.8282021,.41153115,-.14431608,.49786797,-.26332694,.32295832,-1.3503865,.3997446,-.5594292,-.22761418,-.80759275,-.66145134,.30638885,.6379153,.44339907,.20223261,.13254927,-.15584183,-.59257936,-.26050574,-.127828,.6298429,1.2286289,.446248,-.3683364,-.57343686,.64409995,.727667,.07726078,-.06948462,.07856369,-.2894051,-.37601364,-.52947044,-.5604656,-.024810776,-.1007294,.2326759,.02207733,-.62847537,-.21438701,-.14987782,.39942947,.10025895,1.0861416,.5236974,-.25878903,-.34411353,.3554512,-.13981228,-.25443503,.4212352,-.6016394,-.021476403,.8434148,.37521663,.5607296,-.08286813,.14120294,.35690963,-.3204405,.3156664,.48198363,-.5060003,-.42403144,-.14690426,-.0103046745,.5048769,-.22141436,.24258423,-.6422754,.24322656,-.43126827,-1.1802951,.39130136,-.07932167,-.91300964,-.72418,-.53930056,1.3650367,.2816636,.8360512,.035111547,1.0266368,-.6592778,-.20311683,-.86245996,-.11961725,.5289241,-.31791306,-.48852846,-.36820427,-1.1325517,-.172961,-.69658613,-.19654733,-.48604023,-.039546154,.27189648,-.5934818,.32894725,-.3464777,-1.2947841,.11832157,.057199597,.26814514,-.019387782,-.19241248,1.0733972,.5806271,.38309595,-.5962738,-.5991694,.0001809001,-.047461003,-.6104969,-.21187392,.3681571,.56478834,.31657338,.60445374,-.72324264,7.102296,.2320408,1.2788781,.39451483,-.38477656,.18585496,-.100402914,.12734093,-.062079042,-.17090957,-1.023449,-1.0438731,.5087607,-.11995703,-.6581255,-.0378467,.17184725,.32889995,.44024402,-.4910356,-.21709728,-.3552832,-.10108532,.67255217,-.26185948,-.33452994,-.9686227,.19499342,-.1010796,1.0840887,.106898844,-.35084283,.43648404,-.20369194,-.6644819,1.3143753,.6160634,-.7739917,-.8475234,.33090666,.64564764,.021771155,.2852819,-.27892023,.47342622,.08733651,-.24427167,.3342801,.8780564,.32256088,.042700186,-.123469636,-.6483467,-.07093936,-.1490322,.68972445,-.46431243,-.23367062,.07558803,-1.4903392,-.8174287,-.13574086,-.4515139,-.77248406,-.02985935,.29469693,.19764733,.1002135,-.5024662,.23806244,.12814781,.9761914,.02061516,-.13079715,-.17521717,.008743554,.24278867,-.11270741,-.06445181,-2.048985,1.2659411,-.20091164,-.052794524,-.05558747,-.7332828,1.0670618,.5501005,-.78713524,.13444223,-.5436457,.3966677,-1.1162032,.13205236,.67770827,.6064305,-.19848457,.6782849,-.25059327,.26677483,.19828254,.49251252,-.51555383,.60080767,-.05582097,-.41838056,-.29807913,-.52003455,-.2546904,.0057011843,-.2909273,-.55240405,-.4412741,.025383651,-1.0971302,.25295818,.14131472,-.099668816,.018698499,-.28353235,.92611885,-.39993376,.013562202,.060183506,.20493457],is_price_stale:false,set:{id:"sv8pt5",name:"Prismatic Evolutions",logo:"https://gjnrvwqtdlspyfpezgox.supabase.co/storage/v1/object/public/tcg/sets/sv8pt5.logo.png",packet_type:3,is_onchain:true,background_image_url:"",value_score:null,symbol:"https://gjnrvwqtdlspyfpezgox.supabase.co/storage/v1/object/public/tcg/sets/sv8pt5.symbol.png",language:"en",tcg_type:"pokemon",is_active:true,card_count:{total:180,official:180},release_date:new Date(1737072000000),series_id:"scarlet-violet",created_at:new Date(1737158477393),updated_at:new Date(1749439691931),tcgplayer_id:"23821"}};c.digital_product={reveal_state:{is_opened:true,is_viewed:true,opened_at:"2025-08-17T04:11:01.667Z",opened_by:"0x06eC0E35de1E6957B1050a4edBaAF0CC9D3429a6",video_url:"pack-videos/sv8pt5/PACK-RIP20FE86485524/opening-video.webm",viewed_at:"2025-08-17T04:20:39.516Z",opened_hash:"0x8813235f1a5782597c89bdcaf1279e0c3ba7d274872339a7d5b02fa583c56fbf"}};return {type:"data",data:{profile:{id:2010,nonce:"AR7PMCNFUj5ev6K4CUpijdXQziv+R6wo",smart_wallet_address:"0xeE2597C840385141032447f54ec385595f29C028",owner_wallet_address:"0xeE2597C840385141032447f54ec385595f29C028",phone_number:null,login_provider:"google",login_user:"ndw@castlelabs.io",type:"USER",notifications_active:false,username:"ndw",bio:"",avatar:"https://fwyjykvsiwufchhiliwb.supabase.co/storage/v1/object/public/rip-public/12.png",banner:"",email:"ndw@castlelabs.io",subscription:null,verified:false,created_at:new Date(1755898707669),updated_at:new Date(1755898707669),digital_products:[{id:13083,unique_id:"PACK-RIP2CAD721FA4DE",owner:"0xeE2597C840385141032447f54ec385595f29C028",is_listed:false,listing:null,created_at:new Date(1755879967226),name:"Black Bolt Booster Pack",front_image_url:"packs/zsv10pt5/PACK-RIP3KF7KGSIXO400.front.png",back_image_url:"",full_image_url:"",video_url:null,token_id:"11704",open_status:"PENDING_OPEN",reveal_state:{is_opened:false,is_viewed:false,opened_at:null,opened_by:null,video_url:null,viewed_at:null,opened_hash:null},set:{id:"zsv10pt5",name:"Black Bolt",logo:"https://api.rip.fun/storage/v1/object/public/tcg/sets/zsv10pt5.logo.png",packet_type:46,is_onchain:true,background_image_url:"https://api.rip.fun/storage/v1/object/public/avatars/sets/zsv10pt5/background_image_url-1754910613455.png",value_score:0,symbol:"https://api.rip.fun/storage/v1/object/public/tcg/sets/zsv10pt5.symbol.png",language:"en",tcg_type:"pokemon",is_active:true,card_count:{total:172,official:172},release_date:new Date(1752796800000),series_id:"scarlet-violet",created_at:new Date(1752864186850),updated_at:new Date(1754910620005),tcgplayer_id:"24325"},product:{id:"zsv10pt5-bbbp",set_id:"zsv10pt5",name:"Black Bolt Booster Pack",sku:"",type:"BOOSTER_PACK",tcgplayer_id:"630434",current_value:"8.6",is_on_sale:false,onchain_price:"9890000",sale_value:"8.6",image_url:"https://api.rip.fun/storage/v1/object/public/tcg/products/zsv10pt5/zsv10pt5-bbbp.small.webp",large_image_url:"https://api.rip.fun/storage/v1/object/public/tcg/products/zsv10pt5/zsv10pt5-bbbp.large.webp",clip_embedding:null,created_at:new Date(1752875448968),updated_at:new Date(1755961213351)}}],digital_cards:[a,b,c],favorited_items:[],showcase:[]},isOwnProfile:true,profileImageUrl:"https://www.rip.fun/api/renderer/profile/ndw",stats:{totalCards:3,totalPacks:1,totalValue:"$0"},tab:"cards",cards:[c,a,b],packs:[],favorites:[],filters:{search:"",sort:"price_desc",showOnlyListed:false,rarities:[],categories:[],characteristics:[],minPrice:0,maxPrice:999999},availableFilters:{rarities:["Common"],sets:["151","Prismatic Evolutions"],characteristics:["isNonFoil"],priceRange:[0,9]},pagination:{currentPage:1,totalPages:1,totalItems:3,itemsPerPage:24,hasNext:false,hasPrev:false}},uses:{search_params:["tab","search","sort","page","showOnlyListed","rarities","categories","characteristics","minPrice","maxPrice"],params:["username"]}}}({},{},{}))],
 82 | 							form: null,
 83 | 							error: null,
 84 | 							params: {username:"ndw"},
 85 | 							server_route: {
 86 | 								id: "/profile/[username]",
 87 | 								errors: [1,null],
 88 | 								layouts: [[true,0],[true,6]],
 89 | 								leaf: [true,67],
 90 | 								nodes: {
 91 | 									'1': () => import('../_app/immutable/nodes/1.CNieRbYK.js'),
 92 | 									'0': () => import('../_app/immutable/nodes/0.DY__wZ-y.js'),
 93 | 									'6': () => import('../_app/immutable/nodes/6.D8BP5CR4.js'),
 94 | 									'67': () => import('../_app/immutable/nodes/67.CJpLLzNW.js')
 95 | 								}
 96 | 							}
 97 | 						});
 98 | 					});
 99 | 
100 | 					if ('serviceWorker' in navigator) {
101 | 						addEventListener('load', function () {
102 | 							navigator.serviceWorker.register('../service-worker.js');
103 | 						});
104 | 					}
105 | 				}`;
106 | 
107 | try {
108 |     const result = extractAndStructureData(rawScriptData);
109 |     
110 |     // Log the final, cleaned, and structured JSON data
111 |     console.log(JSON.stringify(result, null, 2));
112 | } catch (error) {
113 |     console.error("An error occurred during data extraction:", error);
114 | }


--------------------------------------------------------------------------------
/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 | 	"extends": "./.svelte-kit/tsconfig.json",
 3 | 	"compilerOptions": {
 4 | 		"allowJs": true,
 5 | 		"checkJs": true,
 6 | 		"esModuleInterop": true,
 7 | 		"forceConsistentCasingInFileNames": true,
 8 | 		"resolveJsonModule": true,
 9 | 		"skipLibCheck": true,
10 | 		"sourceMap": true,
11 | 		"strict": true,
12 | 		"moduleResolution": "bundler"
13 | 	}
14 | 	// Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
15 | 	// except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
16 | 	//
17 | 	// To make changes to top-level options such as include and exclude, we recommend extending
18 | 	// the generated config; see https://svelte.dev/docs/kit/configuration#typescript
19 | }
20 | 


--------------------------------------------------------------------------------
/vite.config.ts:
--------------------------------------------------------------------------------
1 | import { sveltekit } from '@sveltejs/kit/vite';
2 | import { defineConfig } from 'vite';
3 | 
4 | export default defineConfig({
5 | 	plugins: [sveltekit()]
6 | });
7 | 


--------------------------------------------------------------------------------